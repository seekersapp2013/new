{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../index.svelte",
    "../alertbox.svelte",
    "../app-tab.svelte",
    "../auto-complete.svelte",
    "../board-tabs.svelte",
    "../button.svelte",
    "../ripple.svelte",
    "../calculator.svelte",
    "../calendar.svelte",
    "../capture-log.svelte",
    "../card.svelte",
    "../bar-chart-2.svelte",
    "../bar-chart.svelte",
    "../color-picker.svelte",
    "../tiny-color-picker.svelte",
    "../counter.svelte",
    "../manual-time.svelte",
    "../date-time-bar.svelte",
    "../time-select.svelte",
    "../day-time-grid.svelte",
    "../dymoji.svelte",
    "../file-browser.svelte",
    "../h-scroller.svelte",
    "../icon.svelte",
    "../input.svelte",
    "../list-item-log.svelte",
    "../log-list-loader.svelte",
    "../modal.svelte",
    "../next-prev-cal.svelte",
    "../note-textualizer.svelte",
    "../picker-select.svelte",
    "../points.svelte",
    "../pop-menu.svelte",
    "../positivity-bar.svelte",
    "../positivity-menu.svelte",
    "../positivity-selector.svelte",
    "../search-bar.svelte",
    "../sortable-list.svelte",
    "../stepper.svelte",
    "../tag-badge.svelte",
    "../text.svelte",
    "../time-balls.svelte",
    "../tip.svelte",
    "../toast.svelte",
    "../toggle-switch.svelte",
    "../toolbar.svelte",
    "../ball.svelte",
    "../score-pill.svelte",
    "../person-modal.svelte",
    "../board.svelte",
    "../tracker-button.svelte",
    "../dashboard.svelte",
    "../widget-editor.svelte",
    "../widget.svelte",
    "../widget-bar-chart.svelte",
    "../widget-min-max.svelte",
    "../widget-streak.svelte",
    "../widget-value-display.svelte",
    "../widget-what-time.svelte",
    "../tabs.svelte",
    "../library.svelte",
    "../log-editor.svelte",
    "../map.svelte",
    "../keypad.svelte",
    "../pin-lock.svelte",
    "../selector.svelte",
    "../stats-compare.svelte",
    "../stats-modal.svelte",
    "../streak-modal.svelte",
    "../step-color.svelte",
    "../step-emoji.svelte",
    "../tracker-designer.svelte",
    "../editor.svelte",
    "../input.svelte",
    "../picker.svelte",
    "../slider.svelte",
    "../selector.svelte",
    "../history.svelte",
    "../nomie-api.svelte",
    "../search.svelte",
    "../settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let size = 25;\n  export let speed = 750;\n  export let color = 'rgba(0,0,0,0.4)';\n  export let thickness = 2;\n  export let gap = 40;\n  export let radius = 10;\n\n  let dash;\n  $: dash = 2 * Math.PI * radius * (100 - gap) / 100\n</script>\n\n<svg\n  height=\"{size}\"\n  width=\"{size}\"\n  style=\"animation-duration:{speed}ms;\"\n  class=\"svelte-spinner\"\n  viewbox=\"0 0 32 32\"\n>\n  <circle\n    role=\"presentation\"\n    cx=\"16\"\n    cy=\"16\"\n    r=\"{radius}\"\n    stroke=\"{color}\"\n    fill=\"none\"\n    stroke-width=\"{thickness}\"\n    stroke-dasharray=\"{dash},100\"\n    stroke-linecap=\"round\"\n  />\n</svg>\n\n<style>\n  .svelte-spinner {\n    transition-property: transform;\n    animation-name: svelte-spinner_infinite-spin;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n  }\n  @keyframes svelte-spinner_infinite-spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n</style>\n",
    "<script>\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NText from \"../text/text.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  import Button from \"../button/button.svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let title = undefined;\n  export let message = undefined;\n  export let ok = \"Ok\";\n  export let cancel = undefined;\n  export let show = false;\n  export let onInteract = null;\n\n  let hasSlot = false;\n  let escListener;\n  $: if (show) {\n    hasSlot = arguments[1].$$slots || {}.default;\n    escListener = document.addEventListener(\"keyup\", (evt) => {\n      if (evt.key == \"Escape\") {\n        methods.onCancel();\n      }\n    });\n  } else {\n    escListener = document.removeEventListener(\"keyup\", () => {});\n  }\n\n  const methods = {\n    onOk() {\n      show = false;\n      if (onInteract) {\n        onInteract(true);\n        dispatch(\"close\");\n      }\n    },\n    onCancel() {\n      show = false;\n      if (onInteract) {\n        onInteract(false);\n        dispatch(\"close\");\n      }\n    },\n  };\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">:global(.alert-dialog) {\n  min-height: 200px;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2200;\n  background-color: var(--color-full-screen);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.5s ease-in-out; }\n  :global(.alert-dialog).visible {\n    opacity: 1; }\n  :global(.alert-dialog).hidden {\n    pointer-events: none;\n    opacity: 0; }\n    :global(.alert-dialog).hidden .card {\n      opacity: 0; }\n  :global(.alert-dialog) .card {\n    border-radius: 1.2rem;\n    transition: all 0.2s ease-in-out;\n    max-width: 400px;\n    max-height: 80vh;\n    min-height: 100px;\n    width: 200px;\n    min-width: 300px !important;\n    flex-grow: 1;\n    background-color: var(--color-solid);\n    border: solid 1px var(--color-faded-1);\n    box-shadow: var(--box-shadow);\n    margin: 10px;\n    display: flex;\n    justify-content: stretch;\n    align-content: stretch;\n    color: var(--color-inverse-2); }\n    :global(.alert-dialog) .card .card-title {\n      line-height: 115%;\n      color: var(--color-inverse); }\n      :global(.alert-dialog) .card .card-title.message {\n        padding-bottom: 6px; }\n    :global(.alert-dialog) .card .card-body {\n      flex-grow: 1;\n      flex-shrink: 1;\n      overflow-y: auto; }\n  :global(.alert-dialog) .footer {\n    border-top: solid 1px var(--color-faded-1); }\n    :global(.alert-dialog) .footer button {\n      min-width: 120px;\n      border-radius: 0.9rem; }\n  :global(.alert-dialog) .btn-toolbar .btn {\n    min-width: 100px; }\n</style>\n\n<div class=\"full-screen alert-dialog {show === true ? 'visible' : 'hidden'}\">\n  <div class=\"alert-dialog-window card\">\n    {#if title}\n      <div class=\"card-title {!hasSlot && !message ? 'message-less' : 'message'}\">{title}</div>\n    {/if}\n\n    {#if message && !hasSlot}\n      <div class=\"card-body align-items-center pt-0\">{message}</div>\n    {:else if hasSlot && !message}\n      <div class=\"slot-holder card-body pt-0\">\n        <slot />\n      </div>\n    {:else if hasSlot && message}\n      <div class=\"slot-holder card-body pt-0\">\n        <p>{message}</p>\n        <slot />\n      </div>\n    {/if}\n\n    <!-- -->\n\n    <div class=\"p-1 d-flex flex-row footer\">\n      {#if cancel}\n        <Button color=\"transparent\" size=\"lg\" block className=\"mr-1 flex-grow\" on:click={methods.onCancel}>{cancel}</Button>\n      {/if}\n      <Button block size=\"lg\" className=\"ml-1 flex-grow\" on:click={methods.onOk}>{ok}</Button>\n    </div>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { Link } from \"svelte-routing\";\nimport NPaths from \"../../paths\";\nimport { UserStore } from \"../../store/user-store\";\nimport Ripple from \"../button/ripple.svelte\";\nimport Icon from \"../icon/icon.svelte\";\n$: hideLabels = $UserStore.meta.hideLabels;\nexport let label;\nexport let icon;\nexport let link;\nlet hit;\n</script>\n\n<style lang=\"scss\">.tab-wrap {\n  display: flex;\n  flex-grow: 1;\n  height: 100%;\n  align-items: center; }\n\n:global(.tab-wrap a) {\n  position: relative;\n  color: var(--color-inverse-2);\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  padding: 6px 10px;\n  font-size: 0.7rem;\n  height: 100%;\n  text-decoration: none;\n  flex-grow: 1;\n  flex-shrink: 1;\n  transition: all 0.2s ease-in-out;\n  min-width: 30px;\n  width: 100%; }\n  :global(.tab-wrap a) i {\n    pointer-events: none;\n    font-size: 1.2rem;\n    transition: all 0.2s ease-in-out; }\n  :global(.tab-wrap a) label {\n    pointer-events: none;\n    margin-bottom: 0; }\n  :global(.tab-wrap a)[aria-current=\"page\"] {\n    color: var(--color-primary-bright); }\n    :global(.tab-wrap a)[aria-current=\"page\"] svg {\n      transition: all 0.2s ease-in-out; }\n    :global(.tab-wrap a)[aria-current=\"page\"]:after {\n      content: \"\"; }\n</style>\n\n<div class=\"tab-wrap tab-{label}\">\n  <Link to={link}>\n    <slot />\n    <Icon name={icon} />\n    {#if !hideLabels}\n      <label>{label}</label>\n    {/if}\n  </Link>\n</div>\n",
    "<script>\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { PeopleStore } from \"../../store/People-store\";\n  import { ContextStore } from \"../../store/context-store\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n  import tick from \"../../utils/tick/tick\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import TrackerInputer from \"../../modules/tracker/tracker-inputer\";\n\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let input = null;\n  export let scroller = false;\n\n  let state = {\n    partialTag: null,\n    results: []\n  };\n\n  async function getTrackerInput(tracker) {\n    let inputer = new TrackerInputer(tracker, $TrackerStore);\n    return await inputer.getNoteString();\n  }\n\n  function close() {\n    state.results = [];\n  }\n\n  /**\n   * Auto Complete Search\n   * Searches trackers, People and context\n   * THIS IS A MESS\n   *\n   **/\n  const autoCompleteSearch = (searchTag, type = \"tracker\") => {\n    // Search for Trackers\n    try {\n      if (type == \"tracker\") {\n        let tkrs = Object.keys($TrackerStore.trackers || {})\n          .map(tag => {\n            return $TrackerStore.trackers[tag];\n          })\n          .filter(trk => {\n            return trk.tag.search(searchTag.replace(\"#\", \"\")) > -1;\n          });\n        return tkrs.length ? tkrs : null;\n\n        // Search for People\n      } else if (type === \"person\") {\n        let People = Object.keys($PeopleStore.People).filter(person => {\n          return person.search(searchTag.toLowerCase()) > -1;\n        });\n        return People.length\n          ? People.map(username => {\n              return {\n                tag: username,\n                emoji: \"👤\",\n                type: \"person\"\n              };\n            })\n          : null;\n\n        // Search for Context\n      } else if (type === \"context\") {\n        let context = $ContextStore.filter(term => {\n          let text = searchTag.replace(\"+\", \"\").toLowerCase();\n          term = term.toLowerCase();\n          return term.search(text.toLowerCase()) > -1;\n        });\n        return context.length\n          ? context.map(c => {\n              return { tag: c, emoji: \"💡\", type: \"context\", note: `+${c}` };\n            })\n          : null;\n      }\n    } catch (e) {}\n  };\n\n  const onSelect = async tracker => {\n    let note = \"\";\n    let partialTag = \"\";\n    if (tracker.type === \"person\") {\n      note = `@${tracker.tag} `;\n      partialTag = `@${state.partialTag}`;\n    } else if (tracker.type === \"context\") {\n      note = `+${tracker.tag} `;\n      partialTag = `${state.partialTag}`;\n    } else {\n      note = await getTrackerInput(tracker);\n      partialTag = `#${state.partialTag.replace(\"#\", \"\")}`;\n    }\n    // Split Input to in array\n    const inputParts = input.split(\" \").filter(word => {\n      return word != partialTag;\n    });\n    inputParts.push(note + \" \");\n    // Dispatch the Select\n    dispatch(\"select\", { tracker, note: inputParts.join(\" \") });\n    await tick(120);\n    state.partialTag = null;\n    state.results = null;\n  };\n\n  const onInput = str => {\n    let value = str;\n    let last = value.charAt(value.length - 1);\n    if (last == \" \") {\n      state.results = null;\n    } else if (value.length) {\n      let arr = value.split(\" \");\n      let tag = arr[arr.length - 1];\n      state.cursorIndex = arr.length - 1;\n      // If its a tag\n      if (tag.charAt(0) === \"#\" && tag.length > 1) {\n        state.partialTag = tag;\n        state.results = autoCompleteSearch(tag, \"tracker\");\n        // If its a person\n      } else if (tag.charAt(0) === \"@\" && tag.length > 1) {\n        state.partialTag = tag.replace(/\\@/gi, \"\");\n        state.results = autoCompleteSearch(state.partialTag, \"person\");\n        // If it's context\n      } else if (tag.charAt(0) === \"+\" && tag.length > 1) {\n        state.partialTag = tag;\n        state.results = autoCompleteSearch(tag, \"context\");\n      } else {\n        state.partialTag = null;\n        state.results = null;\n      }\n    } else {\n      state.partialTag = null;\n      state.results = null;\n    }\n  };\n\n  /**\n   * Main Mount\n   */\n\n  let lastInput;\n  $: if (lastInput != input) {\n    lastInput = input;\n    onInput(input);\n  }\n</script>\n\n<style lang=\"scss\">:global(autocomplete-results .scroller) {\n  max-height: 48px;\n  overflow: scroll; }\n  :global(autocomplete-results .scroller) .tracker-list {\n    margin-top: 0px;\n    margin-bottom: 2px;\n    max-height: 40px;\n    display: flex;\n    flex-wrap: nowrap !important;\n    width: fit-content; }\n\n.autocomplete-results {\n  margin: 0px;\n  border-radius: 2px;\n  padding: 2px;\n  transition: all 0.2s ease-in-out;\n  z-index: 100; }\n  .autocomplete-results.animate.visible {\n    transition: all 0.2s ease-in-out;\n    opacity: 1; }\n  .autocomplete-results.animate.hidden {\n    max-height: 0px !important;\n    padding: 0;\n    overflow: hidden;\n    margin: 0;\n    transition: all 0.2s ease-in-out;\n    opacity: 0;\n    pointer-events: none;\n    transform: translateY(60px); }\n  .autocomplete-results .tracker-list {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap; }\n  .autocomplete-results .btn {\n    flex-grow: 0;\n    flex-shrink: 0;\n    max-width: 120px;\n    white-space: pre; }\n</style>\n\n<!--  -->\n<div\n  class=\"{scroller ? 'scroller' : 'no-scroller'} autocomplete-results animate {(state.results || []).length ? 'visible' : 'hidden'}\">\n  <div class=\"container p-0 tracker-list\">\n    <button class=\"btn btn-round btn-icon px-0\" on:click={close}>\n      <NIcon name=\"close\" />\n    </button>\n    {#each state.results || [] as tracker (tracker.tag)}\n      <button\n        class=\"btn btn-badge bg-solid-1\"\n        on:click={() => {\n          onSelect(tracker);\n        }}>\n        {#if tracker.type == 'person'}\n          <Dymoji\n            person={$PeopleStore.People[tracker.tag]}\n            className=\"mr-2\"\n            size={20}\n            radius={0.3} />\n        {:else}{tracker.emoji}{/if}\n        <div style=\"max-width:120px;\" class=\"ml-1 truncate\">\n          {#if tracker.type == 'person'}\n            {$PeopleStore.People[tracker.tag].displayName}\n          {:else if tracker.type == 'context'}\n            {tracker.tag}\n          {:else}{tracker.label}{/if}\n        </div>\n      </button>\n    {/each}\n    <div class=\"filler\" />\n  </div>\n</div>\n",
    "<script>\n  import { createEventDispatcher, onMount } from \"svelte\";\n\n  // components\n  import NHScroller from \"../h-scroller/h-scroller.svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  import Elephant from \"../elephant.svelte\";\n\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  export let boards = [];\n  export let active = undefined;\n\n  const dispatch = createEventDispatcher();\n\n  const state = {\n    active: null,\n    activeIndex: 0,\n    hasTimers: false,\n  };\n\n  // When board size changes\n  $: if (boards.length && active) {\n    boards.forEach((b, index) => {\n      if (b.id == active && b.id !== \"all\" && b.id !== \"_timers\") {\n        state.activeIndex = index; // all\n      }\n    });\n  }\n\n  onMount(() => {});\n\n  const methods = {\n    asArray() {\n      return;\n    },\n    setActive(id) {},\n  };\n</script>\n\n<style lang=\"scss\">.add-board:before {\n  display: none; }\n\nbutton.inactive {\n  opacity: 0.8;\n  color: var(--color-grey-4); }\n</style>\n\n<NHScroller activeIndex={state.activeIndex} className=\"n-board-tabs\">\n  {#each boards as board}\n    <button\n      class=\"tab board-{board.id}\n      {board.id == active ? 'selected' : 'inactive'}\"\n      on:click={() => {\n        dispatch('tabTap', board);\n      }}>\n      {#if board.id == 'all'}\n        <!-- <Elephant size={18} /> -->\n        <NIcon name=\"grid\" className=\"fill-primary-bright\" size=\"18\" />\n      {:else}{board.label}{/if}\n    </button>\n  {/each}\n  <slot />\n  <slot name=\"right\" />\n</NHScroller>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import Ripple from \"./ripple.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let size = \"md\";\n  export let type = \"solid\";\n  export let shape = \"rounded\";\n  export let color = \"primary\";\n  export let className = \"\";\n  export let block = false;\n  export let style = \"\";\n  export let disabled = false;\n  export let delay = 300;\n  export let icon = false;\n  export let title = undefined;\n  export let ariaLabel = undefined;\n  export let prevent = false;\n  export let inline = false;\n\n  let hit;\n  let ripple;\n</script>\n\n<style>\n  button {\n    position: relative;\n    overflow: hidden;\n  }\n  svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n    bottom: 0;\n  }\n  :global(.btn.btn-inline) {\n    display: inline-flex;\n  }\n</style>\n\n<button\n  {style}\n  {disabled}\n  class={`btn ${block ? 'btn-block' : ''} ${icon ? 'btn-icon' : ''} \n          btn-${type} btn-${shape} btn-${color} btn-${size} \n          ${inline ? 'btn-inline' : ''}\n          ${className}`}\n  on:mousedown={(evt) => {}}\n  {title}\n  area-label={ariaLabel || title}\n  on:click={(evt) => {\n    hit = [evt.offsetX, evt.offsetY];\n    if (prevent) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n    if (delay) {\n      setTimeout(() => {\n        dispatch('click', evt);\n      }, delay);\n    } else {\n      dispatch('click', evt);\n    }\n  }}>\n  <Ripple bind:hit />\n  <slot />\n\n</button>\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\nimport { tweened } from \"svelte/motion\";\nimport { backOut } from \"svelte/easing\";\nimport Hit from \"./ripple-hit\";\nexport let hit = undefined;\nlet lastHit;\nlet hideTimeout;\nlet show = false;\nlet x;\nlet y;\nlet hits = [];\n$: if (hit && hit.length == 2) {\n    hits.unshift(new Hit(hit));\n    if (hits.length > 3) {\n        hits = hits.slice(0, 2);\n    }\n    hits = hits;\n}\n</script>\n\n<style lang=\"scss\">.ripple {\n  pointer-events: none;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  overflow: hidden;\n  z-index: 1000; }\n\n.ball {\n  transition: all 0.5s ease-in-out;\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  border-radius: 50%;\n  top: 5px;\n  left: 20px;\n  opacity: 0; }\n\n.ball.grow {\n  animation: ripple 1.5s;\n  background-color: var(--color-translucent-inverse); }\n\n@keyframes ripple {\n  0% {\n    width: 0px;\n    height: 0px;\n    opacity: 0; }\n  1% {\n    width: 4px;\n    height: 4px;\n    opacity: 0.2; }\n  100% {\n    width: 150px;\n    height: 150px;\n    transform: scale(20);\n    opacity: 0; } }\n</style>\n\n<div class=\"ripple\">\n  {#each hits as _hit (`${_hit.id}`)}\n    <div class=\"ball grow\" style=\"top:{_hit.y}px;left:{_hit.x}px;\" />\n  {/each}\n</div>\n",
    "<script>\n  // Inspirated by https://codepen.io/ethanryan/details/MryqXv\n\n  // Math will do the calculatng\n  import math from \"../../utils/math/math\";\n\n  import { tick, createEventDispatcher, onMount } from \"svelte\";\n  import Button from \"../button/button.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  let globalAnswer = \"0\"; //declaring global variable here... this is bad practice\n  let buffer = [];\n  let fontSize = 40;\n\n  export let value = 0;\n  export let displayFormat = undefined;\n  export let defaultEphemeral = true;\n\n  let tapped = false;\n\n  onMount(() => {\n    if (value) {\n      buffer = [value];\n      change();\n    }\n  });\n\n  function change() {\n    if (buffer.length == 1) {\n      globalAnswer = buffer[0];\n    } else if (buffer.length) {\n      globalAnswer = calculateBuffer();\n    } else {\n      globalAnswer = 0;\n    }\n    if (globalAnswer != value) {\n      dispatch(\"change\", globalAnswer);\n    }\n    getFontSize();\n  }\n\n  const buttons = [\n    [\"C\", \"+/-\", \"%\", \"/\"],\n    [7, 8, 9, \"*\"],\n    [4, 5, 6, \"-\"],\n    [1, 2, 3, \"+\"],\n    [null, 0, \".\", null],\n  ];\n\n  function calculateBuffer() {\n    return math.calculate(buffer);\n  }\n\n  function click(input) {\n    // If we should clear a default and one exists\n    if (!tapped && value && defaultEphemeral) {\n      value = 0;\n      clearBuffer();\n      tapped = true;\n    }\n    insertBuffer(input);\n  }\n\n  function clearBuffer() {\n    buffer = [];\n  }\n\n  function isNumber(input) {\n    return !isNaN(input) && input !== null;\n  }\n\n  // Insert a key or operator into the buffer\n  function insertBuffer(insert) {\n    // Set last buffer\n    let lastBuffer = buffer.length ? buffer[buffer.length - 1] : null;\n    // if its a number and so is the last buffer - merge the nubmers\n    if (isNumber(insert) && isNumber(lastBuffer)) {\n      buffer[buffer.length - 1] = parseFloat(`${lastBuffer}${insert}`);\n      change();\n      // If the insert is a number and the last buffer - set the decimal\n    } else if (isNumber(insert) && lastBuffer == \".\") {\n      let preDecimal = buffer[buffer.length - 2];\n      let postDecimal = insert;\n      if (!math.isFloat(preDecimal)) {\n        buffer[buffer.length - 2] = `${preDecimal}.${postDecimal}`;\n        buffer.pop();\n      }\n      change();\n      // If the insert is a decimal - store it, but don't change anything\n    } else if (isNumber(insert)) {\n      buffer.push(insert);\n      change();\n    } else {\n      switch (insert) {\n        case \"C\":\n          buffer = [];\n          change();\n          break;\n        case \"+/-\":\n          if (globalAnswer > 0) {\n            buffer = [-Math.abs(globalAnswer)];\n          } else {\n            buffer = [Math.abs(globalAnswer)];\n          }\n          change();\n          break;\n        case \"%\":\n          buffer = [globalAnswer / 100];\n          change();\n          break;\n        default:\n          if ([\"+\", \"*\", \"/\", \"-\", \".\"].indexOf(insert) > -1) {\n            buffer.push(insert);\n            change();\n          }\n          break;\n      }\n    }\n    buffer = buffer;\n  }\n\n  async function getFontSize() {\n    await tick(10);\n    let len = globalAnswer.toString().length;\n    if (len < 10) {\n      fontSize = 40;\n    } else if (len >= 10 && len < 18) {\n      fontSize = 30;\n    } else {\n      fontSize = 20;\n    }\n  }\n</script>\n\n<style lang=\"scss\">.buttons {\n  display: grid;\n  justify-content: center;\n  grid-template-areas: \"main main main main\" \"main main main main\" \"main main main main\" \"main main main main\" \"main main main main\";\n  grid-template-columns: 70px 70px 70px 70px;\n  grid-template-rows: 70px 70px; }\n\n@media (max-width: 349.98px) {\n  .buttons {\n    grid-template-columns: 25% 25% 25% 25%;\n    grid-template-rows: 60px 60px; }\n    .buttons .btn {\n      width: 100%;\n      font-weight: 600;\n      height: 45px; } }\n\n@media (min-width: 350px) {\n  .buttons {\n    grid-template-columns: 80px 80px 80px 80px;\n    grid-template-rows: 80px 80px; }\n    .buttons .btn {\n      width: 75px;\n      height: 75px; } }\n\n@keyframes numberUp {\n  from {\n    transform: translateY(8px);\n    opacity: 0; }\n  to {\n    transform: translateY(0);\n    opacity: 1; } }\n\n.calc-screen {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: black;\n  border: solid 1px rgba(255, 255, 255, 0.1);\n  color: white;\n  text-align: right;\n  border-radius: 4pt;\n  padding: 4pt 8pt;\n  padding-bottom: 4pt;\n  width: 100%;\n  margin: 0 auto 8pt; }\n  .calc-screen .value {\n    line-height: 100%;\n    height: 50px;\n    text-align: right; }\n  .calc-screen .preview {\n    position: absolute;\n    top: 4pt;\n    left: 8pt;\n    opacity: 0.8;\n    color: #999;\n    font-size: 0.8rem; }\n  .calc-screen .buffer {\n    height: 20px;\n    min-height: 22px;\n    font-size: 0.8rem;\n    color: #999; }\n\n:global(.numberUp) {\n  display: inline-block;\n  animation: numberUp 0.4s ease-in-out;\n  -webkit-animation: numberUp 0.4s ease-in-out; }\n\n:global(.n-calculator .btn) {\n  touch-action: manipulation;\n  border: none;\n  color: var(--color-inverse);\n  margin: 4px;\n  border-radius: 50%;\n  line-height: 100%;\n  width: 64px;\n  height: 64px;\n  font-size: 26px; }\n\n:global(.n-calculator .btn.r-0) {\n  color: var(--color-inverse-1);\n  background-color: transparent; }\n\n:global(.n-calculator .btn.b-3) {\n  color: var(--color-inverse-1);\n  background-color: transparent; }\n\n:global(.n-calculator .btn.b-0.r-0) {\n  color: var(--color-red);\n  background-color: transparent; }\n</style>\n\n<div class=\"n-calculator\">\n  <div class=\"calc-screen\">\n    {#if displayFormat}\n      <div class=\"preview\">{displayFormat(globalAnswer)}</div>\n    {/if}\n    <div class=\"buffer\">\n      {#if buffer.length > 1}\n        {#each buffer as bit}\n          <span>{bit}</span>\n        {/each}\n      {/if}\n    </div>\n    <div class=\"value\" style=\"font-size:{fontSize}px\">\n      {#each globalAnswer.toString().split('') as bit}\n        <span class=\"numberUp\">{bit}</span>\n      {/each}\n    </div>\n  </div>\n  <div class=\"buttons\">\n    {#each buttons as buttonRow, rIndex}\n      {#each buttonRow as button, bIndex}\n        {#if button !== null}\n          <Button\n            shape=\"circle\"\n            color=\"light\"\n            size=\"lg\"\n            delay={0}\n            className=\"r-{rIndex} b-{bIndex}\"\n            on:click={() => {\n              click(button);\n            }}>\n            {button}\n          </Button>\n        {:else}\n          <span class=\"empty\" />\n        {/if}\n      {/each}\n    {/each}\n  </div>\n</div>\n",
    "<script lang=\"ts\">// Port and modification from vue-sweet-calendar\n// https://github.com/maryayi/vue-sweet-calendar/blob/master/src/components/Calendar.vue\nimport { onMount, onDestroy } from \"svelte\";\nimport { createEventDispatcher } from \"svelte\";\nimport DateTime from \"./date-time.js\";\nimport math from \"../../utils/math/math\";\nimport dayjs from \"dayjs\";\n;\nimport Logger from \"../../utils/log/log\";\nimport calcTrackerScore from \"../../modules/scoring/score-tracker\";\nimport { UserStore } from \"../../store/user-store\";\nimport { Lang } from \"../../store/lang\";\nimport NIcon from \"../../components/icon/icon.svelte\";\nimport Text from \"../../components/text/text.svelte\";\nimport NPositivityBar from \"../../components/positivity-bar/positivity-bar.svelte\";\nimport NextPrevCal from \"../../components/next-prev-cal/next-prev-cal.svelte\";\nconst console = new Logger(\"📅 calendar/calendar\");\nconst dispatch = createEventDispatcher();\n// Props\nexport let initialDate = dayjs();\nexport let size = \"md\";\nexport let className = \"\";\nlet firstDayOfWeek;\n// Updating to be react...\n$: firstDayOfWeek = $UserStore.meta.firstDayOfWeek || 1; // 1: Sunday, 2: Monday, etc.\n// export let eventCategories = [];\nexport let events = [];\nexport let offDays = [[1, 7]];\nexport let showHeader = true;\nexport let tracker = null;\n// Data\nexport let state = {\n    date: initialDate.format ? initialDate : dayjs(initialDate),\n    today: new Date(),\n    weekdays: null,\n    percentage: null,\n    totals: {\n        positive: 0,\n        negative: 0,\n        neutral: 0,\n    },\n};\nlet mounted = false;\nonMount(() => {\n    mounted = true;\n});\nonDestroy(() => {\n    mounted = false;\n});\nlet days;\nlet day = null;\nlet startWeekDayOfMonth = state.date.startOf(\"month\").toDate().getDay() + 1;\nlet numberOfDays = state.date.daysInMonth();\nlet selectedMonth = state.date.month();\nlet selectedMonthName = state.date.format(\"MMMM\");\nlet selectedYear = state.date.format(\"YYYY\");\nlet monthStartDate = dayjs(state.date).startOf(\"month\");\nlet refreshing = false;\nlet positiveCount = 0;\nlet negativeCount = 0;\nlet neutralCount = 0;\n// If the initial date is set, convert to dayjs date\n$: if (initialDate) {\n    state.date = dayjs(initialDate);\n    state.weekdays = methods.generateWeekdayNames(firstDayOfWeek);\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let neutralCount = 0;\n}\nfunction init() {\n    lastDate = state.date;\n    state.totals.neutral = 0;\n    state.totals.positive = 0;\n    state.totals.negative = 0;\n    startWeekDayOfMonth = state.date.startOf(\"month\").toDate().getDay() + 1;\n    numberOfDays = state.date.daysInMonth();\n    selectedMonth = state.date.month();\n    selectedMonthName = state.date.format(\"MMMM\");\n    selectedYear = state.date.format(\"YYYY\");\n    monthStartDate = dayjs(state.date).startOf(\"month\");\n    // Create array of empty days previous month calendar bleed over\n    let emptyDays = Array((startWeekDayOfMonth - firstDayOfWeek + 7) % 7).fill(null);\n    // Create array of days for this month\n    let nonEmptyDays = Array(numberOfDays)\n        .fill(0)\n        .map((item, index) => dayjs(monthStartDate).add(index, \"day\"));\n    // Merge the arrays\n    days = emptyDays.concat(nonEmptyDays);\n    state.percentage = nonEmptyDays.length / (emptyDays.length + nonEmptyDays.length);\n}\n// If date change - do the magic.\nlet lastDate = null;\n$: if (state.date && state.date != lastDate) {\n    init();\n}\n// Methods\nconst methods = {\n    prevMonth() {\n        state.date = state.date.subtract(1, \"month\");\n    },\n    nextMonth() {\n        state.date = state.date.add(1, \"month\");\n    },\n    generateWeekdayNames(firstDayOfWeek = 1) {\n        let weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        for (let i = 2; i <= firstDayOfWeek; i++) {\n            let first = weekdays.shift();\n            weekdays.push(first);\n        }\n        return weekdays;\n    },\n    // Refresh the view\n    refresh() {\n        refreshing = true;\n        setTimeout(() => {\n            refreshing = false;\n        }, 1);\n    },\n    // Go to Today\n    goToday(withClick = true) {\n        state.date = dayjs();\n        if (withClick) {\n            dispatch(\"dayClick\", state.date);\n        }\n    },\n    /**\n     * Generate the Style for the Provided Day\n     */\n    getDayStyle(day) {\n        let total = 0;\n        let score = undefined;\n        // Filter values, get only this days\n        let values = events\n            .filter((row) => {\n            return day.toDate().toDateString() === new Date(row.end).toDateString();\n        })\n            // Map the tracker - and return the sum or avg values\n            .map((row) => {\n            if (!row.trackers) {\n                row.getMeta();\n            }\n            if (tracker.math == \"sum\") {\n                return math.sum(row.getTrackerValues(tracker.tag));\n            }\n            else {\n                return math.average(row.getTrackerValues(tracker.tag));\n            }\n        });\n        // If we have values\n        if (values.length) {\n            // If it's a sum\n            if (tracker.math == \"sum\") {\n                total = math.sum(values);\n            }\n            else {\n                total = math.average(values);\n            }\n        }\n        // If we have a total - figure the score\n        if (total) {\n            score = calcTrackerScore(total, tracker);\n        }\n        // Lets extract the score for this tracker\n        if (values.length) {\n            // Did we pass in a tracker?\n            if (score == 0) {\n                state.totals.neutral = state.totals.neutral + 1;\n            }\n            else if (score > 0) {\n                state.totals.positive = state.totals.positive + 1;\n            }\n            else if (score < 0) {\n                state.totals.negative = state.totals.negative + 1;\n            }\n            return methods.getDayBorder(score);\n        }\n        else {\n            return ``;\n        }\n    },\n    getDayBorder(score) {\n        if (score) {\n            if (score > 0) {\n                return `font-weight:bold; border:solid 2px var(--color-green); color:#FFF; background-color:var(--color-green)`;\n            }\n            else {\n                return `font-weight:bold; border:solid 2px var(--color-red); color:#FFF; background-color:var(--color-red)`;\n            }\n        }\n        else {\n            return `font-weight:bold; border:solid 2px var(--color-primary-bright); color:#FFF; background-color:var(--color-primary-bright);`;\n        }\n    },\n    getDayClass(day) {\n        try {\n            const dayFormat = day.format(\"YYYY-MM-DD\");\n            const stateDateFormat = state.date.format(\"YYYY-MM-DD\");\n            const todayFormat = dayjs(state.today).format(\"YYYY-MM-DD\");\n            const activeToday = events.find((row) => {\n                return dayFormat === stateDateFormat;\n            });\n            let classes = [\n                \"day\",\n                `day-${day.format(\"D\")}`,\n                `weekday-${day.toDate().getDay()}`,\n                activeToday ? \"selected\" : \"not-selected\",\n                offDays.includes(day.toDate().getDay()) ? \"off-day\" : null,\n                dayFormat === stateDateFormat ? \"active\" : \"inactive\",\n                dayFormat === todayFormat ? \"today\" : null,\n            ];\n            return classes.join(\" \");\n        }\n        catch (e) {\n            console.error(e);\n            return \"error-generating-classes\";\n        }\n    },\n};\n</script>\n\n<style lang=\"scss\">@charset \"UTF-8\";\n.sweet-calendar.sm {\n  --cal-font-size: 0.5rem;\n  --cal-day-size: 16px; }\n\n.sweet-calendar.md {\n  --cal-font-size: 0.8rem;\n  --cal-day-size: 20px; }\n\n.sweet-calendar.lg {\n  --cal-font-size: 0.8rem;\n  --cal-day-size: 24px; }\n\n.sweet-calendar .active {\n  position: relative; }\n  .sweet-calendar .active:before {\n    content: \"✔\";\n    font-size: 10px;\n    color: var(--color-green);\n    top: -4px;\n    right: -4px;\n    position: absolute; }\n\n.sweet-calendar .today {\n  position: relative; }\n  .sweet-calendar .today:after {\n    content: \"\";\n    height: 4px;\n    width: 4px;\n    border-radius: 2px;\n    background-color: var(--color-primary-bright);\n    top: -3px;\n    position: absolute; }\n\n.sweet-calendar .sweet-container .header {\n  align-items: center;\n  display: grid;\n  grid-column-gap: 4px;\n  grid-template-columns: 1fr 24px 50px 24px;\n  margin: 6px 0;\n  margin-left: 16px; }\n  .sweet-calendar .sweet-container .header .month {\n    flex-grow: 1; }\n  .sweet-calendar .sweet-container .header .left-arrow {\n    justify-self: center; }\n    .sweet-calendar .sweet-container .header .left-arrow span {\n      cursor: pointer; }\n  .sweet-calendar .sweet-container .header .right-arrow {\n    justify-self: center; }\n    .sweet-calendar .sweet-container .header .right-arrow span {\n      cursor: pointer; }\n\n.sweet-calendar .sweet-container .body {\n  align-items: center;\n  display: grid;\n  grid-row-gap: 4px;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(7, 1fr);\n  justify-items: center; }\n  .sweet-calendar .sweet-container .body .day-name {\n    color: var(--color-inverse);\n    font-weight: bold;\n    font-size: 0.6rem;\n    height: 18px; }\n  .sweet-calendar .sweet-container .body .day-container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 28px;\n    position: relative;\n    width: 100%; }\n    .sweet-calendar .sweet-container .body .day-container .day {\n      align-content: center;\n      border-radius: 32%;\n      box-sizing: content-box;\n      color: var(--color-inverse-2);\n      display: flex;\n      height: var(--cal-day-size);\n      justify-content: center;\n      min-width: var(--cal-day-size); }\n      .sweet-calendar .sweet-container .body .day-container .day.selected {\n        border: 3px solid var(--color-solid-2); }\n      .sweet-calendar .sweet-container .body .day-container .day.off-day {\n        background-color: #e5e5e5;\n        font-weight: bold; }\n      .sweet-calendar .sweet-container .body .day-container .day span {\n        font-size: var(--cal-font-size);\n        margin: 0;\n        padding: 0;\n        align-self: center; }\n\n.sweet-calendar .calendar {\n  background-color: inherit; }\n  .sweet-calendar .calendar .body .day-container .before,\n  .sweet-calendar .calendar .body .day-container .after {\n    height: 28px; }\n\n.sweet-calendar .date-picker {\n  background-color: inherit; }\n  .sweet-calendar .date-picker .body .day-container .day:hover {\n    background-color: rgba(153, 66, 66, 0.5);\n    border: 2px solid #994242;\n    cursor: pointer; }\n  .sweet-calendar .date-picker .body .day-container .day.selected {\n    border: 2px solid #994242;\n    color: #994242; }\n\n.sweet-calendar .day.unfilled {\n  background-color: transparent; }\n</style>\n\n{#if state.date && mounted}\n  <div class=\"sweet-calendar {className} {size}\">\n    <div class=\"sweet-container calendar\">\n      {#if showHeader}\n        <div class=\"header pr-3\">\n          <div class=\"month filler\">\n            <Text size=\"sm\" bold>{selectedMonthName} {selectedYear}</Text>\n          </div>\n          <NextPrevCal\n            on:previous={methods.prevMonth}\n            on:next={methods.nextMonth}\n            on:calendar={() => {\n              methods.goToday(false);\n            }} />\n        </div>\n      {/if}\n\n      <div class=\"body\">\n        {#each state.weekdays || [] as day, index}\n          <div class=\"day-name\" aria-label={day}>{day[0]}</div>\n        {/each}\n        {#each days || [] as day}\n          <div class=\"day-container clickable\">\n            {#if day}\n              <div\n                data-date={day.format('YYYY-MM-DD')}\n                on:click={(event) => {\n                  dispatch('dayClick', day);\n                }}\n                class={methods.getDayClass(day)}\n                style={methods.getDayStyle(day)}>\n                <span>{day.format('D')}</span>\n              </div>\n            {/if}\n          </div>\n        {/each}\n      </div>\n    </div>\n  </div>\n  <NPositivityBar positive={state.totals.positive} neutral={state.totals.neutral} negative={state.totals.negative} />\n{:else}Loading{/if}\n",
    "<script lang=\"ts\">/**\n * Capture Log\n *\n * The Component used to construct a new log.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onDestroy, onMount } from \"svelte\";\nimport DateTimeBar from \"./date-time-bar/date-time-bar.svelte\";\nimport NomieLog from \"../modules/nomie-log/nomie-log\";\nimport Storage from \"../modules/storage/storage\";\nimport NItem from \"../components/list-item/list-item.svelte\";\nimport NIcon from \"../components/icon/icon.svelte\";\nimport NCell from \"../components/cell/cell.svelte\";\nimport NPoints from \"../components/points/points.svelte\";\nimport Button from \"../components/button/button.svelte\";\nimport dayjs from \"dayjs\";\n;\nimport domtoimage from \"dom-to-image-chrome-fix\";\nimport Dymoji from \"../components/dymoji/dymoji.svelte\";\nimport AutoComplete from \"../components/auto-complete/auto-complete.svelte\";\nimport NPositivitySelector from \"../components/positivity-selector/positivity-selector.svelte\";\nimport NSpinner from \"../components/spinner/spinner.svelte\";\nimport Logger from \"../utils/log/log\";\nimport time from \"../utils/time/time\";\nimport ScoreNote from \"../modules/scoring/score-note\";\nimport TrackerInputer from \"../modules/tracker/tracker-inputer\";\nimport tick from \"../utils/tick/tick\";\nimport math from \"../utils/math/math\";\nimport { Interact } from \"../store/interact\";\nimport { TrackerStore } from \"../store/tracker-store\";\nimport { LedgerStore } from \"../store/ledger\";\nimport { ActiveLogStore } from \"../store/active-log\";\nimport { UserStore } from \"../store/user-store\";\nimport { Lang } from \"../store/lang\";\nimport { PeopleStore } from \"../store/People-store\";\nimport { ContextStore } from \"../store/context-store\";\nimport Text from \"./text/text.svelte\";\nimport PositivityMenu from \"./positivity-selector/positivity-menu.svelte\";\nimport Icon from \"../components/icon/icon.svelte\";\n// Consts\nconst console = new Logger(\"capture-log\");\nconst isIOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\nlet textarea;\nlet iOSFileInput;\nlet saving = false;\nlet saved = false;\n$: if ($LedgerStore.saving) {\n    saving = true;\n}\nelse {\n    saving = false;\n}\nlet state = {\n    date: null,\n    dateStarter: dayjs().format(\"YYYY-MM-DDTHH:mm\"),\n    score: 0,\n    showCustomDate: false,\n    autocompleteResults: null,\n    cursorIndex: null,\n    partialTag: null,\n    advanced: false,\n    dateFormated: null,\n};\nfunction toggleAdvanced() {\n    state.advanced = !state.advanced;\n}\n$: if ($ActiveLogStore.end) {\n    let timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n    let dateFormat = $UserStore.meta.is24Hour ? \"MM/DD/YYYY\" : \"MMM D YYYY\";\n    state.dateFormated = dayjs($ActiveLogStore.end).format(`${dateFormat} ${timeFormat}`);\n}\nconst methods = {\n    dateAdd(count, unit) {\n        let newDate = dayjs($ActiveLogStore.end || new Date()).add(count, unit);\n        $ActiveLogStore.end = newDate.toDate().getTime();\n    },\n    clearDate() {\n        state.date = null;\n        $ActiveLogStore.start = null;\n        $ActiveLogStore.end = null;\n        state.showCustomDate = false;\n    },\n    clearLocation() {\n        $ActiveLogStore.lat = null;\n        $ActiveLogStore.lng = null;\n        $ActiveLogStore.location = null;\n    },\n    // toggleCustomDate() {\n    //   if (state.date) {\n    //     // They clicked it - solets clear it\n    //     state.date = null;\n    //   } else {\n    //     state.showCustomDate = true;\n    //   }\n    // },\n    toggleCustomLocation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if ($ActiveLogStore.lat) {\n                $ActiveLogStore.lat = null;\n                $ActiveLogStore.lng = null;\n            }\n            else {\n                let location = yield Interact.pickLocation();\n                if (location) {\n                    $ActiveLogStore.lat = location.lat;\n                    $ActiveLogStore.lng = location.lng;\n                    $ActiveLogStore.location = location.name;\n                }\n            }\n        });\n    },\n    checkTextareaSize() {\n        if (textarea) {\n            textarea.style.height = \"42px\";\n            let height = (textarea || {}).scrollHeight || 42;\n            if (textarea && $ActiveLogStore.note.length > 0) {\n                textarea.style.height = (height > 300 ? 300 : height) + \"px\";\n            }\n            else {\n                textarea.style.height = \"42px\";\n            }\n            // Cal\n            // methods.calculateScore();\n        }\n    },\n    /**\n     * Check for Auto Complete\n     */\n    autoCompleteSearch(searchTag, type = \"tracker\") {\n        // Search for Trackers\n        try {\n            if (type == \"tracker\") {\n                let tkrs = Object.keys($TrackerStore.trackers || {})\n                    .map((tag) => {\n                    return $TrackerStore.trackers[tag];\n                })\n                    .filter((trk) => {\n                    return trk.tag.search(searchTag.replace(\"#\", \"\")) > -1;\n                });\n                return tkrs.length ? tkrs : null;\n                // Search for People\n            }\n            else if (type === \"person\") {\n                try {\n                    let People = Object.keys($PeopleStore.People || []).filter((person) => person.toLowerCase().search(searchTag.replace(\"@\", \"\")) > -1);\n                    return People.length\n                        ? People.map((username) => {\n                            return { tag: username, emoji: \"👤\", type: \"person\" };\n                        })\n                        : null;\n                }\n                catch (e) {\n                    console.error(\"Error Caught\", e.message);\n                }\n                return null;\n                // Search for Context\n            }\n            else if (type === \"context\") {\n                let context = $ContextStore.filter((term) => {\n                    let text = searchTag.replace(\"+\", \"\").toLowerCase();\n                    term = term.toLowerCase();\n                    return term.search(text.toLowerCase()) > -1;\n                });\n                return context.length\n                    ? context.map((c) => {\n                        return { tag: c, emoji: \"💡\", type: \"context\" };\n                    })\n                    : null;\n            }\n        }\n        catch (e) { }\n    },\n    calculateScore() {\n        $ActiveLogStore.score = $ActiveLogStore.score || ScoreNote($ActiveLogStore.note, new Date().getTime());\n    },\n    logSave() {\n        return __awaiter(this, void 0, void 0, function* () {\n            saving = true;\n            methods.calculateScore();\n            try {\n                yield LedgerStore.saveLog($ActiveLogStore);\n                saving = false;\n            }\n            catch (e) {\n                console.error(\"Error in capture-log logSave\", e.message);\n                saving = false;\n            }\n            methods.clear();\n        });\n    },\n    autocompleteText(text) {\n        return __awaiter(this, void 0, void 0, function* () {\n            ActiveLogStore.update((s) => {\n                s.note = s.note.replace(state.partialTag, text + \" \");\n                return s;\n            });\n            yield tick(1);\n            document.getElementById(\"textarea-capture-note\").focus();\n            methods.autoCompleteDone();\n        });\n    },\n    autoCompleteDone() {\n        return __awaiter(this, void 0, void 0, function* () {\n            setTimeout(() => {\n                state.partialTag = null;\n                state.cursorIndex = null;\n                state.autocompleteResults = null;\n            }, 10);\n        });\n    },\n    /**\n     * On Key Press\n     * Process each of the events\n     * - look for modifier+enter to save\n     * - look for +,#,@ to give auto complete\n     */\n    keyPress(event) {\n        // If enter + shift\n        if (event.key === \"Enter\" && event.getModifierState(\"Shift\")) {\n            event.preventDefault();\n            // If enter + modify er\n        }\n        else if (event.key === \"Enter\" && (event.getModifierState(\"Control\") || event.getModifierState(\"Meta\"))) {\n            methods.logSave();\n            // All other keyboard events\n        }\n        else {\n            let value = event.target.value;\n            let last = value.charAt(value.length - 1);\n            // If space clear auto complete\n            if (last == \" \") {\n                methods.autoCompleteDone();\n            }\n            else if (value.length) {\n                let arr = value.split(\" \");\n                let tag = arr[arr.length - 1];\n                state.cursorIndex = arr.length - 1;\n                // If its a tag\n                if (tag.charAt(0) === \"#\" && tag.length > 1) {\n                    state.partialTag = tag;\n                    state.autocompleteResults = methods.autoCompleteSearch(tag, \"tracker\");\n                    // If its a person\n                }\n                else if (tag.charAt(0) === \"@\" && tag.length > 1) {\n                    state.partialTag = tag;\n                    state.autocompleteResults = methods.autoCompleteSearch(tag, \"person\");\n                    // If it's context\n                }\n                else if (tag.charAt(0) === \"+\" && tag.length > 1) {\n                    state.partialTag = tag;\n                    state.autocompleteResults = methods.autoCompleteSearch(tag, \"context\");\n                }\n                else {\n                    state.partialTag = null;\n                    state.autocompleteResults = null;\n                }\n            }\n            else {\n                state.partialTag = null;\n                state.autocompleteResults = null;\n            }\n        }\n        methods.checkTextareaSize();\n    },\n    clear() {\n        ActiveLogStore.clear();\n        methods.autoCompleteDone();\n        setTimeout(() => {\n            state.date = null;\n            state.autocompleteResults = null;\n            state.advanced = false;\n            state.cursorIndex = null;\n            state.dateStarter = dayjs().format(\"YYYY-MM-DDTHH:mm\");\n            if (textarea) {\n                textarea.style.height = \"40px\";\n            }\n        }, 120);\n    },\n};\n// Clear the settings when saved\nLedgerStore.hook(\"onLogSaved\", (res) => {\n    // methods.clear();\n    setTimeout(() => {\n        state.advanced = false;\n        methods.autoCompleteDone();\n    });\n});\n// When a tag is added by a button or other service\nActiveLogStore.hook(\"onAddTag\", (res) => {\n    // add space to the end.\n    setTimeout(() => {\n        if (textarea) {\n            textarea.value = textarea.value;\n        }\n        // adjust textarea size\n        methods.checkTextareaSize();\n    }, 10);\n});\n</script>\n\n<style lang=\"scss\">:global(#note-capture) {\n  background-color: var(--footer-background);\n  padding-bottom: 4px; }\n\n:global(.capture-log .tracker-list) {\n  margin-top: -10px !important; }\n\n.capture-log {\n  padding: 10px;\n  padding-bottom: 0;\n  position: relative;\n  z-index: 1; }\n\n.advanced {\n  position: relative;\n  z-index: 1200;\n  margin-top: 10px;\n  padding-top: 1px;\n  padding-bottom: 10px; }\n\n.save-progress {\n  position: absolute;\n  top: -4px;\n  left: 0;\n  height: 4px;\n  background-color: #38a83f;\n  opacity: 0;\n  width: 0px;\n  transition: all 700ms ease-out; }\n  .save-progress.saving {\n    background-color: #38a83f;\n    opacity: 1;\n    width: 100%; }\n  .save-progress.saved {\n    transition: none;\n    background-color: #38a83f;\n    opacity: 0;\n    width: 0%; }\n  .save-progress.clear {\n    transition: none;\n    width: 0; }\n\n.save-button {\n  padding: 0;\n  width: 30px;\n  height: 30px;\n  border-radius: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n  background-color: green;\n  flex-grow: 0;\n  flex-shrink: 0;\n  margin-bottom: 6px;\n  border: none;\n  font-size: 0.9rem;\n  color: #fff; }\n  .save-button svg {\n    fill: #fff;\n    height: 15px;\n    width: 15px; }\n\n.mask-textarea {\n  display: flex;\n  align-items: flex-end;\n  min-height: 40px;\n  max-height: 200px;\n  border-radius: 20px;\n  background-color: var(--color-solid-1);\n  overflow: hidden;\n  transition: all 0.2s ease-in-out;\n  border: solid 1px var(--color-faded-1); }\n  .mask-textarea .save-button {\n    display: none; }\n  .mask-textarea.populated {\n    background-color: rgba(56, 168, 63, 0.2);\n    box-sizing: border-box; }\n    .mask-textarea.populated .save-button {\n      display: inline-flex; }\n  .mask-textarea textarea {\n    border: none;\n    background-color: transparent;\n    width: 100%;\n    height: 40px;\n    padding: 8px 0;\n    color: var(--color-inverse-1);\n    margin: 0 16px;\n    margin-right: 0px;\n    font-size: 1rem; }\n    .mask-textarea textarea:focus, .mask-textarea textarea:active {\n      outline: none; }\n</style>\n\n<div class=\"capture-wrapper\" on:swipeup={methods.swipeUp} on:swipedown={methods.swipeDown}>\n\n  <!-- \n    AUTO COMPLETE RESULTS\n  -->\n\n  <div class=\"capture-log\">\n    <div class=\"save-progress {saved ? 'saved' : ''} {saving ? 'saving' : ''} {$LedgerStore.saving ? 'saving' : ''}\" />\n    <div class=\"container p-0\">\n\n      <!-- Auto Complet e-->\n      <AutoComplete\n        input={$ActiveLogStore.note}\n        scroller\n        on:select={(evt) => {\n          ActiveLogStore.updateNote(evt.detail.note);\n          textarea.focus();\n          textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n          tick(100).then(() => {\n            methods.checkTextareaSize();\n          });\n        }} />\n      <!-- Note Input -->\n      <div\n        class=\"mask-textarea {$ActiveLogStore.lat || $ActiveLogStore.note.trim().length > 0 || $ActiveLogStore.photo ? 'populated' : 'empty'}\">\n        <button class=\"btn more-button btn-icon {state.advanced ? 'active' : ''}\" on:click={toggleAdvanced}>\n          {#if state.advanced}\n            <NIcon name=\"more\" className=\"fill-white\" />\n          {:else}\n            <NIcon name=\"more\" className=\"fill-grey-5\" />\n          {/if}\n        </button>\n\n        <textarea\n          id=\"textarea-capture-note\"\n          style=\"overflow:hidden\"\n          disabled={saving || saved}\n          bind:value={$ActiveLogStore.note}\n          bind:this={textarea}\n          placeholder={Lang.t('general.whats-up')}\n          on:keydown={methods.keyPress}\n          on:paste={methods.keyPress} />\n\n        <PositivityMenu bind:score={$ActiveLogStore.score} closeBackgroundTap={true} />\n        {#if $LedgerStore.saving}\n          <button class=\"save-button\">\n            <NSpinner size={20} color=\"#FFFFFF\" />\n          </button>\n        {:else}\n          <button class=\"save-button\" on:click={methods.logSave}>\n            <NIcon name=\"arrowUp\" style=\"fill: #FFF;\" size=\"20\" />\n          </button>\n        {/if}\n      </div>\n    </div>\n  </div>\n  {#if state.advanced}\n    <div class=\"advanced\">\n      <div class=\"container\">\n        <!-- Score -->\n        <!-- <NItem truncate compact className=\"mr-2 solo text-sm p-0\">\n          <NPositivitySelector\n            size=\"xl\"\n            score={$ActiveLogStore.score}\n            on:change={(evt) => {\n              $ActiveLogStore.score = evt.detail;\n            }} />\n        </NItem> -->\n        <!-- Location -->\n        <NItem truncate clickable className=\"mr-2 solo text-sm\" on:click={methods.toggleCustomLocation}>\n          <div slot=\"left\" class=\"text-sm text-bold\">\n            <NIcon name=\"pin\" className=\"mr-2 fill-inverse-2\" size=\"16\" />\n          </div>\n          {#if !$ActiveLogStore.lat}\n            <Text size=\"sm\">{Lang.t('general.location', 'Location')}</Text>\n          {:else}\n            <Text size=\"sm\">\n              {$ActiveLogStore.location || `${math.round($ActiveLogStore.lat, 100)},${math.round($ActiveLogStore.lng, 100)}`}\n            </Text>\n          {/if}\n          <div slot=\"right\" class=\"n-row\">\n            {#if $ActiveLogStore.lat}\n              <button class=\"btn btn-clear btn-icon\" on:click|stopPropagation={methods.clearLocation}>\n                <NIcon name=\"close\" className=\"fill-inverse\" size=\"22\" />\n              </button>\n            {:else if $UserStore.alwaysLocate}\n              <Text size=\"sm\" faded className=\"pr-1\">Current</Text>\n            {:else}\n              <Text size=\"sm\" faded className=\"pr-1\">None</Text>\n            {/if}\n          </div>\n        </NItem>\n        <!-- Date / Time -->\n\n        <NItem solo className=\"p-0\" style=\"overflow:hidden\">\n          <DateTimeBar\n            date={$ActiveLogStore.end}\n            calendarClass=\"px-2 mb-1\"\n            on:change={(evt) => {\n              $ActiveLogStore.end = dayjs(evt.detail).toDate().getTime();\n            }}>\n            <div slot=\"left\">\n              <Button\n                size=\"xs\"\n                color=\"transparent\"\n                className=\"px-1\"\n                delay={0}\n                on:click={() => {\n                  methods.dateAdd(-1, 'day');\n                }}>\n                <Icon name=\"chevronLeft\" size=\"14\" />\n              </Button>\n              <Button\n                size=\"xs\"\n                color=\"transparent\"\n                className=\"px-1\"\n                delay={0}\n                on:click={() => {\n                  methods.dateAdd(1, 'day');\n                }}>\n                <Icon name=\"chevronRight\" size=\"14\" />\n              </Button>\n            </div>\n            <div slot=\"right\">\n              {#if $ActiveLogStore.end}\n                <button class=\"btn btn-icon mr-2\" on:click|stopPropagation={methods.clearDate}>\n                  <NIcon name=\"close\" className=\"fill-inverse\" size=\"22\" />\n                </button>\n              {/if}\n            </div>\n          </DateTimeBar>\n        </NItem>\n\n        <!-- <NItem compact truncate className=\"bg-transparent mt-1 mb-2 mr-2 solo text-sm\" on:click={methods.selectDate}>\n          \n          <div slot=\"left\" class=\"text-sm text-bold\">\n            <NIcon name=\"time\" className=\"mr-2 fill-primary-bright\" size=\"16\" />\n          </div>\n          <div>\n            {#if !$ActiveLogStore.end}\n              {Lang.t('general.set-date', 'Set Date')}\n            {:else}\n              <strong>{state.dateFormated}</strong>\n            {/if}\n          </div>\n          <div slot=\"right\" class=\"n-row\">\n            {#if $ActiveLogStore.end}\n              <button class=\"btn btn-clear btn-icon\" on:click|stopPropagation={methods.clearDate}>\n                <NIcon name=\"close\" className=\"fill-red\" size=\"22\" />\n              </button>\n            {:else}\n              <label class=\"text-sm text-faded-3\">Now</label>\n            {/if}\n          </div>\n        </NItem> -->\n      </div>\n    </div>\n  {/if}\n\n</div>\n",
    "<script>\n  export let className = \"\";\n  export let style = \"\";\n</script>\n\n<style>\n  .n-card {\n    background-color: var(--color-solid);\n    box-shadow: var(--box-shadow-tight);\n    border-radius: 6px;\n    margin: 8px;\n  }\n</style>\n\n<div class=\"n-card {className}\" {style}>\n  <slot />\n</div>\n",
    "<script type=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { createEventDispatcher, onMount } from \"svelte\";\nconst dispatch = createEventDispatcher();\nimport Chart from \"chart.js\";\nimport NIcon from \"../icon/icon.svelte\";\nimport Button from \"../button/button.svelte\";\nimport math from \"../../utils/math/math\";\nimport tick from \"../../utils/tick/tick\";\nimport nid from \"../../modules/nid/nid\";\nimport { UserStore } from \"../../store/user-store\";\nimport { Interact } from \"../../store/interact\";\nexport let labels = [];\nexport let height = 200;\nexport let title = \"\";\nexport let color = \"#4d84a1\";\nexport let points;\nexport let activeIndex = undefined;\nexport let xFormat = (x) => x;\nexport let yFormat = (y) => y;\nexport let hideYTicks = false;\nexport let hideXTicks = false;\nexport let type = \"bar\";\nexport let beginAtZero = true;\n// Generate a random ID for this Component\nconst chartId = `chart-${nid()}`;\nlet showChart = false;\nlet _canvas;\nlet theChart;\nlet lastPoints = [];\nexport let selected = undefined;\n$: if (points && theChart && points.map((p) => p.y).join() !== lastPoints) {\n    lastPoints = points.map((p) => p.y).join();\n    loadData();\n}\nfunction loadData() {\n    const lineStyle = {\n        backgroundColor: \"transparent\",\n        borderColor: color,\n    };\n    const barStyle = {\n        backgroundColor: color,\n    };\n    theChart.data.labels = labels || points.map((row) => row.x);\n    theChart.data.datasets = [\n        Object.assign(Object.assign({}, (type == \"line\" ? lineStyle : barStyle)), { data: points.map((row) => row.y), maxBarThickness: 34, minBarLength: 2 }),\n    ];\n    theChart.update();\n}\nfunction initChart() {\n    return __awaiter(this, void 0, void 0, function* () {\n        var ctx = document.getElementById(chartId);\n        const chartConfig = {\n            type,\n            options: {\n                animation: {\n                    duration: 0,\n                },\n                tooltips: {\n                    callbacks: {\n                        label: function (tooltipItem, data) {\n                            return yFormat ? yFormat(tooltipItem.value) : tooltipItem.value;\n                        },\n                    },\n                },\n                defaultColor: color,\n                responsive: true,\n                defaultFontSize: 10,\n                legend: {\n                    display: false,\n                },\n                maintainAspectRatio: false,\n                title: {\n                    display: title,\n                    text: title,\n                },\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                maxTicksLimit: 6,\n                                callback(value, index, values) {\n                                    if (yFormat) {\n                                        return yFormat(value);\n                                    }\n                                    else {\n                                        return value;\n                                    }\n                                },\n                                fontSize: 9,\n                                beginAtZero: beginAtZero,\n                                display: hideYTicks == false,\n                            },\n                        },\n                    ],\n                    xAxes: [\n                        {\n                            gridLines: {\n                                display: false,\n                            },\n                            ticks: {\n                                callback(value, index, values) {\n                                    if (xFormat) {\n                                        return xFormat(value);\n                                    }\n                                    else {\n                                        return value;\n                                    }\n                                },\n                                display: hideXTicks == false,\n                                fontSize: 9,\n                            },\n                        },\n                    ],\n                },\n            },\n        };\n        theChart = new Chart(ctx, chartConfig);\n        _canvas.addEventListener(\"click\", (evt) => {\n            let passed = theChart.getElementsAtEvent(evt);\n            if (passed.length) {\n                selected = points[passed[0]._index];\n            }\n            dispatch(\"tap\", selected);\n        });\n    });\n}\nonMount(() => {\n    initChart();\n    if (points) {\n        showChart = true;\n    }\n});\n</script>\n\n<style>\n  .wrapper {\n    position: relative;\n    width: 100%;\n  }\n  .wrapper .selected {\n    position: absolute;\n    right: 16px;\n  }\n</style>\n\n<div class={`wrapper active-${activeIndex}`}>\n  {#if selected && selected.unit == 'day'}\n    <div class=\"selected\">\n      <Button\n        size=\"xs\"\n        color=\"dark\"\n        on:click={() => {\n          Interact.onThisDay(selected.date.toDate());\n        }}>\n        {selected.x}\n        <NIcon name=\"chevronRight\" className=\"fill-white\" size=\"14\" />\n      </Button>\n\n    </div>\n  {/if}\n  <canvas id={chartId} bind:this={_canvas} width=\"100%\" {height} />\n</div>\n",
    "<script>\n  import { Interact } from \"../../store/interact\";\n  /**\n   * God Speed! We're going to make a chart\n   */\n\n  // Svelte\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  // Utils\n\n  import math from \"../../utils/math/math\";\n\n  // vendor\n  import * as ScaleLinear from \"d3-scale\";\n  import { UserStore } from \"../../store/user-store\";\n  import NIcon from \"../icon/icon.svelte\";\n\n  const scaleLinear = ScaleLinear.default.scaleLinear;\n\n  export let labels = [];\n  export let height = 200;\n  export let width = 500;\n  export let title = \"\";\n  export let color = \"#4d84a1\";\n  export let points;\n  export let activeIndex;\n  export let xFormat = (x) => x;\n  export let yFormat = (y) => y;\n  export let hideYTicks = false;\n\n  const xTicks = labels;\n  let yTicks = [0, 5, 10, 20];\n  const padding = { top: 30, right: 15, bottom: 25, left: 25 };\n\n  let finalPoints = [];\n\n  $: hourFormat = $UserStore.meta.is24Hour ? \"ddd HH\" : \"ddd ha\";\n\n  let lastPoints = null;\n  $: if (points) {\n    if (points.length) {\n      let values = points.map((point) => point.y);\n\n      let sum = math.sum(values);\n      let max = math.max(values);\n\n      if (sum) {\n        yTicks = [0, math.round(max * 0.5), max];\n      }\n      finalPoints = math.percentile(values).map((value, index) => {\n        let p = { ...points[index] };\n        p.y = value;\n        return p;\n      });\n    }\n  }\n\n  $: xScale = scaleLinear()\n    .domain([0, xTicks.length])\n    .range([padding.left, width - padding.right]);\n\n  $: yScale = scaleLinear()\n    .domain([0, Math.max.apply(null, yTicks)])\n    .range([height - padding.bottom, padding.top]);\n\n  $: innerWidth = width - (padding.left + padding.right);\n  $: barWidth = innerWidth / xTicks.length;\n\n  let lastActiveIndex;\n\n  $: if (activeIndex != lastActiveIndex) {\n    lastActiveIndex = activeIndex;\n  }\n\n  function showValue(value, index) {\n    return true;\n  }\n\n  function showLabel(label, index) {\n    if (labels.length > 12 && labels.length < 24) {\n      return index % 2;\n    } else if (labels.length >= 24) {\n      return index % 4 != 0 ? false : true;\n    } else {\n      return true;\n    }\n  }\n\n  const methods = {\n    onTap(event, data) {\n      dispatch(\"tap\", data);\n    },\n    formatMobile(tick, index) {\n      if (index % 2) {\n        return \"\";\n      } else {\n        return tick.substr(0, 2);\n      }\n    },\n    toTrustedValue(value, base) {\n      return isNaN(value) ? base : value;\n    },\n  };\n\n  onMount(() => {});\n</script>\n\n<style lang=\"scss\">h2 {\n  text-align: center; }\n\n.n-chart {\n  width: 100%;\n  max-width: 500px;\n  position: relative;\n  margin: 0 auto; }\n\nsvg {\n  position: relative;\n  width: 100%; }\n\n.tick {\n  font-size: 0.625em; }\n\n.tick line {\n  stroke: var(--color-solid-2);\n  stroke-dasharray: 2; }\n\n.tick text {\n  fill: var(--color-inverse-3);\n  text-anchor: start; }\n\n.tick.tick-0 line {\n  stroke-dasharray: 0; }\n\n.x-axis .tick text {\n  text-anchor: middle; }\n\n.title {\n  position: absolute;\n  top: -2px;\n  left: 20px;\n  font-size: 0.7rem;\n  color: var(--color-inverse); }\n\n.active-item {\n  position: absolute;\n  top: 2px;\n  right: 0px;\n  color: var(--color-inverse);\n  z-index: 120;\n  padding: 4px 10px;\n  font-size: 0.7rem;\n  display: flex; }\n  .active-item .value {\n    color: #fff;\n    text-shadow: 0px 2px 3px rgba(0, 0, 0, 0.4);\n    border-radius: 10px;\n    padding: 0 6px; }\n  .active-item label {\n    margin: 0;\n    margin-right: 6px; }\n\n.bars rect {\n  stroke: none;\n  opacity: 0.65;\n  transition: all 0.2s, width 0; }\n  .bars rect.active {\n    stroke: rgba(0, 0, 0, 0.2);\n    stroke-width: 4px;\n    opacity: 1; }\n</style>\n\n{#if points}\n  <div\n    class=\"n-chart\"\n    bind:clientWidth={width}\n    bind:clientHeight={height}\n    on:swiperight={() => {\n      dispatch('swipeRight');\n    }}\n    on:swipeleft={() => {\n      dispatch('swipeLeft');\n    }}>\n    {#if title}\n      <div\n        class=\"title clickable truncate\"\n        style=\"z-index:120;\"\n        on:click={() => {\n          dispatch('titleClick', title);\n        }}>\n        {title}\n        <NIcon name=\"chevronRight\" size=\"14\" />\n      </div>\n    {/if}\n    <svg height={`${height}px`}>\n      <!-- y axis -->\n      {#if hideYTicks !== true}\n        <g class=\"axis y-axis\" transform=\"translate(0,{padding.top})\">\n          {#each yTicks as tick, index}\n            {#if showValue(tick, index)}\n              <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick) - padding.bottom})\">\n                <line x2=\"100%\" />\n                <text y=\"-4\">{yFormat(tick)} {tick === 20 ? '' : ''}</text>\n              </g>\n            {/if}\n          {/each}\n        </g>\n      {/if}\n\n      <!-- x axis -->\n      <g class=\"axis x-axis\">\n        {#each points as point, i}\n          {#if showLabel(points, i)}\n            <g class=\"tick\" transform=\"translate({xScale(i)},{height})\">\n              <text x={barWidth / 2} y=\"-4\">{xFormat(point.x)}</text>\n            </g>\n          {/if}\n        {/each}\n      </g>\n\n      <g class=\"bars\">\n        {#each points as point, i}\n          <rect\n            on:click={(event) => {\n              methods.onTap(event, { index: i, point: point });\n            }}\n            rx=\"4\"\n            class=\"bar {activeIndex === i ? 'active' : ''}\"\n            ry=\"4\"\n            style=\"fill: {color}\"\n            x={xScale(i) + 2}\n            y={methods.toTrustedValue(yScale(point.y), 0)}\n            width={barWidth - 4}\n            height={methods.toTrustedValue(height - padding.bottom - yScale(point.y), 0)} />\n        {/each}\n      </g>\n    </svg>\n    {#if activeIndex !== undefined && points[activeIndex] !== undefined}\n      <div\n        class=\"active-item\"\n        on:click={() => {\n          Interact.onThisDay(points[activeIndex].date.toDate());\n        }}>\n        <label>\n          {#if points[activeIndex].unit == 'hour'}\n            {points[activeIndex].date.format(hourFormat)}\n          {:else if points[activeIndex].unit == 'day'}\n            {points[activeIndex].date.format('ddd MMM Do')}\n          {:else if points[activeIndex].unit == 'month'}{points[activeIndex].date.format('MMM YYYY')}{:else}{points[activeIndex].x}{/if}\n        </label>\n        <div class=\"value\" style=\"background-color:{color}\">{yFormat(points[activeIndex].y)}</div>\n      </div>\n    {/if}\n  </div>\n{/if}\n",
    "<script>\n  import NHScroller from \"../h-scroller/h-scroller.svelte\";\n  import { base } from \"../../modules/colors/colors\";\n\n  export let value = \"#20699d\";\n  export let grid = false;\n  export let colors = base;\n\n  $: selectedIndex = colors.indexOf(value) || 0;\n</script>\n\n<style lang=\"scss\">:global(.n-color-picker) {\n  overflow: scroll;\n  max-width: 100%;\n  width: 90vw;\n  min-width: 100%;\n  flex-grow: 1;\n  flex-shrink: 1;\n  display: flex;\n  background-color: var(--color-solid);\n  padding: 8px 10px 8px 0; }\n\n:global(.n-color-picker button.color-btn) {\n  width: 40px;\n  height: 40px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  border-radius: 20px;\n  border: solid 2px var(--color-solid);\n  box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.06);\n  transition: all 0.2s ease-in-out; }\n  :global(.n-color-picker button.color-btn).selected {\n    transform: scale(1.2);\n    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.2);\n    border: solid 1px var(--color-inverse); }\n</style>\n\n{#if grid}\n  <div class=\"n-grid n-color-picker\" activeIndex={selectedIndex}>\n    {#each colors as color, index}\n      <button\n        class=\"color-btn {color == value ? 'selected' : ''}\"\n        on:click={() => {\n          value = color;\n        }}\n        style=\"background-color:{color}\" />\n    {/each}\n  </div>\n{:else}\n  <NHScroller className=\"n-color-picker\" activeIndex={selectedIndex}>\n    {#each colors as color, index}\n      <button\n        class=\"color-btn {color == value ? 'selected' : ''}\"\n        on:click={() => {\n          value = color;\n        }}\n        style=\"background-color:{color}\" />\n    {/each}\n  </NHScroller>\n{/if}\n",
    "<script lang=\"ts\">export let value;\n</script>\n\n<style lang=\"scss\">button {\n  width: 24px;\n  height: 24px;\n  border: none;\n  padding: 0;\n  margin: 4px;\n  border-radius: 50%;\n  opacity: 0.3; }\n  button.active {\n    opacity: 1; }\n</style>\n\n<div class=\"tiny-color-picker n-row\">\n  <button\n    on:click={() => {\n      value = 'green';\n    }}\n    class=\"bg-green {value == 'green' ? 'active' : ''}\" />\n  <button\n    on:click={() => {\n      value = 'orange';\n    }}\n    class=\"bg-orange {value == 'orange' ? 'active' : ''}\" />\n  <button\n    on:click={() => {\n      value = 'red';\n    }}\n    class=\"bg-red {value == 'red' ? 'active' : ''}\" />\n  <button\n    on:click={() => {\n      value = 'blue';\n    }}\n    class=\"bg-blue {value == 'blue' ? 'active' : ''}\" />\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  export let started = undefined;\n  export let lg = undefined;\n  export let className = \"\";\n\n  onMount(() => {\n    if (started) {\n      methods.init();\n    }\n  });\n\n  $: value = \"00:00:00\";\n\n  const methods = {\n    init() {\n      setInterval(() => {\n        let ms = new Date().getTime() - started;\n        value = methods.secondsToTime(methods.msToSecond(ms));\n      }, 1000);\n      let ms = new Date().getTime() - started;\n      value = methods.secondsToTime(methods.msToSecond(ms));\n    },\n    normalizeTime(time) {\n      return (time + \"\").length === 1 ? time.padStart(2, \"0\") : time;\n    },\n    secondsToTime(secondsVar) {\n      let seconds = secondsVar.toFixed(0);\n      let minutes = Math.floor(parseInt(seconds) / 60).toString();\n      let hours = \"\";\n\n      if (parseInt(minutes) > 59) {\n        hours = this.normalizeTime(\n          Math.floor(parseInt(minutes) / 60).toString()\n        );\n        minutes = this.normalizeTime(\n          (parseInt(minutes) - parseInt(hours) * 60).toString()\n        );\n      }\n      seconds = this.normalizeTime(\n        Math.floor(parseInt(seconds) % 60).toString()\n      );\n\n      minutes = this.normalizeTime(minutes);\n\n      if (hours !== \"\") {\n        hours = parseInt(hours);\n        // if (hours > 24) {\n        //   let days = Math.floor(hours / 24);\n        //   hours = hours - days * 24;\n        //   return `${days}d ${hours}h ${minutes}m ${seconds}s`;\n        // }\n        return `${hours}:${minutes}:${seconds}`;\n      }\n      return `00:${minutes}:${seconds}`;\n    },\n\n    msToSecond(ms) {\n      return ms / 1000;\n    }\n  };\n</script>\n\n<style lang=\"scss\">.n-counter {\n  background-color: var(--color-red);\n  color: #fff;\n  font-size: 0.7rem;\n  font-weight: bold;\n  height: 20px;\n  line-height: 20px;\n  padding: 0 4px;\n  border-radius: 4px;\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-content: center; }\n  .n-counter.large {\n    font-size: 40px;\n    flex-grow: 1;\n    text-align: center;\n    justify-content: center;\n    align-content: center;\n    min-height: 50px;\n    height: 50px;\n    color: var(--color-inverse-2); }\n</style>\n\n<div class=\"n-counter {className} {lg ? 'large' : 'small'}\">{value}</div>\n",
    "<script>\n  // Svelte\n  import { createEventDispatcher } from \"svelte\";\n  import { onMount } from \"svelte\";\n\n  // Utils\n  import time from \"../../utils/time/time\";\n  import Logger from \"../../utils/log/log\";\n\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  // Vendors\n  import dayjs from \"dayjs\";\n\n  // Props\n  // export let started = undefined;\n  export let className = \"\";\n  export let value = 0;\n\n  // Consts\n  const dispatch = createEventDispatcher();\n  const console = new Logger(\"⏰ manual-time.svelte\");\n\n  // methods\n  const methods = {\n    // +ADD to unit\n    add(unit) {\n      switch (unit) {\n        case \"hours\":\n          value = value + 60 * 60;\n          break;\n        case \"minutes\":\n          value = value + 60;\n          break;\n        case \"seconds\":\n          value = value + 1;\n          break;\n      }\n      dispatch(\"change\", value);\n    },\n    // -SUBTRACT from Unit\n    subtract(unit) {\n      switch (unit) {\n        case \"hours\":\n          if (value > 60 * 60) {\n            value = value - 60 * 60;\n          }\n          break;\n        case \"minutes\":\n          if (value > 60) {\n            value = value - 60;\n          }\n          break;\n        case \"seconds\":\n          if (value > 1) {\n            value = value - 1;\n          }\n          break;\n      }\n      // Fire off change event\n      dispatch(\"change\", value);\n    },\n    // Get Unit Value - for select value\n    getUnitValue(unit) {\n      return data[unit] || \"00\";\n    },\n    // Set unit value by select box action\n    setUnitValue(event, unit) {\n      // Set to init\n      let selected = parseInt(event.target.value);\n      // Set temp time chunks\n      let dateChunks = {\n        hours: data.hours,\n        minutes: data.minutes,\n        seconds: data.seconds,\n      };\n      // Set new unit\n      dateChunks[unit] = time.padTime(selected);\n      // New Set of the value to Seconds\n      value = time.unitsToSeconds(dateChunks.hours, dateChunks.minutes, dateChunks.seconds);\n      // Fire off change\n      dispatch(\"change\", value);\n    },\n    // Takes 00:00:00 and converts it to seconds\n    timeStringToNode(str) {\n      let initialTime = time.secondsToTime(str).split(\":\");\n      let payload = {\n        hours: initialTime[0],\n        minutes: initialTime[1],\n        seconds: initialTime[2],\n      };\n      return payload;\n    },\n  };\n\n  // Data\n  let data = {\n    ...methods.timeStringToNode(value),\n    computed: {\n      totalSeconds: 0,\n    },\n    localValue: value,\n  };\n\n  // Watch for Value Change\n  $: if (value > -1) {\n    // Get the Chunks from Seconds\n    let dateChunks = methods.timeStringToNode(value);\n    // Set local data chunks to new value\n    data.hours = time.padTime(dateChunks.hours);\n    data.minutes = time.padTime(dateChunks.minutes);\n    data.seconds = time.padTime(dateChunks.seconds);\n  }\n\n  // On Mount\n</script>\n\n<style lang=\"scss\">:global(.n-counter-manual .unit svg) {\n  position: absolute;\n  top: 20px;\n  right: 2px;\n  height: 16px;\n  pointer-events: none; }\n\n.n-counter-manual {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1; }\n  .n-counter-manual span {\n    line-height: 40px;\n    font-size: 40px; }\n  .n-counter-manual .unit {\n    position: relative;\n    text-align: center;\n    background-color: var(--color-solid-1);\n    border-radius: 16px;\n    margin: 4pt;\n    width: 95px;\n    display: flex;\n    flex-direction: column; }\n    .n-counter-manual .unit select {\n      -webkit-appearance: none;\n      border: solid 1px rgba(0, 0, 0, 0.1);\n      height: 50px;\n      line-height: 50px;\n      font-size: 40px;\n      font-weight: bold;\n      padding-left: 10px;\n      min-width: 86px;\n      flex-grow: 1;\n      text-align: center;\n      margin: 2px;\n      border-radius: 4pt;\n      background-color: var(--color-solid); }\n      .n-counter-manual .unit select option {\n        text-align: center; }\n    .n-counter-manual .unit label {\n      font-size: 0.9rem;\n      color: var(--color-inverse-3);\n      margin-top: 10px; }\n</style>\n\n<div class=\"n-counter-manual {className}\">\n  <div class=\"unit hours\">\n    <select\n      value={methods.getUnitValue('hours')}\n      on:change={(event) => {\n        methods.setUnitValue(event, 'hours');\n      }}>\n      {#each time.getNumberedArray(300) as unit (unit)}\n        <option value={unit}>{unit}</option>\n      {/each}\n    </select>\n    <NIcon name=\"chevronDown\" className=\"fill-solid\" />\n    <label>Hour</label>\n  </div>\n  <!-- Minutes -->\n  <div class=\"unit hours\">\n\n    <select\n      value={methods.getUnitValue('minutes')}\n      on:change={(event) => {\n        methods.setUnitValue(event, 'minutes');\n      }}>\n      {#each time.getNumberedArray(59) as unit (unit)}\n        <option value={unit}>{unit}</option>\n      {/each}\n    </select>\n    <NIcon name=\"chevronDown\" className=\"fill-solid\" />\n    <label>Min</label>\n  </div>\n  <!-- SEconds -->\n  <div class=\"unit seconds\">\n\n    <select\n      value={methods.getUnitValue('seconds')}\n      on:change={(event) => {\n        methods.setUnitValue(event, 'seconds');\n      }}>\n      {#each time.getNumberedArray(59) as unit (unit)}\n        <option value={unit}>{unit}</option>\n      {/each}\n    </select>\n    <NIcon name=\"chevronDown\" className=\"fill-solid\" />\n    <label>Sec</label>\n  </div>\n</div>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport dayjs from \"dayjs\";\n;\nimport { onMount, createEventDispatcher } from \"svelte\";\nimport Calendar from \"../calendar/calendar.svelte\";\nimport Text from \"../text/text.svelte\";\nimport ListItem from \"../list-item/list-item.svelte\";\nimport TimeSelect from \"./time-select.svelte\";\nimport { Lang } from \"../../store/lang\";\nimport { UserStore } from \"../../store/user-store\";\nimport tick from \"../../utils/tick/tick\";\nimport Button from \"../button/button.svelte\";\nconst dispatch = createEventDispatcher();\nexport let date = new Date().getTime(); // prop\nexport let opened = false;\nexport let style = \"\";\nexport let calendarClass = \"\";\nexport let calendarPosition = \"bottom\";\nlet lastDate;\nlet _date; // local\nlet _opened = opened;\nlet hide = false;\n$: if (date !== lastDate) {\n    init();\n}\nfunction toggleOpen() {\n    return __awaiter(this, void 0, void 0, function* () {\n        _opened = !_opened;\n    });\n}\nfunction init() {\n    // Get provided date - default to today\n    date = date || new Date().getTime();\n    // SEt local date to maniuplate\n    _date = date instanceof Date ? dayjs(date) : dayjs(new Date(date));\n    // Set local opened\n    _opened = opened;\n    // Set last date to avoid uneeded reaction\n    lastDate = date;\n}\n/**\n * Set the Date\n * Sets month, day, year - leaving time alone\n */\nfunction setDate(d) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // _date = _date.set(\"month\", d.get(\"month\")).set(\"date\", d.get(\"date\")).set(\"year\", d.get(\"year\"));\n        _date = d;\n        _date = _date;\n        if (!opened && _opened) {\n            yield tick(300);\n            hide = true;\n            yield tick(200);\n            _opened = false;\n            hide = undefined;\n        }\n        dispatch(\"change\", _date);\n    });\n}\nonMount(init);\nconst hasLeftSlot = (arguments[1].$$slots || {}).hasOwnProperty(\"left\");\n</script>\n\n<style lang=\"scss\">:global(.alert-dialog-window .date-time-bar-wrapper) {\n  margin-left: -16px;\n  margin-right: -16px;\n  width: calc(100% + 32px) !important;\n  margin-top: 6px; }\n\n.date-time-bar-wrapper {\n  flex-grow: 1;\n  flex-shrink: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column; }\n  .date-time-bar-wrapper.calendar-top {\n    flex-direction: column-reverse; }\n\n.date-time-bar {\n  background-color: var(--color-solid);\n  display: grid;\n  flex-shrink: 1;\n  flex-grow: 1;\n  grid-template-columns: 1fr 0.7fr;\n  align-items: center;\n  width: 100%;\n  padding-left: 10px; }\n  .date-time-bar button {\n    height: 40px;\n    flex-grow: 1;\n    flex-shrink: 1;\n    border: none;\n    background-color: var(--color-solid);\n    color: var(--color-primary-bright);\n    margin: 0px;\n    font-size: 0.7rem; }\n  .date-time-bar button.date {\n    border-right: solid 1px var(--color-solid-2);\n    text-align: left;\n    padding-left: 10px; }\n\n.view.visible {\n  border-top: solid 1px var(--color-solid-2);\n  margin-bottom: 8px; }\n\n:global(.date-time-bar-wrapper .no-left-slot > .left) {\n  display: none; }\n</style>\n\n{#if _date}\n  <div class=\"date-time-bar-wrapper {calendarPosition == 'top' ? 'calendar-top' : 'calendar-bottom'}\">\n\n    <div class=\"date-time-bar\" {style}>\n      <div class=\"n-row\">\n        <slot name=\"left\" />\n        <Button\n          className=\"date justify-content-start flex-grow \"\n          color=\"clear\"\n          on:click={() => {\n            toggleOpen();\n          }}>\n          <Text size=\"sm\" className=\"text-align-left\" color={_opened ? 'primary-bright' : ''} truncate>\n            {$UserStore.meta.is24Hour ? _date.format('ddd D MMM YYYY') : _date.format('ddd MMM D YYYY')}\n          </Text>\n        </Button>\n      </div>\n\n      <TimeSelect\n        is24Hour={$UserStore.meta.is24Hour ? true : false}\n        bind:value={_date}\n        on:change={(evt) => {\n          setDate(evt.detail);\n        }} />\n    </div>\n    <div class=\"animate up view date \" class:visible={_opened && !hide} class:hidden={!_opened || hide}>\n      {#if _opened}\n        <Calendar\n          className={calendarClass}\n          on:dayClick={(evt) => {\n            let calDate = evt.detail.hour(_date.hour()).minute(_date.minute());\n            setDate(calDate);\n          }}\n          initialDate={_date} />\n      {/if}\n    </div>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import dayjs from \"dayjs\";\nimport { onMount, createEventDispatcher } from \"svelte\";\nimport { isTruthy } from \"../../utils/truthy/truthy\";\nimport tick from \"../../utils/tick/tick\";\nconst dispatch = createEventDispatcher();\nexport let value = dayjs();\nexport let className = \"\";\nexport let style = \"\";\nexport let is24Hour;\nlet lastValue; // Value to hold last reaction\nlet hour; // local hour\nlet minute; // local minute\nlet ampm; // local ampm\nlet lastAMPM;\nlet mounted = false;\nlet hour12;\n// 24 Hour Array\nlet hours24 = Array(24)\n    .fill(0)\n    .map((t, i) => {\n    return i;\n});\n// 12 Hour Array\nlet hours12 = Array(12)\n    .fill(0)\n    .map((t, i) => {\n    return i + 1;\n});\n// 60 minute Array\nlet minutes = Array(60)\n    .fill(0)\n    .map((t, i) => {\n    return i;\n});\n// Reactively Set Hours\n$: hours = is24Hour ? hours24 : hours12;\n$: if (value && value.format(\"hh:mm a\") !== dayjs(lastValue || \"2010-01-01T01:01:01\").format(\"hh:mm a\")) {\n    lastValue = value;\n    hour = parseInt(value.format(\"HH\"));\n    hour12 = ((hour + 11) % 12) + 1;\n    minute = parseInt(value.format(\"mm\"));\n    ampm = value.format(\"a\");\n    lastAMPM = ampm;\n}\nfunction onChange(evt) {\n    let ogDate = dayjs(value);\n    let ogDay = ogDate.get(\"day\");\n    let newHour = hour;\n    if (!is24Hour) {\n        if (newHour == 12 && ampm == \"am\") {\n            newHour = 0;\n        }\n        else if (ampm == \"am\" && newHour > 12) {\n            newHour = newHour - 12;\n        }\n        else if (ampm == \"pm\" && newHour < 12) {\n            newHour = newHour + 12;\n        }\n    }\n    const updatedDate = ogDate.set(\"hour\", newHour).set(\"minute\", minute).set(\"day\", ogDay);\n    dispatch(\"change\", updatedDate);\n}\n</script>\n\n<style>\n  .time-select {\n    padding: 2px 8px;\n    margin-right: 10px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-end;\n    flex-shrink: 1;\n    flex-grow: 1;\n    color: var(--color-inverse-2);\n    max-height: 30px;\n    font-size: 0.85rem;\n  }\n  select {\n    font-size: 0.85rem;\n    flex-shrink: 0;\n    flex-grow: 0;\n    color: var(--color-primary-bright);\n    text-align: center;\n    -webkit-appearance: none;\n  }\n</style>\n\n{#if value}\n  <div class=\"time-select-wrapper {className}\" {style}>\n    <div class=\"time-select\">\n      <!-- Loop over hours -->\n      {#if is24Hour}\n        <select bind:value={hour} class=\" hour\" on:change={onChange}>\n          {#each hours as h}\n            <option value={h} selected={h == hour} style=\"text-align:center;\">{`${h}`.length == 1 ? `0${h}` : h}</option>\n          {/each}\n        </select>\n      {:else}\n        <select bind:value={hour} class=\"hour\" on:change={onChange}>\n          {#each hours as h}\n            <option value={h} selected={h == hour12} style=\"text-align:center;\">{`${h}`.length == 1 ? `0${h}` : h}</option>\n          {/each}\n        </select>\n      {/if}\n      <span class=\"blinker\">:</span>\n      <!-- Loop over minutes -->\n      <select bind:value={minute} class=\"minutes\" on:change={onChange}>\n        {#each minutes as m}\n          <option value={m} selected={m == minute}>{`${m}`.length == 1 ? `0${m}` : m}</option>\n        {/each}\n      </select>\n      <!-- If is not 24 hour - show ampm -->\n      {#if !is24Hour}\n        <select bind:value={ampm} class=\"filler ampm\" on:change={onChange} style=\"margin-left:4px\">\n          <option value=\"am\" selected={ampm === 'am'}>AM</option>\n          <option value=\"pm\" selected={ampm === 'pm'}>PM</option>\n        </select>\n      {/if}\n    </div>\n  </div>\n{/if}\n",
    "<script>\n  import { onMount } from \"svelte\";\n  // vendors\n  import dayjs from \"dayjs\";\n  // Utils\n  import Logger from \"../../utils/log/log\";\n  import math from \"../../utils/math/math\";\n  import extractor from \"../../utils/extract/extract\";\n\n  import { UserStore } from \"../../store/user-store\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  //   // Props\n  export let rows = undefined;\n  export let color = undefined;\n  export let style = \"\";\n  export let className = \"\";\n  export let term = undefined;\n  // export let flex = true;\n\n  let _el;\n  let height = 200;\n\n  // Consts\n  const console = new Logger(\"⏰ Grid\");\n  const getEmptyDay = () => new Array(24).fill(0);\n  const emptyGrid = () => {\n    let grid = [[], [], [], [], [], [], []];\n    grid.forEach((day, index) => {\n      for (let i = 0; i < 24; i++) {\n        grid[index].push(0);\n      }\n    });\n\n    // // In case firstDayOfWeek is Monday, move the first row to the end.\n    // if ($UserStore.meta.firstDayOfWeek === '2') {\n    //   const sunday = grid.shift();\n    //   grid.push(sunday);\n    // }\n\n    return grid;\n  };\n\n  const hours = [];\n  const dateStart = dayjs().startOf(\"day\");\n  for (var i = 0; i < 24; i++) {\n    let date = dateStart.add(i, \"hour\");\n    hours.push(trimHour($UserStore.meta.is24Hour ? date.format(\"H\") : date.format(\"ha\")));\n  }\n\n  const getGridMax = () => {\n    let max = 0;\n    days.forEach((day, di) => {\n      day.forEach((hour, hi) => {\n        max = days[di][hi] > max ? days[di][hi] : max;\n      });\n    });\n    return max;\n  };\n\n  function trimHour(hour) {\n    if (hour.length == 4) {\n      return hour.substr(0, 3);\n    } else if (hour.length == 3) {\n      return hour.substr(0, 2);\n    } else {\n      return hour;\n    }\n  }\n\n  // Local Variables\n  let days = emptyGrid();\n  let maxValue = 0;\n\n  $: if (rows) {\n    let trackableElement = extractor.toElement(term);\n\n    days = emptyGrid();\n    rows.forEach((row) => {\n      let date = new Date(row.end);\n      let day = date.getDay();\n      let hour = date.getHours();\n      let value;\n      // If a tracker, use the value to highlight the date/time\n      // if it's not a tracker, it will just be a value of 1 so the overall\n      // useage of time will be displayed.\n      if (trackableElement.type == \"tracker\") {\n        let tracker = TrackerStore.byTag(trackableElement.id);\n        value = row.getTrackerValue(trackableElement.id, tracker.math);\n      } else {\n        value = 1;\n      }\n      days[day][hour] = days[day][hour] + value;\n    });\n    maxValue = getGridMax();\n    // Convert to percentage\n    days = days.map((day, di) => {\n      return day.map((hvalue, hindex) => {\n        return math.percentage(maxValue, hvalue);\n      });\n    });\n\n    // // In case firstDayOfWeek is Monday, move the first row to the end.\n    // if ($UserStore.meta.firstDayOfWeek === '2') {\n    //   const sunday = days.shift();\n    //   days.push(sunday);\n    // }\n  }\n\n  function main() {\n    height = _el.parentElement.clientHeight;\n  }\n\n  const methods = {\n    hourStyle(value) {\n      return {\n        opacity: value / 100,\n      };\n    },\n  };\n\n  onMount(() => {\n    main();\n  });\n</script>\n\n<style type=\"scss\">.time-grid {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  flex-grow: 1;\n  min-height: 100%;\n  flex-shrink: 1; }\n  .time-grid .hour-header {\n    padding-left: 25px;\n    padding-top: 4px;\n    padding-bottom: 2px;\n    display: flex;\n    flex-direction: row; }\n    .time-grid .hour-header .hour {\n      width: calc(100% / 24);\n      font-size: 0.4rem;\n      display: relative; }\n  .time-grid label {\n    margin: 0;\n    font-size: 9px;\n    text-align: right;\n    color: var(--color-inverse);\n    padding-right: 4px;\n    width: 36px;\n    font-weight: bold;\n    text-transform: uppercase; }\n  .time-grid .hour {\n    color: var(--color-inverse); }\n  .time-grid .day {\n    display: flex;\n    flex-direction: row;\n    height: calc(100% / 7);\n    align-items: center; }\n    .time-grid .day .hour {\n      width: calc(100% / 24);\n      text-align: center;\n      margin: 0px;\n      background-color: #20699d;\n      /* margin-right: 4px; */\n      /* margin-bottom: 2px; */\n      /* border-radius: 4px; */\n      height: 100%; }\n</style>\n\n<div class=\"time-grid {className}\" style=\"height:{height}px; {style}\" bind:this={_el}>\n\n  {#if $UserStore.meta.firstDayOfWeek === '2'}\n    <!-- firstDayOfWeek is Monday -->\n\n    <!-- Monday-Saturday -->\n    {#each days as day, index}\n      {#if index !== 0}\n        <div class=\"day\">\n          <label>{dayjs(new Date()).day(index).format('ddd').substr(0, 2)}</label>\n          {#each day as hour, hi}\n            <div class=\"hour hour-{hi}\" style=\"opacity: {days[index][hi] / 100 || 0}; background-color: {color}\" />\n          {/each}\n        </div>\n      {/if}\n    {/each}\n    <!-- /Monday-Saturday -->\n\n    <!-- Sunday -->\n    <div class=\"day\">\n      <label>{dayjs(new Date()).day(0).format('ddd').substr(0, 2)}</label>\n      {#each days[0] as hour, hi}\n        <div class=\"hour hour-{hi}\" style=\"opacity: {days[0][hi] / 100 || 0}; background-color: {color}\" />\n      {/each}\n    </div>\n    <!-- /Sunday -->\n  {:else}\n    <!-- firstDayOfWeek is Sunday -->\n    {#each days as day, index}\n      <div class=\"day\">\n        <label>{dayjs(new Date()).day(index).format('ddd').substr(0, 2)}</label>\n        {#each day as hour, hi}\n          <div class=\"hour hour-{hi}\" style=\"opacity: {days[index][hi] / 100 || 0}; background-color: {color}\" />\n        {/each}\n      </div>\n    {/each}\n  {/if}\n\n  <div class=\"hour-header\">\n    {#each hours as hour, index}\n      <div class=\"hour hour-{index} header\">{hour}</div>\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import Dymoji from \"./dymoji\";\n\n  export let username = undefined;\n  export let avatar = undefined;\n  export let person = undefined;\n  export let size = 42;\n  export let radius = 0.12;\n\n  export let className = \"\";\n\n  let svg = null;\n  let img = null;\n\n  const getSVG = term => {\n    return new Dymoji(term, {\n      size,\n      radius\n    }).svg();\n  };\n\n  $: if (username) {\n    svg = getSVG(username);\n  } else if (avatar) {\n    img = avatar;\n  } else if (person) {\n    if (person.avatar) {\n      img = person.avatar;\n    } else {\n      svg = getSVG(person.username);\n    }\n  } else {\n    svg = getSVG(\"unknown\");\n  }\n</script>\n\n<style lang=\"scss\">bc-dymoji {\n  display: flex; }\n\n.dymoji-wrap {\n  display: inline-flex;\n  vertical-align: middle;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  background-size: cover;\n  background-position: center; }\n</style>\n\n<div\n  class=\"dymoji-wrap {className}\"\n  style=\"width:{size}px; height:{size}px; border-radius:{size * radius}px; {img ? `background-image:url(${img})` : ``}\">\n  {#if svg}\n    {@html svg}\n  {/if}\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { Router, Route, navigate } from \"svelte-routing\";\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NSpinner from \"../spinner/spinner.svelte\";\n  import NItem from \"../list-item/list-item.svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  import NBackButton from \"../back-button/back-button.svelte\";\n  import NLayout from \"../../containers/layout/layout.svelte\";\n\n  // Utils and Modules\n  import Downloader from \"../../modules/download/download\";\n  import tick from \"../../utils/tick/tick\";\n\n  import Storage from \"../../modules/storage/storage\";\n\n  import { Interact } from \"../../store/interact\";\n  import { UserStore } from \"../../store/user-store\";\n  import Button from \"../button/button.svelte\";\n  import { Lang } from \"../../store/lang\";\n  import ToggleSwitch from \"../toggle-switch/toggle-switch.svelte\";\n  import Text from \"../text/text.svelte\";\n\n  const state = {\n    title: \"File Browser\",\n    path: [],\n    tree: {},\n    files: [],\n    animateForward: false,\n    animateBack: false,\n    file: null,\n    loading: true,\n    edit: false,\n  };\n\n  let fileContent;\n  let editor;\n\n  // Not working\n  export let path = undefined;\n  // Old fashion way is working\n\n  let lastPath = null;\n\n  $: if (path && path !== lastPath) {\n    init();\n  }\n\n  async function init() {\n    state.file = null;\n    state.edit = false;\n    lastPath = path;\n    if (path.substr(0, 1) == \"/\") {\n      path = path.replace(\"/\", \"\");\n    }\n    path = path.replace(/\\/\\//g, \"/\");\n    let ogPath = path.split(\"/\");\n    if (ogPath.length > 0) {\n      let fileName = ogPath[ogPath.length - 1];\n      if (isFile(fileName)) {\n        state.file = fileName;\n        state.path = ogPath;\n        readFile();\n      } else {\n        state.path = ogPath;\n\n        state.files = extractFiles();\n      }\n    }\n    state.title = ogPath.join(\"/\");\n    state.path = ogPath;\n  }\n  function cancelEdits() {\n    state.edit = false;\n  }\n  async function saveChanges() {\n    if (!editor) {\n      editor = document.getElementById(\"file-editor\");\n    }\n    let value;\n    if (editor) {\n      value = editor.value;\n      try {\n        let payload = JSON.parse(value);\n        editor.value = JSON.stringify(payload, null, 2);\n        await Storage.put(state.path.join(\"/\"), payload);\n        Interact.toast(\"File Saved\", {\n          buttonLabel: \"Reload\",\n          timeout: 2500,\n          click() {\n            window.location.href = window.location.href;\n          },\n        });\n      } catch (e) {\n        Interact.error(e.message);\n      }\n    }\n  }\n\n  async function back() {\n    history.back();\n    await tick(100);\n    init();\n    // if (state.path.length) {\n    //   state.path.pop();\n    //   await tick(10);\n    //   state.files = extractFiles();\n    // } else {\n    //   history.back();\n    // }\n  }\n\n  function extractFiles() {\n    if (state.path.length) {\n      let obj = { ...state.tree };\n      state.path.forEach((name) => {\n        if (obj.hasOwnProperty(name)) {\n          obj = obj[name];\n        }\n      });\n      return Object.keys(obj);\n    } else {\n      return Object.keys(state.tree);\n    }\n  }\n\n  /**\n   * From https://joelgriffith.net/array-reduce-is-pretty-neat/\n   */\n  function Treeify(files) {\n    var fileTree = {};\n\n    if (files instanceof Array === false) {\n      throw new Error(\"Expected an Array of file paths, but saw \" + files);\n    }\n\n    function mergePathsIntoFileTree(prevDir, currDir, i, filePath) {\n      if (i === filePath.length - 1) {\n        prevDir[currDir] = \"file\";\n      }\n\n      if (!prevDir.hasOwnProperty(currDir)) {\n        prevDir[currDir] = {};\n      }\n\n      return prevDir[currDir];\n    }\n\n    function parseFilePath(filePath) {\n      var fileLocation = filePath.split(\"/\");\n      if (fileLocation.length === 1) {\n        return (fileTree[fileLocation[0]] = \"file\");\n      }\n      fileLocation.reduce(mergePathsIntoFileTree, fileTree);\n    }\n    files.forEach(parseFilePath);\n    return fileTree;\n  }\n\n  onMount(async () => {\n    state.loading = true;\n    Storage.getEngine().onReady(async () => {\n      let files = await Storage.list();\n      state.tree = Treeify(files);\n      state.files = extractFiles();\n      state.loading = false;\n    });\n    await Storage.init();\n  });\n\n  async function deleteFile(file) {\n    let filepath = `${state.path.join(\"/\")}`;\n    let confirm = await Interact.confirm(\n      `Really delete ${file}?`,\n      `This can cause serious issues if you don't know what you're doing. File to delete: ${filepath}`,\n      \"Yes, Delete\"\n    );\n    if (confirm) {\n      await Storage.delete(filepath);\n      Interact.toast(\"Deleted\");\n      back();\n    }\n  }\n\n  async function readFile() {\n    let content = await Storage.get(state.path.join(\"/\"));\n    if (content) {\n      fileContent = JSON.stringify(content, null, 2);\n    }\n    return fileContent;\n  }\n\n  async function download(file) {\n    let filename = state.path[state.path.length - 1];\n    let content = await Storage.get(state.path.join(\"/\"));\n    Downloader.json(filename, content);\n  }\n\n  function isFile(name) {\n    const filesArray = [\"last-usage\", \"nomie-capture\"];\n    if (name.split(\".\").length > 1) {\n      return true;\n    } else if (filesArray.indexOf(name) > -1) {\n      return true;\n    } else if (state.path[state.path.length - 1] == \"books\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function onKeyPress(e) {\n    var keyCode = e.code;\n\n    if (e.keyCode === 9) {\n      // tab was pressed\n\n      // get caret position/selection\n      var val = this.value,\n        start = this.selectionStart,\n        end = this.selectionEnd;\n\n      // set textarea value to: text before caret + tab + text after caret\n      this.value = val.substring(0, start) + \"\\t\" + val.substring(end);\n\n      // put caret at right position again\n      this.selectionStart = this.selectionEnd = start + 1;\n\n      // prevent the focus lose\n      return false;\n    }\n  }\n\n  async function editFile() {\n    state.edit = true;\n    await tick(200);\n    editor = document.getElementById(\"file-editor\");\n    editor.addEventListener(\"onkeydown\", onKeyPress);\n  }\n\n  function getPath(file) {\n    let path;\n    if (state.path.length == 1) {\n      let root = state.path[0];\n      if (root.substr(0, 1) == \"/\") {\n        root = root.substr(1, root.length - 2);\n      }\n      path = `/files/${root}/${file}`;\n    } else {\n      path = `/files/${state.path.join(\"/\")}/${file}`;\n    }\n    return path.replace(\"//\", \"/\");\n  }\n</script>\n\n<style lang=\"scss\">.n-list.animate {\n  transition: all 0.2s ease-in-out;\n  transform: translateX(0);\n  opacity: 1; }\n  .n-list.animate.animate-forward {\n    transform: translateX(-100px);\n    opacity: 0; }\n  .n-list.animate.animate-back {\n    transform: translateX(100px);\n    opacity: 0; }\n\ntextarea#file-editor {\n  font-family: \"Courier New\", Courier, monospace;\n  min-height: calc(100% - 0px);\n  width: 100%;\n  border: none;\n  background-color: var(--color-solid);\n  color: var(--color-inverse);\n  padding: 16px;\n  background: url(/images/editor-background.png);\n  background-attachment: local;\n  background-repeat: no-repeat;\n  padding-left: 35px;\n  padding-top: 10px;\n  font-size: 11px;\n  line-height: 150%; }\n\n.code-view {\n  background-color: var(--color-solid-1);\n  color: var(--color-inverse-1); }\n\npre {\n  font-size: 12px;\n  padding: 10px; }\n</style>\n\n{#if !state.file}\n  <NLayout className=\"n-file-browser\">\n    <div class=\"n-toolbar-grid container\" slot=\"header\">\n      <div class=\"left\">\n        <button class=\"btn\" on:click={back}>\n          <NIcon name=\"arrowBack\" />\n        </button>\n      </div>\n      <div class=\"main\">\n        <h1 class=\"truncate\">{state.title}</h1>\n      </div>\n      <div class=\"right\" />\n    </div>\n    <div class=\"content n-panel vertical scroll-y\">\n      <div class=\"container\">\n        <div class=\"n-list mt-2 solo\">\n\n          {#if state.loading}\n            <div class=\"p-4 n-panel center-all\">\n              <NSpinner />\n            </div>\n          {/if}\n          {#each state.files as file}\n            {#if !isFile(file)}\n              <NItem\n                bottomLine\n                detail\n                on:click={() => {\n                  navigate(getPath(file));\n                }}>\n                {file}\n                <div slot=\"left\">\n                  <span class=\"text-md\">🗂</span>\n                </div>\n              </NItem>\n            {:else}\n              <NItem\n                bottomLine\n                detail\n                on:click={() => {\n                  navigate(getPath(file));\n                }}>\n                {file}\n                <div slot=\"left\">\n                  <span class=\"text-md\">📝</span>\n                </div>\n              </NItem>\n            {/if}\n          {/each}\n        </div>\n        <NItem className=\"bg-transparent mt-2\" title={Lang.t('settings.allow-file-editing', 'Allow file editing')}>\n          <Text size=\"sm\" faded>\n            Edit data files.\n            <span class=\"text-red\">Use with caution.</span>\n          </Text>\n          <div slot=\"right\">\n            <ToggleSwitch bind:value={$UserStore.meta.canEditFiles} on:change={UserStore.saveMeta} />\n          </div>\n        </NItem>\n      </div>\n    </div>\n  </NLayout>\n{:else}\n  <NLayout className=\"n-file-browser\" showTabs={false}>\n    <div class=\"n-toolbar-grid container\" slot=\"header\">\n      <div class=\"left\">\n        <button class=\"btn\" on:click={back}>\n          <NIcon name=\"arrowBack\" />\n        </button>\n      </div>\n      <div class=\"main\">\n        <h1 class=\"truncate\">{state.file}</h1>\n      </div>\n      <div class=\"right toolbar-buttons\">\n        <button\n          class=\"btn btn-clear\"\n          on:click={() => {\n            download(state.file);\n          }}>\n          <NIcon name=\"download\" className=\"fill-primary-bright\" />\n        </button>\n        <button\n          class=\"btn btn-clear\"\n          on:click={() => {\n            deleteFile(state.file);\n          }}>\n          <NIcon name=\"delete\" className=\"fill-red\" />\n        </button>\n      </div>\n    </div>\n    <div class=\"content code-view h-100\">\n      <div class=\"container h-100\">\n        {#if fileContent}\n          {#if !state.edit}\n            <pre>{fileContent}</pre>\n          {:else}\n            <textarea id=\"file-editor\" autocapitalize=\"off\" autocorrect=\"off\">{fileContent}</textarea>\n          {/if}\n        {:else}\n          <div class=\"n-panel center-all\">\n            <NSpinner />\n          </div>\n        {/if}\n        <!-- {#await readFile()}\n          <div class=\"n-panel center-all\">\n            <NSpinner />\n          </div>\n        {:then content}\n          {#if !state.edit}\n            <pre>{content}</pre>\n          {:else}\n            <textarea id=\"editor\">{content}</textarea>\n          {/if}\n        {:catch error}\n          <div class=\"text-red\">{error.message}</div>\n        {/await} -->\n      </div>\n    </div>\n    <div slot=\"footer\">\n      {#if $UserStore.meta.canEditFiles}\n        <div class=\"container n-row px-2 pt-1 pb-2\">\n          {#if state.edit}\n            <Button size=\"md\" color=\"clear\" block on:click={cancelEdits}>Cancel</Button>\n            <Button size=\"md\" color=\"primary\" block on:click={saveChanges}>Save Changes</Button>\n          {:else}\n            <Button size=\"md\" color=\"clear\" block on:click={editFile}>Edit</Button>\n          {/if}\n        </div>\n      {/if}\n    </div>\n  </NLayout>\n{/if}\n",
    "<script>\n  // svelte\n  import { onMount } from \"svelte\";\n\n  export let activeIndex = undefined;\n  export let activeClass = \"active\";\n  export let className = null;\n\n  // Locals\n  let wrapper;\n  let scroller;\n  let ready = false;\n\n  $: if (activeIndex && ready) {\n    methods.selectIndex(activeIndex);\n  }\n\n  // Methods\n  const methods = {\n    init() {\n      // looop over children - apply a click event\n      if (wrapper && wrapper.children) {\n        for (let i = 0; i < wrapper.children.length; i++) {\n          let child = wrapper.children[i];\n          child.addEventListener(\"click\", (event) => {\n            let selectedIndex = Array.prototype.indexOf.call(wrapper.children, event.target);\n            methods.selectIndex(selectedIndex);\n          });\n        }\n\n        scroller.addEventListener(\n          \"scroll\",\n          (evt) => {\n            scroller.setAttribute(\"data-scroll\", evt.target.scrollLeft);\n          },\n          { passive: true }\n        );\n\n        ready = true;\n      }\n    },\n    // Clear currently selected index\n    clearSelected() {\n      if (activeIndex > -1 && wrapper.children[activeIndex]) {\n        wrapper.children[activeIndex].classList.remove(activeClass);\n      }\n    },\n    // Select new item\n    selectIndex(index) {\n      methods.clearSelected();\n      activeIndex = index;\n      try {\n        let child = wrapper.children[activeIndex];\n        let parentOffset = wrapper.offsetLeft;\n        let childEnd = child.offsetLeft - parentOffset;\n        let scrollTo = childEnd - child.offsetWidth * 0.5;\n        let scrolledAmount = scroller.scrollLeft;\n\n        if (childEnd > scroller.offsetWidth * 0.5) {\n          scroller.scrollTo(scrollTo, 0);\n        } else if (scrolledAmount > childEnd) {\n          scroller.scrollTo(scrollTo, 0);\n        }\n\n        child.classList.add(activeClass);\n      } catch (e) {}\n      ready = true;\n    },\n  };\n  // when component mounts\n  onMount(() => {\n    setTimeout(() => {\n      methods.init();\n    }, 10);\n  });\n</script>\n\n<style lang=\"scss\">::-webkit-scrollbar {\n  width: 0px;\n  background: transparent;\n  display: none; }\n\n.n-hscroller {\n  white-space: nowrap;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  scroll-behavior: smooth;\n  min-height: 40px;\n  max-width: 100%; }\n\n.n-hscroller .wrapper {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: none;\n  align-items: center;\n  min-width: 100%; }\n</style>\n\n<div class=\"n-hscroller {className}\" data-scroll=\"0\" bind:this={scroller}>\n  <div class=\"wrapper\" bind:this={wrapper}>\n    <slot />\n    <div class=\"filler\" />\n    <slot name=\"right\" />\n  </div>\n</div>\n",
    "<script lang=\"ts\">import RadioButtonChecked24 from \"carbon-icons-svelte/lib/RadioButtonChecked24\";\nimport Shuffle24 from \"carbon-icons-svelte/lib/Shuffle24\";\nimport RadioButton24 from \"carbon-icons-svelte/lib/RadioButton24\";\nimport { ArrowCircleUp, ArrowLeft, ArrowUp, ArrowsExpand, Calendar, ChartBar, Check, CheckCircle, ChevronDown, ChevronLeft, ChevronRight, ChevronUp, ClipboardCopy, Clock, Cog, DotsHorizontal, Download, FolderAdd, Link, LocationMarker, Menu, MinusCircle, PaperAirplane, Pencil, Plus, PlusCircle, PresentationChartLine, Refresh, Search, Share, SortAscending, Star, SwitchHorizontal, Trash, User, UserAdd, UserGroup, ViewBoards, ViewGrid, X, XCircle, DotsVertical, ChartPie, } from \"svelte-hero-icons\";\nexport let name = \"add\";\nexport let style = undefined;\nexport let className = \"\";\nexport let title = \"\";\nexport let size = \"\";\nconst icons = {\n    add: Plus,\n    addOutline: PlusCircle,\n    arrowBack: ArrowLeft,\n    arrowUp: ArrowUp,\n    arrowsLeftRight: SwitchHorizontal,\n    calendar: Calendar,\n    chart: ChartBar,\n    checkmark: Check,\n    checkmarkFilled: CheckCircle,\n    checkmarkOutline: CheckCircle,\n    chevronDown: ChevronDown,\n    chevronLeft: ChevronLeft,\n    chevronRight: ChevronRight,\n    chevronUp: ChevronUp,\n    close: X,\n    closeFilled: XCircle,\n    closeOutline: XCircle,\n    copy: ClipboardCopy,\n    dashboard: ViewBoards,\n    delete: Trash,\n    download: Download,\n    edit: Pencil,\n    pieChart: ChartPie,\n    grid: ViewGrid,\n    link: Link,\n    menu: Menu,\n    more: DotsHorizontal,\n    moreVertical: DotsVertical,\n    newTab: FolderAdd,\n    People: UserGroup,\n    pin: LocationMarker,\n    radio: RadioButton24,\n    radioFilled: RadioButtonChecked24,\n    refresh: Refresh,\n    remove: MinusCircle,\n    report: PresentationChartLine,\n    search: Search,\n    sendFilled: ArrowCircleUp,\n    airplane: PaperAirplane,\n    settings: Cog,\n    share: Share,\n    shuffle: Shuffle24,\n    sort: SortAscending,\n    star: Star,\n    time: Clock,\n    tracker: ViewGrid,\n    userAdd: UserAdd,\n    user: User,\n};\n</script>\n\n<style>\n  .n-icon {\n    display: inline-flex;\n  }\n</style>\n\n{#if icons[name]}\n  <span class=\"n-icon n-icon-{name} {className}\" {style} aria-label={title}>\n    <svelte:component this={icons[name]} size={`${size || 24}`} />\n  </span>\n{/if}\n",
    "<script>\n  import NIcon from \"../icon/icon.svelte\";\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let label = null;\n  export let placeholder = null;\n  export let inputmode = undefined;\n  export let value = null;\n  export let type = \"text\";\n  export let help = null;\n  export let className = \"\";\n  export let style = \"\";\n  export let inputStyle = \"\";\n  export let inputClass = \"\";\n  export let pattern = \"\";\n  export let width = \"\";\n  export let disabled = false;\n  export let solo = false;\n  export let compact = false;\n  export let rows = 2;\n  export let accept = \"png,jpeg,jpg,csv\";\n  export let name = false;\n\n  export let autocomplete = undefined;\n  export let autocorrect = undefined;\n  export let autocapitalize = undefined;\n\n  let focused = false;\n  let hit = false;\n  let hasInput = false;\n\n  let _elInput;\n\n  export function doFocus() {\n    _elInput.focus();\n  }\n\n  export function getValue() {\n    return _elInput.value;\n  }\n\n  let blur = () => {\n    focused = false;\n  };\n  let focus = (event) => {\n    focused = true;\n    dispatch(\"focus\", event);\n  };\n  let change = (evt) => {\n    if (evt.key == \"Enter\") {\n      dispatch(\"enter\", value);\n    }\n    dispatch(\"change\", value);\n  };\n\n  $: if (value !== null && (value || \"\").length > 0) {\n    hasInput = true;\n  } else {\n    hasInput = false;\n  }\n\n  onMount(() => {\n    if (type == \"select\") {\n      hasInput = true;\n    }\n  });\n</script>\n\n<style lang=\"scss\">.n-input-container {\n  position: relative;\n  width: auto;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 1;\n  margin-bottom: 4pt;\n  margin-top: 4pt;\n  background-color: var(--color-solid);\n  border-radius: 6px;\n  border: solid 1px var(--color-faded-1); }\n  .n-input-container .helper {\n    font-size: 0.65rem;\n    opacity: 0.5;\n    padding: 6px; }\n  .n-input-container .select-arrow {\n    margin-left: -50px; }\n  .n-input-container.with-label .n-input-wrapper input,\n  .n-input-container.with-label .n-input-wrapper select {\n    min-height: 53px; }\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input label {\n    transition: all 0.2s ease-in-out;\n    opacity: 0.4;\n    transform: translateY(0); }\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input input,\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input select {\n    padding-top: 14px;\n    padding-bottom: 0px;\n    font-size: 1.05rem; }\n  .n-input-container.with-label .n-input-wrapper.has-input .n-input textarea {\n    padding-top: 22px;\n    padding-bottom: 0px;\n    font-size: 1.05rem; }\n  .n-input-container.solo .n-input-wrapper {\n    height: 54px; }\n    .n-input-container.solo .n-input-wrapper .n-input {\n      height: 54px; }\n      .n-input-container.solo .n-input-wrapper .n-input input,\n      .n-input-container.solo .n-input-wrapper .n-input select,\n      .n-input-container.solo .n-input-wrapper .n-input textarea {\n        height: 53px; }\n  .n-input-container.compact .has-input label {\n    transform: translateY(-6px) !important;\n    font-size: 0.7rem; }\n  .n-input-container.compact .n-input-wrapper {\n    min-height: 40px;\n    height: 40px; }\n    .n-input-container.compact .n-input-wrapper .n-input {\n      height: 40px; }\n      .n-input-container.compact .n-input-wrapper .n-input input,\n      .n-input-container.compact .n-input-wrapper .n-input select,\n      .n-input-container.compact .n-input-wrapper .n-input textarea {\n        min-height: 40px;\n        height: 40px;\n        font-size: 0.8rem !important;\n        background-color: var(--color-solid) !important; }\n  .n-input-container .n-input-wrapper {\n    transition: all 0.2s ease-in-out;\n    min-height: 54px;\n    display: flex;\n    width: 100%;\n    min-width: 50px;\n    max-width: 100%;\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-shrink: 1;\n    transition: all 0.2s ease-in-out;\n    border-radius: 12px; }\n    .n-input-container .n-input-wrapper:before {\n      transition: all 0.2s ease-in-out;\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      opacity: 0;\n      pointer-events: none; }\n    .n-input-container .n-input-wrapper.has-focus:before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      box-shadow: 0px 0px 1px 2px var(--color-primary);\n      opacity: 0.3;\n      border-radius: 6px; }\n    .n-input-container .n-input-wrapper textarea {\n      border: none; }\n    .n-input-container .n-input-wrapper .n-input {\n      transition: all 0.2s ease-in-out;\n      display: flex;\n      flex-direction: column;\n      flex-grow: 1;\n      flex-shrink: 1;\n      color: var(--color-inverse); }\n      .n-input-container .n-input-wrapper .n-input label {\n        transition: all 0.2s ease-in-out;\n        opacity: 0;\n        transform: translateY(20px);\n        pointer-events: none;\n        font-size: 0.7rem;\n        position: absolute;\n        top: 8px;\n        left: 10px;\n        margin: 0;\n        padding: 0; }\n      .n-input-container .n-input-wrapper .n-input input,\n      .n-input-container .n-input-wrapper .n-input select,\n      .n-input-container .n-input-wrapper .n-input textarea {\n        width: 100%;\n        transition: all 0.2s ease-in-out;\n        margin: 0;\n        padding-left: 8px;\n        padding-right: 8px;\n        background-color: transparent !important;\n        outline: none; }\n        .n-input-container .n-input-wrapper .n-input input:disabled,\n        .n-input-container .n-input-wrapper .n-input select:disabled,\n        .n-input-container .n-input-wrapper .n-input textarea:disabled {\n          background-color: transparent !important;\n          opacity: 0.7; }\n      .n-input-container .n-input-wrapper .n-input textarea {\n        min-height: 90px;\n        padding-top: 8px;\n        color: var(--color-inverse); }\n</style>\n\n<div\n  class=\"n-input-container {className}\n  {compact ? 'compact' : ''}\n  {solo ? 'solo' : 'with-label'}\"\n  style=\"{width ? `max-width:${width}; width:${width}; ` : ``}\n  {style}\">\n  <div class=\"n-input-wrapper {hasInput ? 'has-input' : 'no-input'} {focused ? 'has-focus' : 'no-focus'}\">\n    <slot name=\"left\" />\n    <div class=\"n-input\">\n      <label>{label || placeholder}</label>\n      {#if type == 'email'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          {name}\n          type=\"email\"\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:input={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'file'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          {name}\n          type=\"file\"\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          {accept}\n          bind:value\n          {placeholder}\n          on:change={(evt) => {\n            dispatch('change', evt);\n          }}\n          on:input={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'password'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          type=\"password\"\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:input={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'number'}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          {inputmode}\n          type=\"number\"\n          style={inputStyle}\n          class={inputClass}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:input={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {:else if type == 'select'}\n        <select bind:this={_elInput} {disabled} on:change={change} bind:value>\n          <slot />\n        </select>\n      {:else if type == 'textarea'}\n        <textarea\n          bind:this={_elInput}\n          {disabled}\n          {rows}\n          style={inputStyle}\n          class={inputClass}\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:input={change}\n          on:focus={focus}\n          on:blur={blur}\n          bind:value />\n        <slot />\n      {:else}\n        <input\n          bind:this={_elInput}\n          {disabled}\n          type=\"text\"\n          {inputmode}\n          style={inputStyle}\n          class={inputClass}\n          {pattern}\n          bind:value\n          {autocomplete}\n          {autocorrect}\n          {autocapitalize}\n          {placeholder}\n          on:input={change}\n          on:focus={focus}\n          on:blur={blur} />\n      {/if}\n    </div>\n    <slot name=\"right\">\n      {#if type == 'select'}\n        <button class=\"btn btn-clear select-arrow\">\n          <NIcon name=\"chevronDown\" />\n        </button>\n      {/if}\n    </slot>\n\n  </div>\n  {#if help}\n    <div class=\"helper\">{help}</div>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher, onMount } from \"svelte\";\nimport NLog from \"../../modules/nomie-log/nomie-log\";\nimport Tracker from \"../../modules/tracker/tracker\";\nimport NItem from \"../list-item/list-item.svelte\";\nimport NBall from \"../tracker-ball/ball.svelte\";\nimport Dymoji from \"../dymoji/dymoji.svelte\";\nimport LocationBadge from \"../location-badge/location-badge.svelte\";\nimport NIcon from \"../icon/icon.svelte\";\nimport NPoints from \"../points/points.svelte\";\nimport NText from \"../text/text.svelte\";\nimport NNoteTextualizer from \"../note-textualizer/note-textualizer.svelte\";\nimport NTrackerSmallBlock from \"../tracker-ball/tracker-small-block.svelte\";\nimport NomieUOM from \"../../utils/nomie-uom/nomie-uom\";\nimport time from \"../../utils/time/time\";\nimport { TrackerStore } from \"../../store/tracker-store\";\nimport { UserStore } from \"../../store/user-store\";\nimport { Interact } from \"../../store/interact\";\nimport { PeopleStore } from \"../../store/People-store\";\nimport dayjs from \"dayjs\";\nimport Text from \"../text/text.svelte\";\nimport TrackableElement from \"../../modules/trackable-element/trackable-element\";\nimport { getEmojiFromScore } from \"../../utils/positivity/positivity\";\nimport Button from \"../button/button.svelte\";\n// props\nexport let log = undefined;\n// export let trackers = {};\nexport let className = \"\";\nexport let focus = false;\nexport let fullDate = false;\nexport let hideMore = undefined;\nexport let moreOveride = false;\nexport let hideDelete = false;\n// consts\nconst dispatch = createEventDispatcher();\nlet displayLog;\nlet logMeta;\nlet trackers = $TrackerStore.trackers;\nlet state = {\n    showPhoto: false,\n};\n$: if (log && log !== displayLog) {\n    displayLog = new NLog(log);\n    logMeta = displayLog.getMeta();\n    logMeta.trackers = logMeta.trackers.map((trackerElement) => {\n        trackerElement.obj = TrackerStore.getByTag(trackerElement.id);\n        return trackerElement;\n    });\n}\nlet dtFormat;\n$: if ($UserStore.meta.is24Hour) {\n    dtFormat = {\n        date: \"ddd Do MMM YYYY\",\n        time: \"H:mm\",\n    };\n}\nelse {\n    dtFormat = {\n        date: \"ddd MMM Do YYYY\",\n        time: \"h:mma\",\n    };\n}\nfunction shouldShowValue(trackerElement) {\n    if (trackerElement.obj.type == \"picker\") {\n        return false;\n    }\n    else if (trackerElement.obj.type == \"tick\") {\n        return trackerElement.value !== 1;\n    }\n    else {\n        return true;\n    }\n}\n</script>\n\n<style lang=\"scss\">.divider {\n  font-size: 0.9rem;\n  font-weight: 500; }\n\n.n-row.context {\n  justify-content: flex-start;\n  flex-wrap: wrap; }\n\n.more-button {\n  margin-right: -8pt; }\n</style>\n\n<!--glow glow-{time.dateToDesc(displayLog.end)}-->\n{#if displayLog}\n  <NItem className=\"{className} n-item-log\">\n    <!-- Show the Trackers within this Log Item -->\n    <div class=\"n-row time-row\">\n      <div class=\"time truncate\">\n        <div class=\"filler n-row justify-content-start\">\n          {#if displayLog.lat}\n            <LocationBadge\n              location={displayLog}\n              on:click={(event) => {\n                Interact.showLocations([displayLog]);\n                event.stopPropagation();\n              }} />\n          {/if}\n          <Text inline size=\"sm\" className=\"\" faded>{time.fromNow(logMeta.endDate)}</Text>\n        </div>\n        <Text size=\"sm\" medium className=\"filler\">\n          {logMeta.endDate.format(`${dtFormat.time}`)}\n          {#if fullDate}\n            <Text inline size=\"sm\" faded>{logMeta.endDate.format(`${dtFormat.date}`)}</Text>\n          {/if}\n        </Text>\n      </div>\n      <div class=\"filler\" />\n      <!-- If they have location-->\n\n      <!-- SCORE display -->\n      {#if displayLog.score}\n        <div class=\"score-mark {displayLog.score > 0 ? 'positive' : 'negative'}\">{getEmojiFromScore(displayLog.score, true)}</div>\n      {/if}\n\n      {#if hideMore !== true}\n        <Button\n          shape=\"circle\"\n          color=\"transparent\"\n          on:click={(event) => {\n            if (moreOveride) {\n              dispatch('more', displayLog);\n            } else {\n              Interact.logOptions(displayLog, { hideDelete });\n            }\n          }}\n          className=\"ml-2\"\n          style=\"margin-right:-10px;\">\n          <NIcon name=\"more\" className=\"fill-primary-bright\" size=\"32\" />\n        </Button>\n      {/if}\n\n    </div>\n    <!-- Process the Note Content wi th the Textualizer \n    This really isn't special right now -->\n    {#if displayLog.note.length}\n      <NNoteTextualizer\n        on:textClick={(evt) => {\n          dispatch('textClick', evt.detail);\n        }}\n        bind:note={displayLog.note}\n        {trackers}\n        className={logMeta.trackers.length ? '' : 'pb-2'} />\n    {/if}\n\n    {#if logMeta.trackers.length || logMeta.People.length}\n      <div class=\"tracker-grid n-row\">\n        {#each displayLog.People as person}\n          <NTrackerSmallBlock\n            truncate={true}\n            element={person}\n            on:click={() => {\n              Interact.openStats(`@${person.id}`);\n              dispatch('personClick', { person: person, log });\n            }}>\n            <span slot=\"emoji\" class=\"emoji\">\n              {#if $PeopleStore.People[person.id]}\n                <NBall size={40} radius={0.3} avatar={$PeopleStore.People[person.id].avatar} username={person.id} className=\"ml-2\" />\n              {:else}\n                <NBall size={40} username={person.id} className=\"ml-2\" radius={0.3} />\n              {/if}\n            </span>\n          </NTrackerSmallBlock>\n        {/each}\n        {#each logMeta.trackers.filter((trk) => {\n          if (focus) {\n            return trk.id == focus;\n          } else {\n            return true;\n          }\n        }) as trackerElement}\n          <NTrackerSmallBlock\n            truncate\n            element={trackerElement}\n            on:click={() => {\n              Interact.openStats(`#${trackerElement.id}`);\n              dispatch('trackerClick', { tracker: trackerElement.obj, log });\n            }} />\n        {/each}\n      </div>\n    {/if}\n    {#if logMeta.context.length}\n      <div class=\"context n-row\">\n        {#each logMeta.context as context}\n          <button\n            class=\"btn btn-badge btn-xs faded\"\n            on:click={() => {\n              Interact.openStats(context.raw);\n              dispatch('contextClick', { context: context, log });\n            }}>\n            +{context.id}\n          </button>\n        {/each}\n      </div>\n    {/if}\n\n  </NItem>\n{/if}\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import config from \"../../config/appConfig\";\n  import LogList from \"./log-list.svelte\";\n  import NItem from \"../list-item/list-item.svelte\";\n  import NSpinner from \"../spinner/spinner.svelte\";\n  import { LedgerStore } from \"../../store/ledger\";\n  import tick from \"../../utils/tick/tick\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  // vendor\n  import dayjs from \"dayjs\";\n  import Text from \"../text/text.svelte\";\n  import { UserStore } from \"../../store/user-store\";\n  import Storage from \"../../modules/storage/storage\";\n  import global from \"../../config/appConfig\";\n  import Spinner from \"../spinner/spinner.svelte\";\n  import Button from \"../button/button.svelte\";\n\n  export let term = null;\n  export let limit = 20;\n  export let className = \"\";\n  export let compact = false;\n  export let fullDate = true;\n  export let results = [];\n\n  let loading = false;\n  let logs = [];\n\n  let lastFrom;\n  let lastTo;\n\n  let searchCount = 0;\n\n  const dtFormat = UserStore.getDateTimeFormat();\n\n  // React to Term Change\n  let lastTerm;\n\n  $: if (term && lastTerm !== term) {\n    lastTerm = term;\n    reset();\n    search();\n  }\n\n  function reset() {\n    logs = [];\n    lastTo = null;\n    lastFrom = null;\n    lastTerm = null;\n  }\n\n  async function search() {\n    searchCount++;\n\n    // Set from and to date\n    loading = true;\n    let from = !lastFrom ? dayjs().subtract(limit, config.book_time_unit) : dayjs(lastFrom).subtract(limit, config.book_time_unit);\n    let to = !lastTo ? dayjs() : dayjs(lastTo).subtract(limit, config.book_time_unit);\n\n    // Query the ledger\n    let book = await LedgerStore.query({\n      start: from.toDate(),\n      end: to.toDate(),\n      search: term,\n    });\n    //\n    logs = [...logs, ...book].sort((a, b) => {\n      return a.end > b.end ? 1 : -1;\n    });\n    lastFrom = from;\n    lastTo = to;\n    await tick(12);\n    loading = false;\n    results = logs;\n  }\n\n  function cancelSearch() {\n    cancelled = true;\n  }\n\n  onMount(() => {\n    reset();\n  });\n</script>\n\n<style lang=\"scss\">.log-list-loader {\n  position: relative; }\n</style>\n\n<div class=\"log-list-loader\">\n  <LogList\n    {fullDate}\n    className=\"bg-transparent {className}\"\n    {compact}\n    {logs}\n    on:trackerClick={(event) => {\n      dispatch('trackerClick', event.detail);\n    }}\n    on:locationClick={(event) => {\n      dispatch('locationClick', event.detail);\n    }}\n    on:textClick={(event) => {\n      dispatch('textClick', event.detail);\n    }}\n    on:moreClick={(event) => {\n      dispatch('moreClick', event.detail);\n    }} />\n  {#if !loading && logs.length == 0}\n    <div class=\"p-2 text-center text-faded-2\">No results found for this time period.</div>\n  {/if}\n  {#if !loading && lastTo}\n    <NItem className=\"py-2 bg-transparent mb-2\">\n      <Button block color=\"light\" className=\"mx-auto\" style=\"max-width:300px;\" on:click={search}>Search More...</Button>\n      <Text size=\"sm\" faded center className=\"mt-2\">Place in time: {lastFrom.format(dtFormat.date)}</Text>\n    </NItem>\n  {:else if loading}\n    <NItem className=\"py-2 bg-transparent mb-2\">\n      <Button block color=\"light\" className=\"mx-auto\" style=\"max-width:300px;\" disabled>\n        <Spinner size={18} className=\"mr-2\" />\n        Searching...\n      </Button>\n      <Text size=\"sm\" faded center className=\"mt-2\">Looking through history</Text>\n    </NItem>\n  {/if}\n\n</div>\n",
    "<script lang=\"ts\">import NText from \"../text/text.svelte\";\nimport { fly } from \"svelte/transition\";\nimport { onDestroy, createEventDispatcher } from \"svelte\";\nimport NToolbarGrid from \"../toolbar/toolbar-grid.svelte\";\nimport NIcon from \"../icon/icon.svelte\";\nconst dispatch = createEventDispatcher();\n// Props\nexport let padding = false;\nexport let title = \"Modal\";\nexport let allowClose = undefined;\nexport let fullscreen = false;\nexport let flexBody = undefined;\nexport let show = true; // Defaulted to true so it can be controlled by a parent component\nexport let className = \"\";\nexport let type = \"normal\"; // cover, fullscreen, bottom, bottom-slide-up\nexport let bodyClass = \"\";\nexport let closeOnBackgroundTap = false;\nconst has_header = (arguments[1].$$slots || {}).hasOwnProperty(\"header\");\nconst has_raw_header = (arguments[1].$$slots || {}).hasOwnProperty(\"raw-header\");\nconst has_footer = (arguments[1].$$slots || {}).hasOwnProperty(\"footer\");\nlet domVisible = false;\nlet showModal = false;\n// Stagger showing and dom showing for CSS effects\n$: if (show) {\n    // document.body.classList.add(\"no-scroll\");\n    showModal = true;\n    setTimeout(() => {\n        domVisible = true;\n    }, 100);\n}\n$: if (show == false) {\n    // document.body.classList.remove(\"no-scroll\");\n    domVisible = false;\n    setTimeout(() => {\n        showModal = false;\n    }, 400);\n}\nfunction backgroundTap() {\n    if (closeOnBackgroundTap == true) {\n        dispatch(\"close\");\n    }\n}\nonDestroy(() => {\n    // document.body.classList.remove(\"no-scroll\");\n});\n</script>\n\n<style lang=\"scss\">@media (max-width: 599.98px) {\n  .container {\n    padding-left: 0 !important;\n    padding-right: 0 !important; } }\n\n@media (min-width: 980px) {\n  .container.board-container {\n    max-width: 90% !important; } }\n\n:global(.type-normal .full-screen-modal .n-modal-footer, .type-fullscreen .n-modal-footer) {\n  padding-bottom: calc(env(safe-area-inset-bottom) + 10px) !important; }\n\n.n-modal-frame {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--color-full-screen);\n  z-index: 2000;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.6s ease-in-out; }\n  .n-modal-frame.hidden {\n    opacity: 0;\n    pointer-events: none;\n    overflow: hidden; }\n  .n-modal-frame.type-bottom {\n    justify-content: flex-end; }\n  .n-modal-frame.type-bottom-slideup {\n    justify-content: flex-end;\n    margin-bottom: -20px;\n    padding-bottom: 20px; }\n    .n-modal-frame.type-bottom-slideup.hidden .n-modal {\n      transform: translateY(700px); }\n    .n-modal-frame.type-bottom-slideup .n-modal {\n      transition: all 0.4s ease-in-out;\n      max-height: 87vh;\n      width: 95vw;\n      max-width: 600px;\n      flex-grow: 1;\n      flex-shrink: 1;\n      height: 70vh;\n      margin-bottom: 0px;\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      padding-bottom: env(safe-area-inset-bottom);\n      box-shadow: var(--box-shadow);\n      border: solid 1px var(--color-faded-1); }\n  .n-modal-frame.type-fullscreen .n-modal {\n    height: 100vh;\n    width: 100vw;\n    max-height: 100vh;\n    max-width: 100vw;\n    border-radius: 0px;\n    margin: 0; }\n    @media (min-width: 600px) {\n      .n-modal-frame.type-fullscreen .n-modal {\n        max-width: 500px;\n        max-height: 700px;\n        border-radius: 0.7rem; } }\n  .n-modal-frame.type-cover .n-modal {\n    padding-top: env(safe-area-inset-top) !important;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-width: 100vw;\n    bottom: 0;\n    border-radius: 0px;\n    margin: 0;\n    margin-left: 0;\n    margin-right: 0;\n    max-height: 100vh; }\n\n:global(.n-modal-footer) {\n  padding-bottom: calc(env(safe-area-inset-bottom) + 10px);\n  width: 100%; }\n\n:global(.n-modal-footer [slot=\"footer\"]) {\n  width: 100%; }\n\n.n-modal {\n  border: var(--modal-border);\n  min-width: 320px;\n  background-color: var(--color-solid);\n  min-height: 200px;\n  max-height: 90vh;\n  max-width: 400px;\n  position: relative;\n  margin: 10px;\n  border-radius: 1.2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: stretch;\n  border: var(--modal-border);\n  box-shadow: var(--box-shadow-float);\n  transition: all 0.2s ease-in-out; }\n  .n-modal .n-modal-body {\n    flex-grow: 1;\n    overflow-y: auto;\n    overflow-x: hidden;\n    z-index: 1; }\n    @media (min-width: 600px) {\n      .n-modal .n-modal-body {\n        padding: 20px; } }\n  .n-modal.full-screen-modal {\n    height: 96vh;\n    width: 96vw;\n    max-width: 700px;\n    max-height: 700px; }\n    @media (max-width: 599.98px) {\n      .n-modal.full-screen-modal {\n        height: 100vh;\n        width: 100vw;\n        max-height: 100vh;\n        max-width: 100vh;\n        margin: 0 !important; } }\n    .n-modal.full-screen-modal .n-modal-body.no-scroll {\n      overflow: auto !important; }\n    .n-modal.full-screen-modal .n-modal-body.flex-body {\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: stretch;\n      align-items: stretch; }\n\n.n-modal-raw-header {\n  z-index: 2; }\n\n.n-modal-header {\n  min-height: 40px;\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-grow: 0;\n  flex-shrink: 0;\n  color: var(--color-inverse);\n  box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.09);\n  z-index: 2; }\n\n.n-modal-footer {\n  flex-grow: 0;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 10px;\n  border-top: solid 1px rgba(0, 0, 0, 0.05);\n  box-shadow: 0px -6px 12px rgba(0, 0, 0, 0.09);\n  z-index: 2; }\n\n:global(.n-modal-footer .btn) {\n  padding-left: 26px;\n  padding-right: 26px; }\n\n.n-modal-body {\n  overflow-y: scroll;\n  overflow-y: scroll; }\n  .n-modal-body.padding {\n    padding: 20px; }\n  .n-modal-body.no-padding {\n    padding: 0px !important;\n    overflow: scroll; }\n</style>\n\n<div on:click={backgroundTap} class=\"n-modal-frame {className} type-{type} {domVisible ? 'visible' : 'hidden'}\">\n  <div\n    on:click|stopPropagation={() => {}}\n    class=\"n-modal animate up {fullscreen ? 'full-screen-modal' : ''}\n    {domVisible ? 'visible' : 'hidden'}\">\n    {#if has_raw_header}\n      <div class=\"n-modal-raw-header\">\n        <slot name=\"raw-header\" />\n      </div>\n    {:else if has_header || title}\n      <div class=\"n-modal-header\">\n        {#if has_header}\n          <slot name=\"header\" />\n        {:else}\n          <NToolbarGrid>\n            <div slot=\"left\">\n              {#if allowClose}\n                <button\n                  class=\"btn btn-clear btn-icon tap-icon\"\n                  on:click={() => {\n                    dispatch('close');\n                  }}>\n                  <NIcon name=\"close\" />\n                </button>\n              {/if}\n            </div>\n            <h1 slot=\"main\">{title}</h1>\n            <div slot=\"right\">\n              <slot name=\"headerRight\" />\n            </div>\n          </NToolbarGrid>\n        {/if}\n      </div>\n    {/if}\n    <div class=\"{bodyClass} n-modal-body {padding ? 'padding' : 'no-padding'} {flexBody ? 'flex-body' : 'no-flex-body'} \">\n      <slot />\n    </div>\n    {#if has_footer}\n      <div class=\"n-modal-footer\">\n        <slot name=\"footer\" />\n      </div>\n    {/if}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nimport Button from \"../button/button.svelte\";\nimport Icon from \"../icon/icon.svelte\";\nexport let isToday = true;\nexport let hideCal = false;\nexport let style = \"\";\nconst dispatch = createEventDispatcher();\n</script>\n\n<style>\n  .next-prev-cal {\n    max-width: 120px;\n  }\n</style>\n\n<div class=\"next-prev-cal n-row w-auto\" {style}>\n  <Button\n    color=\"circle\"\n    className=\"tap-icon\"\n    delay={0}\n    on:click={() => {\n      dispatch('previous');\n    }}>\n    <Icon name=\"chevronLeft\" size=\"24\" />\n  </Button>\n  {#if !hideCal}\n    <Button\n      color=\"none\"\n      shape=\"circle\"\n      delay={0}\n      className=\"tap-icon\"\n      on:click={() => {\n        dispatch('calendar');\n      }}>\n      <Icon name=\"calendar\" size=\"24\" className={isToday ? '' : 'fill-red'} />\n    </Button>\n  {/if}\n  <Button\n    color=\"none\"\n    shape=\"circle\"\n    delay={0}\n    className=\"tap-icon\"\n    on:click={() => {\n      dispatch('next');\n    }}>\n    <Icon name=\"chevronRight\" size=\"24\" />\n  </Button>\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  // Components\n  import NTagBadge from \"../tag-badge/tag-badge.svelte\";\n\n  //Utils\n  import extractor from \"../../utils/extract/extract\";\n\n  // Modules\n  import Tracker from \"../../modules/tracker/tracker\";\n\n  // Props\n  export let note = \"\";\n  export let trackers = {};\n  export let className = undefined;\n\n  const dispatch = createEventDispatcher();\n\n  const state = {\n    words: [],\n  };\n\n  let actual = 0;\n\n  const methods = {\n    split(str) {\n      return str.split(\" \");\n    },\n    tracker_get(tag) {\n      return (trackers || {})[tag] || new Tracker({ tag: tag });\n    },\n    textElementClick(element) {\n      dispatch(\"textClick\", element);\n    },\n    linkClick(link) {\n      window.open(link, \"_system\");\n    },\n    note_to_array(str) {\n      let parsed = extractor.parse(str, { includeGeneric: true });\n      let matches = parsed.filter((trackableElement) => {\n        return (\"person\", \"context\", \"generic\").indexOf(trackableElement.type) > -1;\n      });\n      actual = matches.length;\n      return parsed;\n    },\n  };\n\n  $: state.words = methods.note_to_array(note);\n</script>\n\n<style lang=\"scss\">.n-note-textualized.inherit {\n  font-size: inherit;\n  line-height: inherit;\n  letter-spacing: inherit; }\n\n.n-note-textualized .value {\n  max-height: 15px;\n  flex-shrink: 0;\n  font-size: 10px;\n  font-weight: bold;\n  height: 14px;\n  min-width: 14px;\n  padding: 0 4px;\n  color: #fff;\n  border-radius: 6px;\n  text-align: center;\n  display: inline-block; }\n\n.n-note-textualized .string,\n.n-note-textualized .tracker,\n.n-note-textualized .person,\n.n-note-textualized .context {\n  padding-right: 3px;\n  flex-shrink: 0; }\n\n.n-note-textualized .remainder {\n  padding-right: 5px;\n  margin-left: -6px; }\n\n.n-note-textualized span {\n  display: inline; }\n</style>\n\n{#if actual}\n  <div class=\"n-note-textualized {className} {state.words.length > 20 ? 'long-note' : 'short-note'}\">\n    {#each state.words as word}\n      {#if word.type === 'tracker'}\n        <span\n          class=\"tracker font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.textElementClick(word);\n          }}>\n          {` #${word.id} `}\n        </span>\n      {:else if word.type == 'person'}\n        <span\n          class=\"person font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.textElementClick(word);\n          }}>\n          {` ${word.raw} `}\n        </span>\n      {:else if word.type == 'context'}\n        <span\n          class=\"context font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.textElementClick(word);\n          }}>\n          {` ${word.raw} `}\n        </span>\n      {:else if word.type == 'link'}\n        <span\n          class=\"context font-weight-bold clickable text-primary-bright\"\n          on:click={() => {\n            methods.linkClick(word.raw);\n          }}>\n          {` ${word.id} `}\n        </span>\n      {:else if word.type == 'line-break'}\n        <br />\n      {:else if word.raw}{word.raw + ' '}{/if}\n      {#if word.remainder}\n        <span class=\"remainder\">{word.remainder.trim()}</span>\n      {/if}\n    {/each}\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nimport NItem from \"../list-item/list-item.svelte\";\nimport NInput from \"../input/input.svelte\";\nimport NIcon from \"../icon/icon.svelte\";\nimport LabelMeta from \"../label-meta/label-meta.svelte\";\nimport { TrackerStore } from \"../../store/tracker-store\";\n;\nconst dispatch = createEventDispatcher();\nexport let tracker;\nlet active = [];\nlet activeValue;\nfunction toggle(pick) {\n    if (active.indexOf(pick) > -1) {\n        active = active.filter((p) => {\n            return p !== pick;\n        });\n    }\n    else {\n        active.push(pick);\n    }\n    active = active;\n    setTimeout(() => {\n        try {\n            document.activeElement.blur();\n        }\n        catch (e) { }\n    }, 120);\n    fireChange();\n}\nfunction add() {\n    tracker.picks = tracker.picks || [];\n    tracker.picks.push(`${activeValue}`);\n    activeValue = null;\n    TrackerStore.saveTracker(tracker);\n    tracker.picks = tracker.picks;\n}\nfunction fireChange() {\n    dispatch(\"change\", active.join(\" \"));\n}\nfunction isHeader(pick) {\n    let lastCharacter = pick.trim().substr(pick.trim().length - 1, 1);\n    return lastCharacter === \":\";\n}\n</script>\n\n<style lang=\"scss\">.tracker-input.picker {\n  width: 100%; }\n</style>\n\n<div class=\"tracker-input picker\">\n  <div class=\"n-list solo\">\n    {#each tracker.picks || [] as pick}\n      {#if isHeader(pick)}\n        <NItem className=\"item-divider compact\">{pick.replace(' :', '')}</NItem>\n      {:else}\n        <NItem\n          compact\n          clickable\n          className=\"bottom-line compact {active.indexOf(pick) > -1 ? 'bg-primary-bright' : ''}\"\n          on:click={() => {\n            toggle(pick);\n          }}>\n          <LabelMeta str={pick} titleClass={active.indexOf(pick) > -1 ? 'text-white' : ''} />\n          <button class=\"btn btn-clear\" slot=\"right\">\n            {#if active.indexOf(pick) > -1}\n              <NIcon name=\"radioFilled\" className=\"fill-white\" />\n            {:else}\n              <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n            {/if}\n          </button>\n        </NItem>\n      {/if}\n    {/each}\n    <!-- <NItem>\n      <NInput on:enter={add} compact placeholder=\"Add an Item\" bind:value={activeValue}>\n        <button slot=\"right\" class=\"btn btn-clear\" on:click={add}>\n          <NIcon name=\"addOutline\" />\n        </button>\n      </NInput>\n    </NItem> -->\n    <div class=\"n-row\">\n      <slot name=\"bottom\" />\n    </div>\n  </div>\n  <!-- <div class=\"value\">{tempValue}</div>\n  <input\n    type=\"range\"\n    bind:value={tempValue}\n    {min}\n    {max}\n    on:change={() => {\n      dispatch('change', parseInt(tempValue));\n    }} /> -->\n\n</div>\n",
    "<script>\n  export let points = 0;\n  export let className = undefined;\n  $: dir = points > 0 ? \"+\" : points < 0 ? \"\" : \"\";\n  $: positiveClass =\n    points > 0 ? \"positive\" : points < 0 ? \"negative\" : \"neutral\";\n</script>\n\n<style lang=\"scss\">.n-points {\n  position: relative;\n  border-radius: 13px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1rem;\n  font-weight: bolder;\n  overflow: visible;\n  max-height: 22px; }\n  .n-points.positive {\n    color: var(--color-green); }\n    .n-points.positive .dir {\n      color: var(--color-green); }\n  .n-points svg {\n    margin-left: 2px;\n    position: absolute;\n    display: block;\n    width: 12px;\n    height: 12px;\n    right: -7px;\n    top: -4px; }\n  .n-points.negative {\n    color: var(--color-red); }\n    .n-points.negative .dir {\n      color: var(--color-red); }\n  .n-points.neutral {\n    color: var(--color-primary-bright); }\n    .n-points.neutral .dir {\n      color: var(--color-primary-bright); }\n</style>\n\n{#if points !== 0}\n  <div class=\"n-points {className} {positiveClass}\">\n    <span class=\"dir\">{dir}</span>\n    <span class=\"number\">{points}</span>\n    {#if points > 0}\n      <svg\n        width=\"19\"\n        height=\"19\"\n        viewBox=\"0 0 19 19\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0)\">\n          <path\n            d=\"M-4.15258e-07 9.5C-6.44599e-07 14.7467 4.25329 19 9.5 19C14.7467\n            19 19 14.7467 19 9.5C19 4.25329 14.7467 -1.85917e-07 9.5\n            -4.15258e-07C4.25329 -6.44599e-07 -1.85917e-07 4.25329 -4.15258e-07\n            9.5Z\"\n            fill=\"#FFD93B\" />\n          <path\n            d=\"M9.4999 15.606C6.72175 15.606 4.30103 13.7244 3.61347\n            11.0312C3.55943 10.8192 3.68709 10.6037 3.89906 10.5497C4.10984\n            10.4944 4.32597 10.6233 4.38 10.8352C4.9785 13.1782 7.08334 14.8146\n            9.49931 14.8146C11.9153 14.8146 14.0207 13.1782 14.6186\n            10.8352C14.6721 10.6233 14.8876 10.4944 15.1002 10.5497C15.3121\n            10.6037 15.4398 10.8192 15.3857 11.0312C14.6988 13.7244 12.2781\n            15.606 9.4999 15.606Z\"\n            fill=\"#3E4347\" />\n          <path\n            d=\"M6.43195 9.90569C7.23601 9.90569 7.88782 9.13106 7.88782\n            8.1755C7.88782 7.21994 7.23601 6.44531 6.43195 6.44531C5.62789\n            6.44531 4.97607 7.21994 4.97607 8.1755C4.97607 9.13106 5.62789\n            9.90569 6.43195 9.90569Z\"\n            fill=\"#3E4347\" />\n          <path\n            d=\"M7.08871 7.8032C6.9753 7.89227 6.78886 7.84833 6.66952\n            7.70345C6.55017 7.55858 6.54424 7.36442 6.65764 7.27536C6.77046\n            7.18214 6.95749 7.22608 7.07624 7.37096C7.19618 7.51999 7.19736\n            7.71058 7.08871 7.8032Z\"\n            fill=\"#5A5F63\" />\n          <path\n            d=\"M12.5696 9.90569C13.3737 9.90569 14.0255 9.13106 14.0255\n            8.1755C14.0255 7.21994 13.3737 6.44531 12.5696 6.44531C11.7656\n            6.44531 11.1138 7.21994 11.1138 8.1755C11.1138 9.13106 11.7656\n            9.90569 12.5696 9.90569Z\"\n            fill=\"#3E4347\" />\n          <path\n            d=\"M13.2249 7.8032C13.1115 7.89227 12.9251 7.84833 12.8057\n            7.70345C12.6864 7.55858 12.6805 7.36442 12.7939 7.27536C12.9067\n            7.18214 13.0931 7.22608 13.2125 7.37096C13.3324 7.51999 13.3336\n            7.71058 13.2249 7.8032Z\"\n            fill=\"#5A5F63\" />\n        </g>\n        <defs>\n          <clipPath id=\"clip0\">\n            <rect width=\"19\" height=\"19\" fill=\"white\" />\n          </clipPath>\n        </defs>\n      </svg>\n    {:else}\n      <svg\n        width=\"19\"\n        height=\"19\"\n        viewBox=\"0 0 19 19\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0)\">\n          <path\n            d=\"M-4.15258e-07 9.5C-6.44599e-07 14.7467 4.25329 19 9.5 19C14.7467\n            19 19 14.7467 19 9.5C19 4.25329 14.7467 -1.85917e-07 9.5\n            -4.15258e-07C4.25329 -6.44599e-07 -1.85917e-07 4.25329 -4.15258e-07\n            9.5Z\"\n            fill=\"#FFB13B\" />\n          <path\n            d=\"M13.1586 15.1102C12.686 15.3952 11.4142 14.127 9.66145\n            14.1115C7.93423 14.0961 6.63689 15.3958 6.16427 15.1102C5.59842\n            14.8799 6.56623 12.1189 9.66145 12.1023C12.7567 12.1189 13.7245\n            14.8805 13.1586 15.1102Z\"\n            fill=\"#1C1C1C\" />\n          <path\n            d=\"M14.485 8.22031C14.485 9.0569 13.8005 9.74149 12.9603\n            9.74149C12.1195 9.74149 11.4355 9.0569 11.4355 8.22031C11.4355\n            7.37599 12.1201 6.69556 12.9603 6.69556C13.801 6.69556 14.485\n            7.37599 14.485 8.22031Z\"\n            fill=\"#19191A\" />\n          <path\n            d=\"M13.6584 7.36028C13.471 7.19754 13.235 7.16236 13.1314\n            7.28171C13.0278 7.40106 13.0957 7.62974 13.2832 7.79249C13.4706\n            7.95523 13.7066 7.99041 13.8102 7.87106C13.9138 7.75171 13.8459\n            7.52303 13.6584 7.36028Z\"\n            fill=\"#5A5F63\" />\n          <path\n            d=\"M7.56415 8.22031C7.56415 9.0569 6.87955 9.74149 6.0394\n            9.74149C5.19924 9.74149 4.51465 9.0569 4.51465 8.22031C4.51465\n            7.37599 5.19924 6.69556 6.0394 6.69556C6.87955 6.69556 7.56415\n            7.37599 7.56415 8.22031Z\"\n            fill=\"#19191A\" />\n          <path\n            d=\"M6.73703 7.36077C6.54958 7.19803 6.31363 7.16285 6.21001\n            7.2822C6.10638 7.40155 6.17433 7.63023 6.36178 7.79297C6.54922\n            7.95572 6.78517 7.99089 6.8888 7.87155C6.99242 7.7522 6.92447\n            7.52352 6.73703 7.36077Z\"\n            fill=\"#5A5F63\" />\n        </g>\n        <defs>\n          <clipPath id=\"clip0\">\n            <rect width=\"19\" height=\"19\" fill=\"white\" />\n          </clipPath>\n        </defs>\n      </svg>\n    {/if}\n\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import NToolbar from \"../toolbar/toolbar.svelte\";\nimport NItem from \"../list-item/list-item.svelte\";\nimport { createEventDispatcher, onMount, onDestroy } from \"svelte\";\nimport { Lang } from \"../../store/lang\";\nimport Button from \"../button/button.svelte\";\nconst dispatch = createEventDispatcher();\nexport let title = undefined;\nexport let description = undefined;\nexport let buttons = [];\n// export let cancel = undefined;\nexport let show = true;\nconst methods = {\n    backgroundClicked(event) {\n        const ele = event.toElement;\n        if (ele.classList.contains(\"pop-menu\")) {\n            dispatch(\"close\", event);\n        }\n    },\n};\nfunction close(evt) {\n    dispatch(\"close\", evt);\n}\nlet escListener;\n$: if (show) {\n    escListener = document.addEventListener(\"keyup\", (evt) => {\n        if (evt.key == \"Escape\") {\n            dispatch(\"close\");\n        }\n    });\n}\nelse {\n    escListener = document.removeEventListener(\"keyup\", () => { });\n}\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">:global(.pop-menu) {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2002;\n  padding-bottom: env(safe-area-inset-bottom);\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  transition: all 0.5s ease-in-out; }\n  :global(.pop-menu) .list {\n    border-radius: 1rem;\n    background-color: var(--color-solid);\n    max-height: 60vh;\n    overflow-y: scroll; }\n  :global(.pop-menu):before {\n    content: \"\";\n    background-color: var(--color-full-screen);\n    opacity: 0.8;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0; }\n  :global(.pop-menu).visible {\n    opacity: 1; }\n  :global(.pop-menu).hidden {\n    pointer-events: none;\n    opacity: 0; }\n    :global(.pop-menu).hidden .card {\n      opacity: 0;\n      transform: translateY(400px) scaleY(0.1) scaleX(0.1); }\n  :global(.pop-menu) .card {\n    transition: all 0.2s ease-in-out;\n    max-width: 400px;\n    max-height: 80vh;\n    min-height: 100px;\n    width: 200px;\n    min-width: 300px !important;\n    flex-grow: 1;\n    background-color: var(--color-darkest-translucent);\n    color: var(--color-inverse-1);\n    border-radius: 1.2rem;\n    border: var(--modal-border);\n    box-shadow: var(--box-shadow-float);\n    padding: 10px;\n    margin: 10px;\n    display: flex;\n    justify-content: stretch;\n    align-content: stretch; }\n    :global(.pop-menu) .card .card-body {\n      flex-grow: 1;\n      flex-shrink: 1;\n      overflow-x: hidden; }\n  :global(.pop-menu) .btn-toolbar .btn {\n    min-width: 100px; }\n\n:global(.pop-menu .list .btn) {\n  border-radius: 0;\n  margin-bottom: 0;\n  margin-top: 0;\n  border: none;\n  box-shadow: none !important; }\n  :global(.pop-menu .list .btn):hover {\n    transform: scale(1) !important;\n    color: var(--color-inverse) !important;\n    background-color: var(--color-solid) !important; }\n  :global(.pop-menu .list .btn):first-child {\n    border-top-right-radius: 1rem;\n    border-top-left-radius: 1rem; }\n  :global(.pop-menu .list .btn):last-child() {\n    border-bottom-right-radius: 1rem;\n    border-bottom-left-radius: 1rem; }\n  :global(.pop-menu .list .btn):hover {\n    transform: none;\n    color: inherit; }\n\n:global(.pop-menu .btn-danger:hover, .pop-menu.btn-danger:active) {\n  background-color: var(--color-red) !important;\n  color: rgba(128, 2, 2, 0.9) !important; }\n</style>\n\n<div class=\"full-screen dark-glass pop-menu {show === true ? 'visible' : 'hidden'}\" on:click={methods.backgroundClicked}>\n  <div class=\"card\">\n    {#if title || description}\n      <div class=\"pb-3 pt-2 text-center\">\n        {#if title}\n          <h5 class=\"text-center m-0 p-0 text-md text-inverse-2\">{title}</h5>\n        {/if}\n        {#if description}\n          <p class=\"text-center m-0 p-0\">{description}</p>\n        {/if}\n      </div>\n    {/if}\n    <div class=\"list\">\n      {#each buttons as button, index}\n        <Button\n          block\n          color=\"light\"\n          size=\"lg\"\n          disabled={button.disabled}\n          className={button.description ? 'btn-desc' : ''}\n          on:click={(evt) => {\n            button.click();\n            close(evt);\n          }}>\n          <div class=\"title\">{button.title}</div>\n          {#if button.description}\n            <div class=\"description\">{button.description}</div>\n          {/if}\n        </Button>\n        {#if index !== buttons.length - 1}\n          <hr class=\"divider center\" />\n        {/if}\n      {/each}\n\n    </div>\n    <Button\n      block\n      className=\"mt-2\"\n      style=\"flex-shrink:0\"\n      color=\"danger\"\n      size=\"lg\"\n      on:click={(evt) => {\n        close(evt);\n      }}>\n      {Lang.t('general.cancel')}\n    </Button>\n  </div>\n</div>\n",
    "<script>\n  import math from \"../../utils/math/math\";\n  import { onMount } from \"svelte\";\n\n  export let positive = 10;\n  export let negative = 10;\n  export let neutral = 30;\n  export let className = \"\";\n  export let style = \"\";\n  export let height = \"8pt\";\n\n  let positivity = [0, 0, 0];\n  let negativeStyle = \"\";\n  let neutralStyle = \"\";\n  let positiveStyle = \"\";\n\n  $: if (neutral | positive | negative) {\n    main();\n  }\n\n  function main() {\n    positivity = math.percentile([negative, neutral, positive]);\n    negativeStyle = `width:${positivity[0]}%`;\n    neutralStyle = `width:${positivity[1]}%`;\n    positiveStyle = `width:${positivity[2]}%`;\n  }\n</script>\n\n<style lang=\"scss\">.positivity-bar {\n  padding: 8pt 16px; }\n  .positivity-bar .bar {\n    display: flex;\n    border-radius: 4pt;\n    overflow: hidden;\n    flex-direction: row; }\n  .positivity-bar .negative {\n    background-color: var(--color-red);\n    margin-right: 2px; }\n  .positivity-bar .positive {\n    background-color: var(--color-green);\n    margin-left: 2px; }\n  .positivity-bar .neutral {\n    background-color: var(--color-primary-bright); }\n</style>\n\n{#if negative || neutral || positive}\n  <div class=\"positivity-bar {className}\" {style}>\n    <div class=\"bar\" style=\"height:{height}\">\n      <div\n        class=\"unit negative\"\n        data-score={negative}\n        style={`height:${height}; ${negativeStyle}`} />\n      <div\n        class=\"unit neutral\"\n        data-score={neutral}\n        style={`height:${height}; ${neutralStyle}`} />\n      <div\n        class=\"unit positive\"\n        data-score={positive}\n        style={`height:${height}; ${positiveStyle}`} />\n    </div>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import { getEmojiFromScore } from \"../../utils/positivity/positivity\";\n;\nimport Button from \"../button/button.svelte\";\nimport PositivitySelector from \"./positivity-selector.svelte\";\nexport let score = 0;\nexport let closeBackgroundTap = false;\nlet selected;\nlet showMenu = false;\n$: selected = getEmojiFromScore(score);\nlet x;\nfunction toggle(evt) {\n    if (evt && !showMenu) {\n        x = evt.detail.pageX - 240;\n    }\n    showMenu = !showMenu;\n}\n</script>\n\n<style>\n  .positivity-menu-pop {\n    position: absolute;\n    width: 240px;\n    bottom: calc(50px + env(safe-area-inset-bottom));\n    z-index: 3000;\n  }\n</style>\n\n<div class=\"positivity-menu-pop animate up\" style=\"left:{x}px; z-index:2020\" class:visible={showMenu} class:hidden={!showMenu}>\n  <PositivitySelector\n    bind:score\n    on:change={() => {\n      toggle();\n    }} />\n</div>\n\n{#if showMenu && closeBackgroundTap}\n  <div class=\"full-screen opacity-0\" on:click={toggle} />\n{/if}\n\n<Button\n  size=\"sm\"\n  shape=\"circle\"\n  color=\"transparent\"\n  style=\"font-size:22px\"\n  className=\"positivity-emoji-btn\"\n  on:mouseover={toggle}\n  on:click={toggle}>\n  {#if selected && selected.emoji}{selected.emoji}{/if}\n</Button>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { createEventDispatcher } from \"svelte\";\nimport appConfig from \"../../config/appConfig\";\nimport tick from \"../../utils/tick/tick\";\nimport NButtonGroup from \"../button-group/button-group.svelte\";\nimport Button from \"../button/button.svelte\";\nconst dispatch = createEventDispatcher();\nexport let score = 0;\nexport let className = \"\";\nexport let style = \"\";\nexport let size = \"md\";\nfunction onChange(sc) {\n    return __awaiter(this, void 0, void 0, function* () {\n        score = sc;\n        yield tick(200);\n        dispatch(\"change\", score);\n    });\n}\n</script>\n\n<style>\n  :global(.n-positivity-selector) {\n    height: 50px;\n    border-radius: 25px;\n    padding: 2px;\n    width: 250px;\n    background-color: var(--color-solid);\n  }\n\n  :global(.n-positivity-selector .btn) {\n    height: 50px;\n    width: 50px;\n    border-radius: 25px;\n    padding: 2px;\n    border: solid 1px transparent;\n    background-color: var(--color-solid);\n  }\n  :global(.n-positivity-selector .btn.inactive) {\n    opacity: 0.7;\n    transform: scale(0.65);\n  }\n\n  :global(.n-positivity-selector .btn:hover) {\n    opacity: 1;\n  }\n\n  :global(.n-positivity-selector .btn.active) {\n    box-shadow: var(--box-shadow);\n    background-color: var(--color-solid);\n    opacity: 1;\n  }\n</style>\n\n<div class=\"n-positivity-selector bg-solid box-shadow n-row {className} size-{size}\" {style}>\n  {#each appConfig.positivity as posEmoji}\n    <Button\n      on:click={() => {\n        onChange(posEmoji.score);\n      }}\n      size=\"lg\"\n      shape=\"round\"\n      color=\"transparent\"\n      className={score == posEmoji.score ? 'active' : 'inactive'}\n      style=\"font-size:32px\">\n      {posEmoji.emoji}\n    </Button>\n  {/each}\n</div>\n",
    "<script>\n  import NToolbar from \"../toolbar/toolbar.svelte\";\n  import NInput from \"../input/input.svelte\";\n\n  import { Lang } from \"../../store/lang\";\n  import { createEventDispatcher } from \"svelte\";\n  import NIcon from \"../icon/icon.svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let searchTerm = null;\n  export let autocomplete = false;\n  export let placeholder = `${Lang.t(\"general.search\")}...`;\n  export let style = \"\";\n  export let className = \"\";\n  export let compact = false;\n  export let showClose = true;\n\n  let _elInput;\n  // export let hasResults = false;\n\n  // FIre off changes when input changes\n  let timeout;\n  function fireChange() {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      dispatch(\"change\", searchTerm);\n    }, 400);\n  }\n\n  export function focus() {\n    if (_elInput.doFocus) {\n      _elInput.doFocus();\n    }\n  }\n  // Fire off when search is hit\n  function fireSearch() {\n    dispatch(\"search\", searchTerm);\n  }\n  // Fire off clearing\n  function fireClear() {\n    dispatch(\"clear\");\n    searchTerm = null;\n  }\n  // Watch for enter keys\n  function searchKeypress(event) {\n    if (event.key === \"Enter\" || event.key === \"Return\") {\n      fireSearch();\n      return false;\n    } else {\n      fireChange();\n    }\n  }\n</script>\n\n<style lang=\"scss\">:global(.search-bar) {\n  padding: 0 16pt;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-shrink: 0;\n  flex-grow: 1;\n  width: calc(100% - 16pt);\n  margin: 0 8pt; }\n  @media (min-width: 350px) {\n    :global(.search-bar) {\n      margin: 0 auto; } }\n\n:global(.search-bar .btn-action-clear) {\n  font-size: 14px; }\n\n:global(.search-bar input) {\n  width: calc(100% - 30px); }\n\n:global(.search-bar .n-input-wrapper) {\n  min-height: 40px !important; }\n\n:global(.search-bar .n-input-container) {\n  margin-bottom: 0 !important; }\n</style>\n\n<div className=\"n-toolbar n-row search-bar {className}\" {style}>\n\n  <div class=\"n-row\">\n    <NInput solo {compact} bind:this={_elInput} bind:value={searchTerm} on:change={fireChange} on:enter={fireSearch} {placeholder}>\n      <div slot=\"left\" class=\"pl-2 d-flex\">\n        <NIcon name=\"search\" style=\"height:20px; width: 20px; opacity:0.3;\" />\n      </div>\n      <div slot=\"right\">\n        <slot name=\"right-inside\" />\n        {#if searchTerm && showClose}\n          <button class=\"btn btn-sm btn-clear btn-action-clear mr-2\" on:click={fireClear} style=\"margin-left:-10px;\">\n            <NIcon name=\"close\" />\n          </button>\n        {/if}\n      </div>\n    </NInput>\n    <slot name=\"right\" />\n    {#if searchTerm && !autocomplete}\n      <button class=\"btn btn-sm text-inverse-2\" on:click={fireSearch}>Search</button>\n    {/if}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { onMount } from \"svelte\";\nimport Sortable from \"sortablejs\";\nimport { createEventDispatcher } from \"svelte\";\nconst dispatch = createEventDispatcher();\n// PROPS\nexport let items;\nexport let key;\nexport let handle = undefined;\nlet sortableList;\nconst reorder = (to, from) => {\n    let newList = [...items];\n    let tempItem = \"temp\";\n    let movedItem = newList[from];\n    // Cut in the temp Item\n    newList.splice(to, 0, tempItem);\n    // FILTER OUT MOVED ITEM\n    newList = newList\n        .filter((item) => {\n        return item !== movedItem;\n    })\n        .map((item) => {\n        return item !== tempItem ? item : movedItem;\n    });\n    dispatch(\"update\", newList);\n};\nfunction getKey(item, index) {\n    if (typeof item == \"string\") {\n        return index;\n    }\n    else if (key) {\n        return item[key] || index;\n    }\n}\nonMount(() => {\n    setTimeout(() => {\n        if (sortableList) {\n            let sortable = Sortable.create(sortableList, {\n                handle: handle,\n                onEnd: function (evt) {\n                    reorder(evt.newDraggableIndex, evt.oldDraggableIndex);\n                },\n            });\n        }\n    });\n});\n</script>\n\n<style>\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    max-width: 100%;\n    overflow: hidden;\n  }\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  :global(.sortable-chosen) {\n    box-shadow: 0px 10px 15px rgba(0, 0, 0, 0.3);\n  }\n  :global(.sortable-ghost) {\n    opacity: 0.7;\n  }\n</style>\n\n{#if items && items.length}\n  <ul bind:this={sortableList}>\n    {#each items as item, index (getKey(item, index))}\n      <li>\n        <slot {item} {index} />\n      </li>\n    {/each}\n  </ul>\n{/if}\n",
    "<script>\n  export let steps = 0;\n  export let current = 0;\n  export let dark = false;\n  export let stepClass = \"\";\n  export let single = false;\n  export let style = \"\";\n\n  let _steps = [];\n  $: if (steps || current) {\n    _steps = [];\n    for (let i = 0; i < steps; i++) {\n      if (!single) {\n        _steps.push(current >= i);\n      } else {\n        _steps.push(current == i);\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">.n-stepper {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: stretch;\n  padding: 4px; }\n  .n-stepper .step {\n    transition: all 0.2s ease-in-out;\n    border: solid 1px var(--color-translucent);\n    opacity: 0.5;\n    height: 8px;\n    width: 8px;\n    flex-grow: 0;\n    flex-shrink: 0;\n    margin: 0 2px;\n    min-width: 8px;\n    border-radius: 4px; }\n    .n-stepper .step.primary-bright {\n      border: solid 1px var(--color-primary-bright) !important; }\n    .n-stepper .step.active {\n      background-color: var(--color-translucent);\n      opacity: 1;\n      height: 8px; }\n      .n-stepper .step.active.primary-bright {\n        background-color: var(--color-primary-bright) !important; }\n  .n-stepper.dark .step {\n    background-color: var(--color-primary);\n    opacity: 0.2; }\n    .n-stepper.dark .step.active {\n      opacity: 1; }\n</style>\n\n<div class=\"n-stepper {dark ? 'dark' : 'light'}\" {style}>\n  {#each _steps as step}\n    <div class=\"step {stepClass} {step ? 'active' : 'inactive'}\" />\n  {/each}\n</div>\n",
    "<script>\n  export let label = undefined;\n  export let value = undefined;\n  // export let color = undefined;\n  export let emoji = undefined;\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.n-tag-badge {\n  display: inline-flex;\n  align-items: center;\n  background-color: #fff;\n  box-shadow: 0px 3px 5px -2px rgba(0, 0, 0, 0.1);\n  border: solid 1px rgba(49, 158, 215, 0.2);\n  color: #319ed7;\n  padding-left: 6px;\n  padding-right: 2px;\n  border-radius: 20px;\n  margin-right: 6px;\n  line-height: 15px; }\n\n.n-tag-badge .value {\n  display: inline-block;\n  padding: 2px 4px 2px;\n  background-color: rgba(255, 255, 255, 0.2);\n  min-width: 20px;\n  border-radius: 20px;\n  text-align: center;\n  margin-left: 4px; }\n\n.n-tag-badge .emoji {\n  margin-right: 3px;\n  opacity: 0.7; }\n</style>\n\n<div class=\"n-tag-badge badge badge-sm\">\n  {#if emoji}\n    <div class=\"emoji\">{emoji}</div>\n  {/if}\n  <div class=\"label\">{label}</div>\n  <div class=\"value\">{value}</div>\n</div>\n",
    "<script lang=\"ts\">import { createEventDispatcher } from \"svelte\";\nimport { get } from \"svelte/store\";\nexport let size = \"md\";\n// export let color = undefined;\nexport let bold = undefined;\nexport let medium = undefined;\nexport let tag = \"div\";\nexport let className = \"\";\nexport let faded = false;\nexport let style = \"\";\nexport let center = false;\nexport let truncate = false;\nexport let truncate2 = false;\nexport let truncate3 = false;\nexport let color = \"\";\nexport let underline = false;\nexport let inline = false;\nexport let lineHeightMd = false;\nconst dispatch = createEventDispatcher();\n</script>\n\n<style type=\"text/scss\">.n-text {\n  color: var(--color-inverse);\n  line-height: 116%;\n  white-space: normal;\n  line-height: 125%; }\n  .n-text.line-height-md {\n    line-height: 140%; }\n  .n-text.xs {\n    font-size: 0.7rem; }\n  .n-text.sm {\n    font-size: 0.85rem; }\n  .n-text.md {\n    font-size: 1rem; }\n  .n-text.lg {\n    font-size: 1.25rem; }\n  .n-text.faded {\n    opacity: 0.7; }\n  .n-text.xl {\n    font-size: 1.5rem; }\n  .n-text.xxl {\n    font-size: 2rem; }\n  .n-text.font-weight-bold {\n    font-weight: bold; }\n  .n-text.font-weight-medium {\n    font-weight: 500; }\n</style>\n\n{#if tag === 'span' || inline}\n  <span\n    {style}\n    on:click={() => {\n      dispatch('click');\n    }}\n    class=\"n-text {` ${size || 'sm'} ${className} text-${color} ${truncate ? 'truncate' : ''} ${truncate2 ? 'truncate-2' : ''} ${truncate3 ? 'truncate-3' : ''} ${lineHeightMd ? 'line-height-md' : ''} ${center ? 'text-center' : ''} ${underline ? 'text-underline' : ''} ${faded ? 'faded ' : ''} ${bold ? 'font-weight-bold ' : ''} ${medium ? 'font-weight-medium ' : ''}`.trim()}\">\n    <slot />\n  </span>\n{:else}\n  <div\n    {style}\n    on:click={() => {\n      dispatch('click');\n    }}\n    class=\"n-text {` ${size || 'sm'} ${className} text-${color} ${truncate ? 'truncate' : ''} ${truncate2 ? 'truncate-2' : ''} ${truncate3 ? 'truncate-3' : ''} ${lineHeightMd ? 'line-height-md' : ''} ${center ? 'text-center' : ''} ${underline ? 'text-underline' : ''} ${faded ? 'faded ' : ''} ${bold ? 'font-weight-bold ' : ''} ${medium ? 'font-weight-medium ' : ''}`.trim()}\">\n    <slot />\n  </div>\n{/if}\n",
    "<script>\n  export let hours = [];\n  export let base = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23\n  ];\n</script>\n\n<style lang=\"scss\">.time-balls {\n  border-radius: 4px;\n  height: 4px;\n  display: flex; }\n  .time-balls .hour {\n    flex-shrink: 0;\n    flex-grow: 0;\n    min-height: calc(100% / 24);\n    min-width: calc(100% / 24);\n    border-radius: 2px;\n    overflow: visible; }\n    .time-balls .hour .active {\n      background-color: var(--color-primary);\n      opacity: 0.5;\n      width: 4px;\n      height: 4px;\n      border-radius: 2px; }\n</style>\n\n<div class=\"time-balls\">\n  {#each base as hour}\n    <div class=\"hour\">\n      {#if hours.indexOf(hour) > -1}\n        <div class=\"active\" />\n      {/if}\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  import { Lang } from \"../../store/lang\";\n  import Storage from \"../../modules/storage/storage\";\n  import NStepper from \"../../components/stepper/stepper.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import { Interact } from \"../../store/interact\";\n  import nid from \"../../modules/nid/nid\";\n\n  export let tips = [];\n  export let className = \"\";\n\n  let hiddenTips = Storage.local.get(\"hidden-tips\") || [];\n\n  let id = null;\n  let show = false;\n\n  const state = {\n    activeTip: 0,\n  };\n\n  $: if (tips) {\n    id = nid(JSON.stringify(tips));\n    show = hiddenTips.indexOf(id) == -1;\n  } else {\n    show = false;\n  }\n\n  async function hideTips() {\n    let confirmed = await Interact.confirm(\"Hide Tips?\");\n    if (confirmed) {\n      hiddenTips.push(id);\n      Storage.local.put(\"hidden-tips\", hiddenTips);\n      show = false;\n    }\n  }\n\n  function nextTip() {\n    if (state.activeTip == tips.length - 1) {\n      state.activeTip = 0;\n    } else {\n      state.activeTip++;\n    }\n  }\n  function previousTip() {\n    if (state.activeTip == 0) {\n      state.activeTip = tips.length - 1;\n    } else {\n      state.activeTip--;\n    }\n  }\n</script>\n\n<style lang=\"scss\">.n-tip-wrapper {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  margin: 0 16px; }\n\n.btn-close {\n  position: relative;\n  top: auto;\n  bottom: auto;\n  left: auto;\n  right: auto;\n  width: 14px;\n  height: 14px;\n  background-color: transparent;\n  box-shadow: none; }\n\n.n-tips {\n  margin: 16px;\n  width: 100%;\n  max-width: 400px;\n  padding: 16px 0;\n  flex-grow: 1;\n  position: relative;\n  border-radius: 6px; }\n  .n-tips .tip {\n    font-size: 0.8rem;\n    line-height: 1.2rem;\n    text-align: center;\n    color: var(--color-inverse-2); }\n</style>\n\n{#if show}\n  <section class=\"n-tip-wrapper {className}\">\n    <div class=\"n-tips mx-auto\" style=\"max-width:280px;\">\n      <div class=\"mx-auto n-row\">\n        <div class=\"filler\" />\n        <button class=\"btn btn-clear btn-icon tap-icon\" on:click={previousTip}>\n          <NIcon name=\"chevronLeft\" size=\"20\" />\n        </button>\n        <NStepper steps={tips.length} current={state.activeTip} dark />\n        <button class=\"btn-close text-lg flex-grow-off\" on:click={hideTips}>\n          <NIcon name=\"close\" size=\"9\" />\n        </button>\n        <button class=\"btn btn-clear btn-icon tap-icon\" on:click={nextTip}>\n          <NIcon name=\"chevronRight\" size=\"20\" />\n        </button>\n        <div class=\"filler\" />\n      </div>\n      <div class=\"n-row mb-2 px-4\">\n        <div class=\"tip filler\">\n          <strong>Tip #{state.activeTip + 1}</strong>\n          {tips[state.activeTip]}\n        </div>\n      </div>\n    </div>\n  </section>\n{/if}\n",
    "<script>\n  // Svelte\n  import { slide } from \"svelte/transition\";\n  import { Interact } from \"../../store/interact\";\n  import Button from \"../button/button.svelte\";\n  import ListItem from \"../list-item/list-item.svelte\";\n  import Text from \"../text/text.svelte\";\n  import Interactions from \"../../containers/interactions/interactions.svelte\";\n  import { tap } from \"@sveltejs/gestures\";\n\n  // Props\n  let showDom = false;\n\n  $: if ($Interact.toast.show) {\n    showDom = true;\n  } else {\n    showDom = false;\n  }\n\n  function click() {\n    if ($Interact.toast.click) {\n      $Interact.toast.click();\n    } else {\n      Interact.dismissToast();\n    }\n  }\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.n-toast {\n  z-index: 10003;\n  position: fixed;\n  bottom: 0px;\n  height: 140px;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  padding-bottom: env(safe-area-inset-bottom);\n  transition: all 0.2s ease-in-out;\n  padding-left: 16px;\n  padding-right: 16px; }\n  .n-toast.hidden {\n    transform: translateY(200px) scale(0.8);\n    opacity: 0;\n    pointer-events: none; }\n  .n-toast.visible {\n    transform: none;\n    opacity: 1; }\n  .n-toast .n-toast-panel {\n    min-height: 36px;\n    max-width: 600px;\n    min-width: 300px;\n    padding: 4px 0;\n    border-radius: 6px;\n    background-color: var(--color-primary-bright);\n    color: #fff;\n    flex-grow: 0;\n    border: solid 1px rgba(0, 0, 0, 0.1);\n    box-shadow: 0px 26px 18px rgba(0, 0, 0, 0.2);\n    flex-shrink: 1;\n    display: flex;\n    align-items: center;\n    margin-bottom: 15%; }\n</style>\n\n<div class=\"n-toast {showDom ? 'visible' : 'hidden'}\" aria-hidden={showDom ? 'false' : 'true'} on:click={click}>\n  <div class=\"n-toast-panel\">\n    <ListItem style=\"background-color:transparent\">\n      <Text size=\"md\" style=\"color:#FFF\" truncate>{$Interact.toast.message}</Text>\n      {#if $Interact.toast.description}\n        <Text size=\"sm\" style=\"color:#FFF; opacity:0.75; margin-top:2px; line-height:1.1rem;\">{$Interact.toast.description}</Text>\n      {/if}\n      <div slot=\"right\">\n        {#if $Interact.toast.buttonLabel && $Interact.toast.click}\n          <Button\n            color=\"clear\"\n            style=\"font-weight:bold; color:#FFF; text-transform:uppercase; font-size:0.9rem\"\n            on:click={$Interact.toast.click}>\n            {$Interact.toast.buttonLabel}\n          </Button>\n        {/if}\n      </div>\n    </ListItem>\n  </div>\n</div>\n",
    "<script>\n  //utils\n  import { createEventDispatcher } from \"svelte\";\n\n  // consts\n  const dispatch = createEventDispatcher();\n\n  export let value = false;\n  export let locked = null;\n\n  const id = `switch-${Math.random()}`;\n\n  const methods = {\n    onChange(event) {\n      if (locked == null) {\n        dispatch(\"change\", event.target.checked);\n      } else {\n        event.target.checked = locked;\n      }\n    },\n  };\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.onoffswitch {\n  position: relative;\n  width: 50px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none; }\n  .onoffswitch .onoffswitch-checkbox {\n    display: none; }\n  .onoffswitch .onoffswitch-label {\n    display: block;\n    overflow: hidden;\n    cursor: pointer;\n    height: 30px;\n    padding: 0;\n    line-height: 30px;\n    border: 2px solid var(--color-grey-6);\n    border-radius: 30px;\n    background-color: var(--color-solid-1);\n    transition: background-color 0.2s ease-in-out;\n    margin: 0; }\n  .onoffswitch .onoffswitch-label:before {\n    content: \"\";\n    display: block;\n    width: 30px;\n    margin: 0px;\n    background: var(--color-solid);\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 22px;\n    border: 2px solid var(--color-grey-6);\n    border-radius: 30px;\n    transition: all 0.2s ease-in-out 0s; }\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label {\n    background-color: var(--color-primary-bright); }\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label,\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label:before {\n    border-color: var(--color-primary-bright); }\n  .onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label:before {\n    right: 0px; }\n</style>\n\n<div class=\"onoffswitch\">\n  <input\n    type=\"checkbox\"\n    name=\"onoffswitch\"\n    class=\"onoffswitch-checkbox\"\n    {id}\n    bind:value\n    bind:checked={value}\n    on:change={methods.onChange} />\n  <label class=\"onoffswitch-label\" for={id} />\n</div>\n",
    "<script>\n  export let pinTop = undefined;\n  export let className = \"\";\n  export let style = \"\";\n</script>\n\n<style lang=\"scss\">.n-toolbar {\n  transition: all 0.2s ease-in-out;\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  padding: 0 8pt; }\n  .n-toolbar h1,\n  .n-toolbar h2,\n  .n-toolbar h3 {\n    font-size: 1rem !important;\n    margin: 0; }\n  .n-toolbar .btn-sm {\n    max-height: 40px; }\n  .n-toolbar.hidden {\n    opacity: 0;\n    pointer-events: none; }\n  .n-toolbar.pin-top {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 300;\n    background-color: var(--color-solid);\n    color: var(--color-inverse);\n    min-height: 50px;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    box-shadow: 0px 4px 4px -2px rgba(0, 0, 0, 0.1);\n    padding-top: env(safe-area-inset-top); }\n    .n-toolbar.pin-top.sub-header {\n      top: 49px !important; }\n  .n-toolbar [slot=\"sub-header\"] {\n    width: 100%; }\n\n.n-toolbar.stretch {\n  justify-content: stretch; }\n\n:global(.n-toolbar .btn-clear, .n-toolbar-grid .btn-clear) {\n  border-radius: 0 !important;\n  outline: none !important;\n  padding: 0 10px;\n  font-size: 1rem; }\n</style>\n\n<div class=\"n-toolbar {pinTop ? 'pin-top' : ''} {className}\" {style}>\n  <div class=\"container n-row px-0\">\n    <slot />\n  </div>\n</div>\n",
    "<script>\n  import Dymoji from \"../dymoji/dymoji.svelte\";\n\n  export let avatar = null;\n  export let emoji = null;\n  export let username = null;\n  export let size = 102;\n  export let color = \"#000\";\n  export let className = \"\";\n  export let style = \"\";\n  export let radius = 0;\n</script>\n\n<style lang=\"scss\">.avatar {\n  background-size: cover;\n  background-position: center; }\n\n.letter {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  z-index: 102;\n  font-size: 51px;\n  color: rgba(0, 0, 0, 0.8);\n  text-shadow: 0px 1px 1px rgba(255, 255, 255, 0.5); }\n  .letter.emoji-letter {\n    white-space: pre;\n    color: black; }\n\n.letter.just-letter {\n  color: #fff !important;\n  text-shadow: 0px 2px 3px rgba(0, 0, 0, 0.3); }\n\n.dymoji-wrapper {\n  position: absolute !important;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  display: flex; }\n\n.n-ball {\n  position: relative;\n  display: inline-block; }\n  .n-ball.frame {\n    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.16);\n    border-radius: 32%;\n    overflow: hidden; }\n</style>\n\n<div\n  class=\"n-ball {className}\"\n  style=\"width:{size}px; height:{size}px; {radius ? `border-radius:${size * radius}px; overflow:hidden;` : ''}\n  {style}\">\n  {#if avatar}\n    <div class=\" avatar\" style=\"background-image:url({avatar}); width:{size}px; height:{size}px\" />\n  {:else if emoji}\n    <div class=\" letter emoji-letter\" style=\"font-size: {size * 0.5}px; width:{size}px; height:{size}px; {color ? `color:${color}` : ''} \">\n      {emoji}\n    </div>\n  {:else if username}\n    <div class=\"dymoji-wrapper\">\n      <div class=\"letter just-letter\" style=\"letter-spacing: 0 !important; font-size: {size * 0.5}px; {color ? `color:${color}` : ''}\">\n        {username.substr(0, 2).toUpperCase()}\n      </div>\n      <Dymoji {username} {size} radius={0.32} />\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  export let positivity = 0;\n  export let score = 0;\n\n  let changed = false;\n\n  let lastScore;\n  $: if (score !== lastScore) {\n    lastScore = score;\n    changed = true;\n    setTimeout(() => {\n      changed = false;\n    }, 200);\n  }\n</script>\n\n<style lang=\"scss\">.score.negative {\n  background-color: var(--color-red);\n  box-shadow: 0px 10px 10px -5px rgba(233, 65, 81, 0.4) !important; }\n\n.score.positive {\n  background-color: var(--color-green);\n  box-shadow: 0px 10px 10px -5px rgba(56, 168, 63, 0.4) !important; }\n\n.score {\n  transition: all 0.2s ease-in-out;\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  height: 26px;\n  min-width: 26px;\n  border-radius: 13px;\n  padding: 0 6px;\n  line-height: 26px;\n  text-align: center;\n  font-size: 13px;\n  background-color: var(--color-primary-bright);\n  box-shadow: 0px 10px 10px -5px rgba(49, 158, 215, 0.4);\n  font-weight: bold;\n  color: #fff;\n  z-index: 100; }\n  .score.negative {\n    background-color: var(--color-red); }\n  .score.changed {\n    transform: scale(1.2);\n    z-index: 1000; }\n  .score.popin.hidden {\n    opacity: 0; }\n</style>\n\n<div\n  class={`${changed ? 'changed' : ''} score animate popin ${positivity < 0 ? 'negative' : ''} ${positivity > 0 ? 'positive' : ''} ${score ? 'visible' : 'hidden'}`}>\n  {score}\n</div>\n",
    "<script>\n  // Components\n  import Modal from \"../../components/modal/modal.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NInput from \"../../components/input/input.svelte\";\n  import NLogListLoader from \"../../components/log-list/log-list-loader.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import ButtonGroup from \"../../components/button-group/button-group.svelte\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n  import LogItem from \"../../components/list-item-log/list-item-log.svelte\";\n  import BarChart from \"../../components/charts/bar-chart.svelte\";\n\n  // Container Items\n  import PersonCheckin from \"./person-check-in.svelte\";\n\n  // Modules / Utils\n  import tick from \"../../utils/tick/tick\";\n  import Person from \"../../modules/person/person\";\n\n  // Vendors\n  import html2canvas from \"html2canvas\";\n  import domtoimage from \"dom-to-image-chrome-fix\";\n  import dayjs from \"dayjs\";\n\n  import { LedgerStore } from \"../../store/ledger\";\n  import { Interact } from \"../../store/interact\";\n  import { PeopleStore } from \"../../store/People-store\";\n\n  let domVisible = false;\n  let avatarBase64 = null;\n\n  let activePerson;\n  let activeStats;\n  let lastActivePersonKey;\n  let activeLogs;\n\n  $: if ($Interact.People.active && lastActivePersonKey !== $Interact.People.active) {\n    lastActivePersonKey = $Interact.People.active;\n    domVisible = true;\n    activePerson = new Person($PeopleStore.People[$Interact.People.active]);\n  }\n\n  const state = {\n    view: \"check-in\",\n  };\n\n  async function deleteUser() {\n    let confirmed = await Interact.confirm(\n      `Remove ${activePerson.username}?`,\n      \"This only deletes them from your list, NO log data will be deleted.\"\n    );\n    if (confirmed) {\n      await PeopleStore.deletePerson(activePerson);\n      Interact.toast(`${activePerson.username} removed`);\n      close();\n    }\n  }\n\n  async function saveActivePerson() {\n    try {\n      await PeopleStore.savePerson(activePerson);\n      Interact.toast(\"Saved\");\n    } catch (e) {\n      Interact.alert(\"Error\", e.message);\n    }\n  }\n\n  async function getAvatarImage(imageBase64) {\n    let image = document.getElementById(\"photo-holder-image\");\n    image.src = imageBase64;\n    await tick(200);\n    let wrapper = document.getElementById(\"photo-holder\");\n    if (image.naturalHeight > image.naturalWidth) {\n      wrapper.setAttribute(\"data-orientation\", \"vertical\");\n    } else if (image.naturalHeight < image.naturalWidth) {\n      wrapper.setAttribute(\"data-orientation\", \"horizontal\");\n    } else {\n      wrapper.setAttribute(\"data-orientation\", \"square\");\n    }\n\n    try {\n      await tick(400);\n      let canvas = await html2canvas(wrapper, { width: 90, height: 90 });\n      let avatar64 = canvas.toDataURL(\"image/jpeg\", 0.2);\n      return avatar64;\n    } catch (e) {\n      alert(e.message);\n      return null;\n    }\n  }\n\n  async function close() {\n    domVisible = false;\n    await tick(200);\n    Interact.person(null);\n  }\n\n  async function loadActiveLogs() {\n    let active = $Interact.People.active;\n    activePerson = new Person($PeopleStore.People[active]);\n    activeLogs = await LedgerStore.queryPerson(active, dayjs().subtract(1, \"year\"), dayjs());\n  }\n\n  async function selectPhoto(evt) {\n    const toBase64 = (file) =>\n      new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n      });\n\n    let input = evt.target;\n    let files = evt.target.files;\n    let avatarBase64 = await toBase64(files[0]);\n    await tick(20);\n    let smallAvatar64 = await getAvatarImage(avatarBase64);\n    await tick(20);\n    document.getElementById(\"photo-holder-image\").src = null;\n    await tick(10);\n    activePerson.avatar = smallAvatar64;\n  }\n\n  async function changeView(view) {\n    state.view = view;\n  }\n</script>\n\n<style lang=\"scss\">.file-input-wraper {\n  height: 1px;\n  overflow: hidden; }\n\n:global(.person-checkin .btn-group .active div) {\n  font-size: 2rem !important; }\n</style>\n\n<Modal className=\"person-modal\" bodyClass=\"bg-bg\" show={domVisible} type=\"bottom-slideup\">\n  <header class=\"w-100\" slot=\"header\" on:swipedown={close}>\n    <NToolbarGrid>\n      <button slot=\"left\" class=\"btn btn-clear btn-icon tap-icon\" on:click={close}>\n        <NIcon name=\"close\" />\n      </button>\n      <div class=\"main\">\n        <div class=\"n-row\">\n          <Dymoji person={activePerson} size={26} radius={0.3} />\n          &nbsp; {activePerson.getDisplayName()}\n        </div>\n      </div>\n      <button\n        slot=\"right\"\n        class=\"btn btn-sm tap-icon\"\n        on:click={() => {\n          close();\n          Interact.openStats(`@${activePerson.getUsername()}`);\n        }}>\n        <NIcon name=\"chart\" size=\"22\" />\n      </button>\n\n    </NToolbarGrid>\n    <NToolbar>\n      <ButtonGroup\n        size=\"sm\"\n        buttons={[{ label: 'Logs', active: state.view === 'logs', click() {\n              changeView('logs');\n            } }, { label: 'Check-In', active: state.view === 'check-in', click() {\n              changeView('check-in');\n            } }, { label: 'Edit', active: state.view === 'edit', click() {\n              changeView('edit');\n            } }]} />\n    </NToolbar>\n  </header>\n\n  <main>\n    {#if state.view == 'check-in'}\n      <PersonCheckin on:checkedIn={close} />\n    {:else if state.view == 'edit'}\n      <div class=\"edit p-3\">\n\n        <NInput type=\"text\" className=\"mb-2\" placeholder=\"Display Name\" bind:value={activePerson.displayName} />\n        <NInput type=\"textarea\" placeholder=\"Notes\" className=\"mb-2\" bind:value={activePerson.notes} />\n\n        <NItem className=\"bg-transparent p-0\">\n          <div\n            slot=\"left\"\n            on:click={() => {\n              document.getElementById('avatarFileInput').click();\n            }}>\n            {#if activePerson.avatar}\n              <Dymoji avatar={activePerson.avatar} size={50} radius={0.3} />\n            {:else}\n              <Dymoji username={activePerson.displayName} size={50} radius={0.3} />\n            {/if}\n          </div>\n\n          <button\n            class=\"btn btn-fill btn-light btn-block\"\n            on:click={() => {\n              document.getElementById('avatarFileInput').click();\n            }}>\n            Select Photo...\n          </button>\n          <div class=\"file-input-wraper\">\n            <input\n              class=\"form-control pb-2\"\n              id=\"avatarFileInput\"\n              placeholder=\"Avatar\"\n              type=\"file\"\n              accept=\"png,jpeg,jpg\"\n              on:change={selectPhoto} />\n          </div>\n\n        </NItem>\n\n        <button class=\"btn btn-block btn-primary mt-5 mb-2\" on:click={saveActivePerson}>Save @{activePerson.username}</button>\n\n        <NItem className=\"bg-transparent text-solid-3 text-sm text-center\" on:click={deleteUser}>Delete @{activePerson.username}...</NItem>\n      </div>\n    {:else if state.view == 'logs'}\n      <NLogListLoader compact term={`@${activePerson.username}`} />\n    {/if}\n  </main>\n\n</Modal>\n",
    "<script>\n  /**\n   * Brace yourself - this is a massive file\n   *\n   * Board / Home / MainView\n   * This monolith is basically the sum of all nomie.\n   * It should be broken down into more managable chunks over time.\n   * but for now, this is where all tracking and managing of your boards\n   * happens. God speed.\n   *\n   * Brnadon\n   */\n\n  // svelte\n  import { navigate } from \"svelte-routing\";\n  import { onMount, onDestroy } from \"svelte\";\n  import dayjs from \"dayjs\";\n  import { fade, fly } from \"svelte/transition\";\n\n  // Components\n  import NTrackerButton from \"./tracker-button.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import Icon from \"../../components/icon/icon.svelte\";\n  import NSearchBar from \"../../components/search-bar/search-bar.svelte\";\n  import NModal from \"../../components/modal/modal.svelte\";\n  import LogoType from \"../../components/logo/logo.svelte\";\n  import NTip from \"../../components/tip/tip.svelte\";\n  import CaptureLog from \"../../components/capture-log.svelte\";\n  import Spinner from \"../../components/spinner/spinner.svelte\";\n  import NBoardTabs from \"../../components/board-tabs/board-tabs.svelte\";\n\n  // Containers\n  import NLayout from \"../../containers/layout/layout.svelte\";\n  import BoardSortModal from \"../../containers/board/board-sort.svelte\";\n\n  // Modules/Libs/Utils\n  import Tracker from \"../../modules/tracker/tracker\";\n  import NomieLog from \"../../modules/nomie-log/nomie-log\";\n  import StarterPacks from \"../../modules/packs/starter-packs\";\n  import math from \"../../utils/math/math\";\n  import Logger from \"../../utils/log/log\";\n  import NomieUOM from \"../../utils/nomie-uom/nomie-uom\";\n  import tick from \"../../utils/tick/tick\";\n  import TrackerInputer from \"../../modules/tracker/tracker-inputer\";\n  import ScoreTracker from \"../../modules/scoring/score-tracker\";\n\n  // data\n  import tips from \"../../config/tips\";\n\n  //Stores\n  import { ActiveLogStore } from \"../../store/active-log\";\n  import { LedgerStore } from \"../../store/ledger\";\n  import { UserStore } from \"../../store/user-store\";\n  import { BoardStore } from \"../../store/boards\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { Interact } from \"../../store/interact\";\n  import { Lang } from \"../../store/lang\";\n  import { TrackerLibrary } from \"../../store/tracker-library\";\n  import { LastUsed } from \"../../store/last-used\";\n  import Button from \"../../components/button/button.svelte\";\n  import Text from \"../../components/text/text.svelte\";\n  import exportData from \"../../modules/export/export-helper\";\n\n  import OfflineQueue from \"../../components/offline-queue/offline-queue.svelte\";\n  import TimeSelect from \"../../components/date-time-bar/time-select.svelte\";\n  import NPaths from \"../../paths\";\n  import { Device } from \"../../store/device-store\";\n\n  // Consts\n  const console = new Logger(\"board.svelte\");\n\n  // Local Vars\n  let user = undefined; // will hold the user when the user is ready - basically a ready var\n  let today = {}; // holds today's activities\n  let searchInput; // binding to dom element\n  let foundTrackers = null; // for search results\n  let boardTrackers = []; // Actual array to display to user\n  let daysSinceLastBackup = 0;\n  // Browser Title\n  let appTitle = \"(Loading)\";\n  let _elSearchBar;\n\n  // Data Storage\n  let state = {\n    selectedTracker: null, // populated when user tabs tracker\n    showStartPacks: false, // shows the start library\n    savingTrackers: [], // to highlight trackers that are being saved\n    addedTrackers: [], // Visually showing what trackers are in the notes field\n    searching: false, // if the user is searching\n    searchTerm: null, // the search term the user is typing\n    activeTip: 0, // index of the current tip to show\n    hideTips: false, // temp hide - it will stop showing after 12 launches.\n  };\n\n  /**\n   * isReady\n   * Holder of the state for each req store\n   * boards, trackers and ledger need to be loaded\n   * before we can render the page. If the user is\n   * using blockstack, this could take a little bit\n   **/\n  let isReady = {\n    boards: false,\n    trackers: false,\n    ledger: false,\n    done: false,\n    checking: false,\n  };\n\n  // Check if it's ready\n  const checkIfReady = (requester) => {\n    if (isReady.done == false) {\n      if (isReady.boards && $TrackerStore.trackers && isReady.ledger) {\n        isReady.done = true;\n        setTimeout(() => {\n          setBoardTrackers();\n        }, 20);\n      }\n    }\n  };\n\n  $: if ($UserStore.meta) {\n    daysSinceLastBackup = dayjs().diff(dayjs(new Date(user.meta.lastBackup || null)), \"day\");\n  }\n\n  /**\n   * Add some tips to help new users\n   * This will stop showing after 12 nomie launches\n   **/\n\n  // Wait for the User to be ready\n  UserStore.onReady(() => {\n    // Set user to kick off top view conditional.\n    user = $UserStore; // Kick off\n\n    // Setup Hooks These will fire on before safe, and onLogSave\n    LedgerStore.hook(\"onBeforeSave\", (log) => {\n      state.savingTrackers = log.getMeta().trackers.map((t) => t.id);\n    });\n    LedgerStore.hook(\"onLogSaved\", (log) => {\n      // Clear saving states\n      state.savingTrackers = [];\n      state.searching = false;\n      state.addedTrackers = [];\n    });\n  });\n\n  function editBoard() {\n    if (!$BoardStore.activeBoard) {\n      navigate(NPaths.routes.board(\"all\"));\n    } else {\n      navigate(NPaths.routes.board($BoardStore.activeBoard.id));\n    }\n  }\n  async function deleteBoard() {\n    if ($BoardStore.activeBoard) {\n      await BoardStore.deleteConfirm($BoardStore.activeBoard);\n    }\n  }\n\n  function setBoardTrackers() {\n    /** If its the ALL Board we need to handle it different **/\n    if ($BoardStore.active == \"all\") {\n      appTitle = \"All\";\n      // Get the All Board\n      let allBoard = $BoardStore.boards.find((b) => b.id == \"all\");\n      let boardSort = allBoard ? allBoard.trackers : [];\n      // // Loop over Tracker store - sorting by boardSort\n      boardTrackers = Object.keys($TrackerStore.trackers)\n        .sort((a, b) => {\n          if (boardSort.indexOf(a) > boardSort.indexOf(b)) {\n            return 1;\n          } else if (boardSort.indexOf(a) < boardSort.indexOf(b)) {\n            return -1;\n          } else {\n            return a > b ? 1 : -1;\n          }\n        })\n        .map((tag) => {\n          return $TrackerStore.trackers[tag];\n        })\n        // Remove any nulls\n        .filter((tracker) => tracker);\n    } else {\n      /**\n       * Else we have a real board and need to render it.\n       */\n\n      // Get Board Trackers from active Board\n      appTitle = ($BoardStore.activeBoard || {}).label || \"\";\n      // Get trackers from activeBoard\n      boardTrackers = (($BoardStore.activeBoard || {}).trackers || [])\n        .map(\n          (tag) => {\n            return $TrackerStore.trackers[tag];\n          }\n          // Remove any nulls\n        )\n        .filter((tracker) => tracker);\n    }\n  }\n\n  async function boardOptions() {\n    let buttons = [\n      {\n        title: \"Add a Tracker\",\n        async click() {\n          await tick(500);\n          methods.addButtonTap();\n        },\n      },\n      {\n        title: \"Edit / Reorder\",\n        async click() {\n          editBoard();\n        },\n      },\n      {\n        title: \"Delete Tab...\",\n        disabled: $BoardStore.active === \"all\",\n        async click() {\n          deleteBoard();\n        },\n      },\n    ];\n\n    Interact.popmenu({\n      title: `${$BoardStore.activeBoard ? $BoardStore.activeBoard.label : \"All Trackers\"}`,\n      description: \"Tab Options\",\n      buttons: buttons,\n    });\n  }\n\n  // Component Methods\n  const methods = {\n    // When user starts searching\n    searchKeypress() {\n      // Find trackers matching query\n      foundTrackers = Object.keys($TrackerStore.trackers)\n        .map((tag) => {\n          return $TrackerStore.trackers[tag];\n        })\n        .filter((tracker) => {\n          // Search the tag and the label\n          let regex = new RegExp((state.searchTerm || \"\").trim(), \"gi\");\n          return `${tracker.tag}-${tracker.label}`.search(regex) > -1;\n        });\n    },\n    // Toggle if the user is searching or not.\n    async toggleSearch() {\n      if (state.searching) {\n        methods.stopSearch();\n      } else {\n        state.searching = true;\n        await tick(200);\n        if (_elSearchBar) {\n          _elSearchBar.focus();\n        }\n      }\n    },\n    stopSearch() {\n      state.searchTerm = null;\n      state.searching = false;\n      foundTrackers = null;\n    },\n    // When the user wants to add a new tracker\n    addButtonTap() {\n      let buttons = [];\n      // Add Library Button\n      buttons.push({\n        title: Lang.t(\"board.browse-starter-trackers\"),\n        click() {\n          TrackerLibrary.toggle();\n        },\n      });\n      // If NOT \"all\" Board\n      if ($BoardStore.active != \"all\") {\n        // Add \"Existing Tracker\" button\n        buttons.push({\n          title: Lang.t(\"board.add-existing-tracker\"),\n          click: async () => {\n            let trackers = await Interact.selectTrackers();\n\n            BoardStore.addTrackersToActiveBoard(trackers);\n            setTimeout(() => {\n              state = state;\n            }, 100);\n          },\n        });\n      }\n      // Add \"Create Tracker\" button\n      buttons.push({\n        title: Lang.t(\"board.create-custom-tracker\"),\n        click() {\n          // methods.trackerEditor();\n          navigate(\"/tracker/design\");\n        },\n      });\n\n      buttons.push({\n        title: \"Import from file\",\n        click() {\n          TrackerStore.importFromFile();\n        },\n      });\n\n      // Show Menu\n      Interact.popmenu({\n        buttons: buttons,\n      });\n    },\n    /**\n     * Inject the \"All\" board automatically\n     * In past versions, managing this was a nightmare\n     * Now i just add it on dynamically\n     */\n    injectAllBoard(boards) {\n      // Get boards passed\n      boards = boards || [];\n      // Clone the board;\n\n      let allBoard = $BoardStore.boards.find((b) => b.id == \"all\") || {\n        id: \"all\",\n        label: \"All\",\n        trackers: Object.keys($TrackerStore.trackers || {}),\n      };\n      let b = boards.filter((b) => b.id !== \"all\");\n\n      b.unshift(allBoard);\n      return b;\n    },\n\n    /**\n     * Control Tracker Editor\n     */\n    trackerEditor() {\n      Interact.editTracker().then((tracker) => {\n        BoardStore.addTracker(tracker);\n      });\n    },\n\n    /**\n     * Create a new board\n     * This will prompt the user to input a name\n     * then create the new board\n     */\n    async newBoard() {\n      let res = await Interact.prompt(Lang.t(\"board.add-a-board\"), Lang.t(\"board.add-a-board-description\"), {\n        placeholder: Lang.t(\"board.board-input-placeholder\"),\n      });\n      if (res) {\n        let label = res.trim();\n        if (label.toLowerCase() !== \"all\") {\n          BoardStore.addBoard(label).then((board) => {\n            BoardStore.setActive(board.id);\n          });\n        } else {\n          Interact.alert(\"Error\", \"Sorry, All is a reserved named\");\n        }\n      }\n    },\n    // Settings Shortcut - enable boards - tap on logo\n    async enableBoards() {\n      $UserStore.meta.boardsEnabled = true;\n      await UserStore.saveMeta();\n      methods.newBoard();\n    },\n\n    async trackerTapped(tracker) {\n      let inputer = new TrackerInputer(tracker, $TrackerStore);\n      let note = await inputer.getElements();\n\n      if (note.length) {\n        ActiveLogStore.addElement(note.join(\" \"));\n        if (inputer.lastAction == \"save\" || tracker.one_tap) {\n          await LedgerStore.saveLog($ActiveLogStore);\n          await ActiveLogStore.clear();\n        }\n      }\n\n      return note;\n    },\n\n    /**\n     * Get Tracker Value\n     * Used to get the current value of today for a given tracker\n     * This will total or avg their values depending on the tracker calcuate\n     */\n    getTrackerValue(tracker) {\n      // Default to null\n      let value = null;\n\n      // Does this tracker exist in today's map?\n      if (today.hasOwnProperty(tracker.tag)) {\n        // What type of Math should we do?\n        if (tracker.math === \"sum\") {\n          // Sum it up!\n          value = math.round(math.sum(today[tracker.tag].values));\n        } else {\n          // Round things!\n          value = math.round(math.average(today[tracker.tag].values));\n        }\n      }\n      return value ? NomieUOM.format(value, tracker.uom) : null;\n    },\n    getPositivity(tracker) {\n      let value = methods.getTrackerValue(tracker);\n      value = value || 0;\n      return ScoreTracker(value, tracker);\n    },\n    /**\n     * Get Hours Used\n     * Used for generating the time-balls on the trackers\n     * It maybe shouldn't be here, but it is for now\n     */\n    getHoursUsed(tracker) {\n      if (today.hasOwnProperty(tracker.tag)) {\n        return today[tracker.tag].hours;\n      } else {\n        return [];\n      }\n    },\n    // Show Tracker Options\n    showTrackerOptions(tracker) {\n      // Make it a real tracker in case it's not - doubling up shouldn't be a problem.\n      tracker = new Tracker(tracker);\n\n      // Remove Tracker Button Prompts\n      const removeButton = {\n        title: `${Lang.t(\"general.remove\")}...`,\n        async click() {\n          // If we're on All - warn the hell out of the user\n          if ($BoardStore.active === \"all\") {\n            const confirmed = Interact.confirm(\n              Lang.t(\"general.delete-from-nomie\", { thing: tracker.label }),\n              Lang.t(\"tracker.delete-description\")\n            );\n            if (confirmed) {\n              TrackerStore.deleteTracker(tracker).then((done) => {});\n            }\n          } else {\n            // We're on another board - allow them to just remove the tracker\n            const confirmed = Interact.confirm(`Remove ${tracker.label} from this board?`, \"You can always re-add it later\");\n            if (confirmed) {\n              BoardStore.removeTrackerFromBoard(tracker, $BoardStore.active);\n            }\n          }\n        },\n      };\n\n      // If a Last Used is present\n      let subtitle;\n      if ($LastUsed.hasOwnProperty(tracker.tag)) {\n        let last = $LastUsed[tracker.tag];\n        if (last.log) {\n          subtitle = `${Lang.t(\"board.last-used\", \"Last used\")} ${dayjs(last.date).fromNow()}`;\n        }\n      }\n      // Add Remove button to array\n      TrackerStore.trackerOptions(tracker, {\n        title: `${tracker.emoji || \"⚪️\"} ${tracker.label || tracker.tag}`,\n        description: subtitle,\n        buttons: [removeButton],\n      });\n      // Fire Pop menu\n    }, // end showTrackerOptions\n  };\n\n  let boardUnsub;\n  let ledgerUnsub;\n  let activeLogUnsub;\n  let trackerUnsub;\n  let lastTrackers;\n\n  onMount(() => {\n    Device.scrollToTop();\n    trackerUnsub = TrackerStore.subscribe((trackerStore) => {\n      setTimeout(() => {\n        boardTrackers = boardTrackers;\n        setBoardTrackers();\n      }, 120);\n    });\n\n    // Wait for changes to happen to the boardstore\n    boardUnsub = BoardStore.subscribe((boardPayload) => {\n      isReady.boards = true;\n      checkIfReady(\"boardPayload\");\n      // If the board is ready, and it changes\n      // Refire the setBoard Trackers for the new changes\n      if (isReady.done) {\n        setBoardTrackers();\n      }\n      /**\n       * Board Check\n       * If this board doesn't exist (user clears localstorage, switching data store, imports etc)\n       * then we should set it to the ALL board\n       **/\n      if (boardPayload.boards.map((b) => b.id).indexOf(boardPayload.active) == -1 && boardPayload.active !== \"all\") {\n        setTimeout(() => {\n          BoardStore.setActive(\"all\");\n        }, 100);\n      }\n    });\n\n    // Ledger Store Change\n    ledgerUnsub = LedgerStore.subscribe((ledgerPayload) => {\n      // If it's not saving\n      if (!ledgerPayload.saving) {\n        isReady.ledger = true; // say it's true\n        checkIfReady(\"ledgerPayload\"); // check for others\n        setTimeout(() => {\n          today = ledgerPayload.today;\n          foundTrackers = foundTrackers; // force reaction\n          boardTrackers = boardTrackers; // force reaction\n        }, 100);\n      }\n    });\n\n    // Active Log Change\n    activeLogUnsub = ActiveLogStore.subscribe((log) => {\n      state.addedTrackers = new NomieLog(log).getMeta().trackers.map((t) => t.id);\n    });\n    LedgerStore.getToday();\n  }); // end onMount\n\n  onDestroy(() => {\n    boardUnsub();\n    ledgerUnsub();\n    activeLogUnsub();\n    trackerUnsub();\n  });\n</script>\n\n<style type=\"text/scss\" name=\"scss\">@media (max-width: 599.98px) {\n  .container {\n    padding-left: 0 !important;\n    padding-right: 0 !important; } }\n\n@media (min-width: 980px) {\n  .container.board-container {\n    max-width: 90% !important; } }\n\n@media (min-width: 600px) {\n  :global(.n-board .tracker-button-wrapper) {\n    margin: 8pt; } }\n\n.n-board {\n  padding: 0px 0px;\n  min-height: 50vh;\n  display: flex;\n  flex-direction: column; }\n  @media (min-width: 600px) {\n    .n-board {\n      padding-top: 20px; } }\n  .n-board .new-user {\n    font-size: 0.7rem;\n    max-width: 280px;\n    border-radius: 30px;\n    background-color: transparent;\n    border: var(--modal-border);\n    color: var(--color-inverse-2);\n    margin: 10px auto;\n    padding: 6px 20px;\n    line-height: 115%;\n    flex-grow: 0; }\n    .n-board .new-user .main {\n      text-align: center; }\n    .n-board .new-user .btn:active {\n      color: var(--color-inverse); }\n\n.no-trackers {\n  min-height: 300px;\n  height: 50vh;\n  display: flex;\n  color: var(--color-solid-3);\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n\n:global(.board-edit-button) {\n  display: flex;\n  align-items: center;\n  padding: 0px 16px;\n  justify-content: center;\n  min-width: 40px;\n  min-height: 40px;\n  height: 40px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  border-radius: 20px;\n  font-size: 16px;\n  background-color: var(--color-solid-2);\n  color: var(--color-inverse-1) !important; }\n\n:global(.board-actions) {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 16px auto;\n  margin-bottom: 32px;\n  padding: 0 10px;\n  max-width: 250px; }\n</style>\n\n<!-- Start App Layout -->\n<NLayout pageTitle={appTitle}>\n  <header slot=\"header\">\n    {#if $BoardStore.boards.length || $UserStore.meta.boardsEnabled}\n      <div class=\"container p-0 n-row h-100\">\n        {#if $TrackerStore.timers.length}\n          <button class=\"btn tab tap-icon pl-3 pr-1\" on:click={TrackerStore.toggleTimers}>\n            <Icon name=\"time\" size={24} className=\"fill-red-pulse\" />\n          </button>\n        {/if}\n        <!-- IF MORE THAN 13 TRACKERS - SHOW SEARCH ICON-->\n        {#if Object.keys($TrackerStore.trackers).length > 13}\n          <button class=\"btn tab tap-icon pr-2 {$TrackerStore.timers.length ? 'pl-1' : ''}\" on:click={methods.toggleSearch}>\n            <Icon name=\"search\" size={24} className={state.searching ? 'fill-red' : ''} />\n          </button>\n        {:else}\n          <div class=\"pr-2\" />\n        {/if}\n\n        <NBoardTabs\n          boards={methods.injectAllBoard($BoardStore.boards || [])}\n          active={$BoardStore.active}\n          on:create={methods.newBoard}\n          on:tabTap={(event) => {\n            methods.stopSearch();\n            BoardStore.setActive(event.detail.id, event.detail);\n          }}>\n          <div slot=\"right\" class=\"n-row ml-2\">\n            <div class=\"filler\" />\n            <Button\n              color=\"transparent\"\n              icon\n              className=\"mx-2 mr-3 tap-icon\"\n              on:click={() => {\n                methods.newBoard();\n              }}>\n              <Icon name=\"newTab\" size=\"24\" />\n            </Button>\n            {#if $BoardStore.boards.length > 2}\n              <Button\n                color=\"transparent\"\n                icon\n                className=\"px-2 tap-icon\"\n                on:click={() => {\n                  Interact.toggleBoardSorter();\n                }}>\n                <Icon name=\"arrowsLeftRight\" size=\"24\" />\n              </Button>\n            {/if}\n          </div>\n        </NBoardTabs>\n\n      </div>\n    {:else}\n      <NToolbarGrid>\n        <div slot=\"left\">\n          {#if $TrackerStore.timers.length}\n            <button class=\"btn tool tap-icon pl-2\" on:click={TrackerStore.toggleTimers}>\n              <Icon name=\"time\" size={20} className=\"fill-red-pulse\" />\n            </button>\n          {/if}\n        </div>\n        <div slot=\"main\" class=\"align-items-center\">\n          <LogoType size={20} on:click={methods.enableBoards} />\n        </div>\n        <button slot=\"right\" class=\"btn btn-clear btn-icon tap-icon\" on:click={methods.enableBoards}>\n          <Icon name=\"newTab\" size=\"20\" />\n        </button>\n      </NToolbarGrid>\n    {/if}\n  </header>\n  <!-- end header-->\n  <div slot=\"content\" class=\"container board-container\">\n\n    {#if state.searching}\n      <div class=\"px-2\">\n        <NSearchBar\n          bind:this={_elSearchBar}\n          className=\"mt-2\"\n          autocomplete\n          on:clear={() => {\n            state.searchTerm = null;\n          }}\n          on:change={(value) => {\n            state.searchTerm = value.detail;\n            methods.searchKeypress();\n          }}\n          placeholder=\"{Lang.t('general.search-trackers', 'Search Trackers')}...\">\n          <button slot=\"right-inside\" class=\"btn btn-clear\" on:click={methods.toggleSearch}>\n            <Icon name=\"close\" className=\"fill-faded-2\" />\n          </button>\n        </NSearchBar>\n      </div>\n    {/if}\n    {#if user}\n      {#if !isReady.done}\n        <div class=\"empty-notice\">\n          <Spinner />\n        </div>\n      {:else}\n        {#if daysSinceLastBackup > 6 && $UserStore.launchCount > 10 && $UserStore.storageType == 'local' && $UserStore.meta.hideBackup == false}\n          <div class=\"container-sm\">\n            <div class=\"backup pt-2 pb-1 text-center\">\n              <!--- If it's way back - it's not really set-->\n              {#if daysSinceLastBackup > 1000}\n                <Text inline size=\"sm\" faded>No known backups</Text>\n              {:else}\n                <Text inline size=\"sm\" faded>{daysSinceLastBackup} days since last backup</Text>\n              {/if}\n              <Text inline underline color=\"primary-bright\" className=\"ml-2\" size=\"sm\" on:click={exportData}>Backup Now</Text>\n            </div>\n          </div>\n        {/if}\n        <OfflineQueue />\n        <main class=\"n-board h-100\" on:swipeleft={BoardStore.next} on:swiperight={BoardStore.previous}>\n          {#if $TrackerStore.showTimers && $TrackerStore.timers.length}\n            <div class=\"trackers n-grid framed mt-2\" style=\"min-height:auto\">\n              {#each TrackerStore.state.runningTimers() as tracker}\n                <NTrackerButton\n                  {tracker}\n                  value={methods.getTrackerValue(tracker)}\n                  hoursUsed={methods.getHoursUsed(tracker)}\n                  positivity={methods.getPositivity(tracker)}\n                  on:click={() => {\n                    methods.trackerTapped(tracker);\n                  }}\n                  disabled={state.savingTrackers.indexOf(tracker.tag) > -1}\n                  className={`${state.addedTrackers.indexOf(tracker.tag) > -1 ? 'added pulse' : ''} ${state.savingTrackers.indexOf(tracker.tag) > -1 ? 'wiggle saving' : ''}`}\n                  on:longpress={() => {\n                    methods.showTrackerOptions(tracker);\n                  }} />\n              {/each}\n              <button class=\"btn-close\" on:click={TrackerStore.hideTimers}>\n                <Icon name=\"chevronUp\" className=\"fill-inverse\" />\n              </button>\n            </div>\n          {/if}\n          <!-- Loop over trackers -->\n          <div class=\"trackers n-grid\">\n\n            {#if (foundTrackers || boardTrackers || []).length === 0}\n              {#if foundTrackers != null}\n                <div class=\"no-trackers\">{Lang.t('board.no-search-results', 'No trackers found')}</div>\n              {/if}\n            {/if}\n            <!-- lastUsed={methods.getLastUsed(tracker)} -->\n            {#each foundTrackers || boardTrackers as tracker}\n              <NTrackerButton\n                {tracker}\n                value={methods.getTrackerValue(tracker)}\n                hoursUsed={methods.getHoursUsed(tracker)}\n                positivity={methods.getPositivity(tracker)}\n                on:click={() => {\n                  methods.trackerTapped(tracker);\n                }}\n                disabled={state.savingTrackers.indexOf(tracker.tag) > -1}\n                className={`${state.addedTrackers.indexOf(tracker.tag) > -1 ? 'added pulse' : ''} ${state.savingTrackers.indexOf(tracker.tag) > -1 ? 'wiggle saving' : ''}`}\n                on:longpress={() => {\n                  methods.showTrackerOptions(tracker);\n                }} />\n            {/each}\n            {#if !state.searching && $BoardStore.active !== '_timers'}\n              <NTrackerButton\n                on:click={methods.addButtonTap}\n                tracker={{ label: Lang.t('tracker.add-tracker', 'Add Tracker'), emoji: '➕' }} />\n            {/if}\n          </div>\n\n          <!-- <div class=\"board-actions\">\n            <button on:click={editBoard} style=\"color:#FFF\" class=\"btn btn btn-round board-edit-button clickable\">\n              <Text>Edit Tab</Text>\n            </button>\n          </div> -->\n\n          <!-- Include User Tips - shit should be a component -->\n\n        </main>\n        <div class=\"board-actions mt-5 mb-2\" style=\"min-width:140px;\">\n          <div class=\"btn-group filler\">\n            <Button on:click={boardOptions} color=\"clear\">\n              <Text size=\"sm\">{Lang.t('general.options', 'Options')}</Text>\n              <Icon name=\"chevronDown\" size={14} className=\"ml-1\" />\n            </Button>\n          </div>\n\n        </div>\n        <NTip {tips} />\n      {/if}\n    {/if}\n  </div>\n  <!-- End -->\n  <div slot=\"footer\">\n    <div id=\"note-capture\">\n      <CaptureLog />\n    </div>\n  </div>\n  <!-- end content-->\n</NLayout>\n\n{#if $Interact.boardSorter.show}\n  <BoardSortModal />\n{/if}\n\n{#if state.showStartPacks}\n  <NModal title=\"Starter Packs\">\n    <div slot=\"header\">\n      <NBoardTabs boards={StarterPacks.methods.asArray()} />\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  import Icon from \"../../components/icon/icon.svelte\";\n\n  // svelte\n  import { createEventDispatcher } from \"svelte\";\n\n  import TrackerBall from \"../../components/tracker-ball/tracker-ball.svelte\";\n\n  // modules\n  import Tracker from \"../../modules/tracker/tracker\";\n  import TimeBalls from \"../../components/time-balls/time-balls.svelte\";\n\n  // Components\n  import Counter from \"../../components/counter/counter.svelte\";\n  import { Interact } from \"../../store/interact\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n\n  // Props\n  export let tracker = new Tracker();\n  export let value = null;\n  // export let refreshing = false;\n  export let id = undefined;\n  export let className = undefined;\n  export let disabled = undefined;\n  export let hoursUsed = [];\n  // export let hideMore = false;\n  // export let lastUsed = null; // or dayjs object\n  export let positivity = 0;\n\n  // Define Dispatch\n  const dispatch = createEventDispatcher();\n\n  let data = {\n    pressing: false,\n  };\n\n  let timeout = null;\n  // Functions\n  const methods = {\n    // Clicked\n    click() {\n      dispatch(\"click\", {});\n    },\n    moreClicked(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n\n      methods.longPress();\n    },\n    rightclick(evt) {\n      evt.preventDefault();\n      return false;\n    },\n    longPress() {\n      dispatch(\"longpress\", {});\n    },\n    // On Mouse Release / Touch Stop\n    mouseup() {\n      data.pressing = false;\n    },\n    mousedown() {\n      data.pressing = true;\n    },\n  };\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">:global(.tracker-button-wrapper .more) {\n  position: absolute;\n  top: 18px;\n  right: 20px;\n  z-index: 1400;\n  padding: 0px;\n  height: 25px;\n  border-radius: 12px; }\n\n:global(.tracker-button-wrapper .more svg) {\n  stroke: var(--color-solid-2) !important; }\n\n.tracker-ball svg {\n  display: none; }\n\n.tracker-ball .countdown {\n  z-index: 202;\n  font-size: 1rem; }\n\n.tracker-button-wrapper {\n  border-radius: 40px;\n  position: relative; }\n</style>\n\n<div\n  on:click={methods.click}\n  on:longtap={methods.longPress}\n  on:mousedown={methods.mousedown}\n  on:touchend={methods.mouseup}\n  on:contextmenu={methods.rightclick}\n  on:mouseout={methods.mouseup}\n  on:mouseup={methods.mouseup}\n  class=\"tracker-button-wrapper tracker-{tracker.tag}\n  {data.pressing ? 'pressing' : ''}\n  {className}\n  {disabled ? 'disabled' : ''}\">\n  <!-- <button\n    class=\"btn btn-clear more\"\n    on:click|preventDefault={(evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      TrackerStore.trackerOptions(tracker);\n    }}>\n    <Icon name=\"pieChart\" size=\"16\" />\n  </button> -->\n  <TrackerBall {id} {tracker} score={value} {positivity}>\n    {#if tracker.started}\n      <div class=\"center countdown\">\n        <Counter started={tracker.started} />\n      </div>\n    {/if}\n    {#if hoursUsed.length}\n      <div class=\"balls\">\n        <TimeBalls hours={hoursUsed} />\n      </div>\n    {/if}\n    {#if tracker.one_tap}\n      <div class=\"one-tap\" />\n    {/if}\n  </TrackerBall>\n\n</div>\n<!-- last.log.end -->\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { navigate, Router, Route } from \"svelte-routing\";\nimport { onMount, onDestroy } from \"svelte\";\nimport dayjs from \"dayjs\";\n;\nimport WidgetEle from \"./widget.svelte\";\nimport WidgetEditor from \"./widget-editor.svelte\";\nimport Button from \"../../components/button/button.svelte\";\nimport Icon from \"./../../components/icon/icon.svelte\";\nimport ListItem from \"./../../components/list-item/list-item.svelte\";\nimport Modal from \"../../components/modal/modal.svelte\";\nimport NText from \"../../components/text/text.svelte\";\nimport SortableList from \"./../../components/sortable-list/sortable-list.svelte\";\nimport Stepper from \"../../components/stepper/stepper.svelte\";\nimport Text from \"./../../components/text/text.svelte\";\nimport TrackerSmallBlock from \"./../../components/tracker-ball/tracker-small-block.svelte\";\nimport StatsProcessor from \"../../modules/stats/statsV5\";\nimport { Widget } from \"../../modules/dashboard/widget\";\nimport Tracker from \"../../modules/tracker/tracker\";\nimport { positivityFromLogs } from \"../../utils/positivity/positivity\";\nimport Logger from \"../../utils/log/log\";\nconst console = new Logger(\"📊 container/dashboard.svelte\");\nimport NLayout from \"../layout/layout.svelte\";\nimport { Dashboard } from \"../../modules/dashboard/dashboard\";\nimport { Interact } from \"../../store/interact\";\nimport { DashboardStore } from \"../../store/dashboard-store\";\nimport { LedgerStore } from \"./../../store/ledger.js\";\nimport { PeopleStore } from \"./../../store/People-store.js\";\nimport { TrackerStore } from \"../../store/tracker-store\";\nimport { LastUsed } from \"../../store/last-used\";\n;\nimport HScroller from \"../../components/h-scroller/h-scroller.svelte\";\nimport Input from \"../../components/input/input.svelte\";\nimport { Lang } from \"../../store/lang\";\nimport Spinner from \"../../components/spinner/spinner.svelte\";\nimport { widgetTypes } from \"./widgetTypes\";\nimport { truncateText } from \"../../utils/text/text\";\nimport { UserStore } from \"../../store/user-store\";\nimport tick from \"../../utils/tick/tick\";\n// import { getDashboardStartEndDates } from \"./dashboard-helpers\";\nlet trackers; // holder of user Trackers - loaded from subscribe\nlet People; // holder of User People - loaded from subscribe\nlet dashboards; // holder of Dashboards\nlet unsubTrackers; // Unsubscribe from trackers\nlet unsubDashboard; // Unsubscribe from dashboard\nlet unsubPeople; // Unsubscribe from People\nlet ready = false; // Is the component Ready\nlet editingWidget; // Editing block - if defined\nlet editMode = false; // Toggle Edit mode\nlet activePage = 0; // activePage - which page we're on in the array of dasboards\n// let lastActivePage; // last Active for managing reactiveness\nlet activeDashboard = { id: \"fake\", label: \"Loading...\", widgets: [] }; // Set a default dasboard\nlet stopRefresh;\nlet loading = false;\nlet firstDayOfWeek = \"1\";\nlet dtFormat;\n/**\n * Toggle Edit more\n */\nfunction toggleEdit() {\n    editMode = !editMode;\n}\n$: firstDayOfWeek = $UserStore.meta.firstDayOfWeek;\nfunction canSave(testWidget) {\n    let type = widgetTypes.find((wdgt) => wdgt.id == testWidget.type);\n    if (type) {\n        let required = type.requires;\n        if (required.indexOf(\"element\") > -1 && !testWidget.element) {\n            throw new Error(\"Select a trackable element to display\");\n        }\n        if (required.indexOf(\"timeframe\") > -1 && !testWidget.timeRange.label) {\n            throw new Error(\"This widget requires a timeframe\");\n        }\n    }\n    else {\n        throw new Error(\"Select a Widget Type\");\n    }\n}\n/**\n * Save the Editing Block\n */\nfunction saveEditingWidget() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If we're editing something\n        if (editingWidget) {\n            try {\n                // Save block to current dashboardsIndex\n                canSave(editingWidget);\n                Interact.blocker(\"Saving...\"); // Throw shade\n                yield DashboardStore.saveWidget(editingWidget);\n                clearEditing();\n            }\n            catch (e) {\n                // Show Error\n                Interact.alert(\"Error\", e.message);\n            }\n            Interact.stopBlocker();\n        }\n        else {\n            // no Editing block? Show message\n            Interact.toast(\"Incomplete\");\n        }\n    });\n}\n/**\n * Create a New Block\n */\nfunction newWidget() {\n    return __awaiter(this, void 0, void 0, function* () {\n        editingWidget = new Widget();\n    });\n}\n/**\n * Edit a Block\n * Will show the block editor\n */\nfunction editWidget(widget) {\n    widget._editing = true;\n    editingWidget = widget;\n}\n/**\n * Get Start / End Dates from a Board\n * This will go through all blocks and find the full date range of the dasboard\n */\n// function getStartEndDates(dboard): { start: Dayjs; end: Dayjs } {\n//   return getDashboardStartEndDates(dboard);\n// }\n/**\n * Get the Logs for a widget\n */\nfunction getLogsForWidget(widget) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let logs = []; // Holder of the logs\n        let dateRange = widget.getDateRange($UserStore.meta.firstDayOfWeek); // Get Date Range for this widget.\n        let start = dateRange[0]; // get  start\n        let end = dateRange[1]; // get end\n        if (widget.type == \"streak\") {\n            start = dayjs().startOf(\"month\");\n            end = dayjs().endOf(\"month\");\n        }\n        // Get the Logs based on the Type provided\n        if (widget.element && widget.element.type == \"tracker\") {\n            // Tracker Search\n            logs = yield LedgerStore.queryTag(widget.element.id, start, end);\n        }\n        else if (widget.element && widget.element.type == \"person\") {\n            // Person Search\n            logs = yield LedgerStore.queryPerson(widget.element.id, start, end);\n        }\n        else if (widget.element && widget.element.type == \"context\") {\n            // Context Search\n            logs = yield LedgerStore.queryContext(widget.element.id, start, end);\n        }\n        else if (widget.element) {\n            // Generic Search\n            logs = yield LedgerStore.queryAll(widget.element.id, start, end);\n        }\n        return logs;\n    });\n}\nfunction getWidgetStats(widget) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let start = widget.getStartDate(firstDayOfWeek);\n        let end = widget.getEndDate(firstDayOfWeek);\n        if (widget.type == \"last-used\") {\n            if (widget.element.type == \"tracker\") {\n                widget.lastUsed = yield LastUsed.get(widget.element.id);\n            }\n            else if (widget.element.type == \"person\") {\n                let person = yield $PeopleStore.People[widget.element.id];\n                if (person) {\n                    widget.lastUsed = person.last;\n                }\n            }\n            if (widget.lastUsed) {\n                let lastUsedDay = dayjs(widget.lastUsed);\n                let daysPast = Math.abs(dayjs().diff(lastUsedDay, \"day\"));\n                widget.stats = widget.stats || {};\n                widget.stats.daysPast = daysPast;\n            }\n        }\n        else if (widget.element && widget.type != \"last-used\") {\n            widget.logs = yield getLogsForWidget(widget);\n            const statsV5 = new StatsProcessor({});\n            // Generate Stats\n            widget.math = widget.math || (widget.element.obj || {}).math || \"sum\";\n            // Get dayjs Start Date\n            const fromDate = dayjs(start);\n            const toDate = dayjs(end);\n            const dayDiff = Math.abs(fromDate.diff(toDate, \"day\"));\n            // Set Default Mode to \"Week\"\n            let mode = \"w\";\n            // Determine Stat Mode based on number of days provided\n            if (dayDiff < 8) {\n                mode = \"w\";\n            }\n            else if (dayDiff < 89) {\n                mode = \"m\";\n            }\n            else if (dayDiff < 365) {\n                mode = \"q\";\n            }\n            else if (dayDiff > 364) {\n                mode = \"y\";\n            }\n            else {\n                mode = \"m\";\n            }\n            // Setup the Config to Pass to Stats\n            const statsConfig = {\n                rows: widget.logs,\n                fromDate,\n                toDate,\n                mode,\n                math: widget.math,\n                trackableElement: widget.element,\n            };\n            // Generate the Stats\n            widget.stats = statsV5.generate(statsConfig);\n            // Generate the Positivity\n            widget.positivity = positivityFromLogs(widget.logs, widget.element);\n        }\n        widget.loading = false;\n        return widget;\n    });\n}\n/**\n * Load The Active Dashboard\n * This will take the current active dashboard from the store, loop over it, and build out\n * the data structure we need to generate each of the wigets.\n */\nfunction loadActiveDashboard() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Get the Board\n        const activeIndex = $DashboardStore.activeIndex;\n        let dboard;\n        if (dashboards.length > activeIndex) {\n            dboard = dashboards[$DashboardStore.activeIndex];\n        }\n        // Get Start and End\n        // Loop over each widget\n        if (dboard) {\n            for (let i = 0; i < dboard.widgets.length; i++) {\n                // Set the widget\n                const widget = dboard.widgets[i] instanceof Widget ? dboard.widgets[i] : new Widget(dboard.widgets[i]);\n                let start = widget.getStartDate(firstDayOfWeek);\n                let end = widget.getEndDate(firstDayOfWeek);\n                widget.dateFormat = (dtFormat || { date: \"MMM Do YYYY\" }).date;\n                widget.timeFormat = (dtFormat || { time: \"h:mma\" }).time;\n                widget.loading = true;\n                // Replace the widget with the new populated version.\n                dboard.widgets[i] = widget;\n            }\n        }\n        else {\n            console.error(\"No DBoard Found...\");\n        }\n        activeDashboard = dboard || new Dashboard();\n        ready = true;\n        loading = false;\n        if (activeDashboard.widgets.length) {\n            for (let i = 0; i < activeDashboard.widgets.length; i++) {\n                activeDashboard.widgets[i] = yield getWidgetStats(activeDashboard.widgets[i]);\n            }\n        }\n        // Set the Active Dashboard\n    });\n}\n/**\n * Initialize the Dashboard\n */\nfunction initDashboard() {\n    // Loop over the widgets - convert them to real widgets.\n    loading = true;\n    try {\n        dashboards[$DashboardStore.activeIndex] = dashboards[$DashboardStore.activeIndex] || new Dashboard();\n        dashboards[$DashboardStore.activeIndex].widgets = dashboards[$DashboardStore.activeIndex].widgets.map((widget) => {\n            // Set widget\n            let thisWidget = widget instanceof Widget ? widget : new Widget(widget);\n            // If it's a Tracker - and the tracker exists\n            if (thisWidget.element && thisWidget.element.type == \"tracker\") {\n                thisWidget.element.obj = TrackerStore.getByTag(thisWidget.element.id);\n                // If it's a person and the person exists\n            }\n            else if (thisWidget.element && thisWidget.element.type == \"person\" && People[thisWidget.element.id]) {\n                thisWidget.element.obj = People[thisWidget.element.id];\n            }\n            return thisWidget;\n        });\n        loadActiveDashboard();\n    }\n    catch (e) {\n        Interact.alert(\"Error\", e.message);\n        console.error(e.message);\n    }\n}\n// If Something changes - update the last Active Page\n// $: if (trackers && People && dashboards && activePage !== lastActivePage) {\n//   lastActivePage = activePage;\n// }\n/**\n * Stop Editing\n */\nfunction clearEditing() {\n    editingWidget = undefined;\n}\n/**\n * Rename a Dashboard\n */\nfunction rename() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let newName = yield Interact.prompt(\"Rename Dashboard\", null, {\n            value: activeDashboard.label,\n        });\n        if (newName) {\n            $DashboardStore.dashboards[$DashboardStore.activeIndex].label = newName;\n            DashboardStore.save();\n        }\n    });\n}\n/**\n * On Mount / On Destroy\n **/\nonMount(() => {\n    dtFormat = UserStore.getDateTimeFormat();\n    unsubTrackers = TrackerStore.subscribe((tkrs) => {\n        if (tkrs.trackers) {\n            trackers = tkrs.trackers;\n        }\n    });\n    unsubPeople = PeopleStore.subscribe((pple) => {\n        if (pple.People) {\n            People = pple.People;\n        }\n    });\n    unsubDashboard = DashboardStore.subscribe((dbStore) => {\n        if (dbStore.dashboards && trackers && People) {\n            dashboards = dbStore.dashboards;\n            if (!editMode) {\n                initDashboard();\n            }\n        }\n    });\n});\nfunction done() {\n    return __awaiter(this, void 0, void 0, function* () {\n        DashboardStore.save();\n        toggleEdit();\n    });\n}\nfunction deleteDashboard() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let confirmed = yield Interact.confirm(`Delete ${activeDashboard.label} dashboard?`, \"This cannot be undone, just rebuilt.\");\n        if (confirmed) {\n            yield DashboardStore.delete(activeDashboard);\n        }\n    });\n}\nonDestroy(() => {\n    unsubTrackers();\n    unsubPeople();\n    unsubDashboard();\n});\n</script>\n\n<style lang=\"scss\">.dashboard-wrapper {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 10px 4px 16px;\n  justify-content: stretch;\n  align-content: flex-start;\n  min-height: 70vh; }\n\n.new-widget {\n  background-color: var(--color-solid);\n  box-shadow: var(--box-shadow-tight); }\n\n:global(.dashboard-widget.type-map) {\n  height: 260px; }\n\n:global(.dashboard-widget.type-text) {\n  text-align: center; }\n\n:global(.dashboard .tab) {\n  max-width: 100px; }\n</style>\n\n<NLayout className=\"dasboard\" headerClassNames=\"fill-header\" pageTitle=\"Dashboard\" showTabs={true}>\n  <header slot=\"header\">\n    <div class=\"container n-row pl-2 pr-0 h-100\" style=\"padding-top:4px;\">\n      <HScroller activeIndex={$DashboardStore.activeIndex} className=\"n-board-tabs\">\n        {#each dashboards || [] as board, i (board.id)}\n          <button\n            class=\"tab board-{board.id} truncate-1 {i == $DashboardStore.activeIndex ? 'selected' : 'inactive'}\"\n            on:click={() => {\n              DashboardStore.toIndex(i);\n            }}>\n            {truncateText(board.label, 12)}\n          </button>\n        {/each}\n        <div slot=\"right\">\n          <Button color=\"clear\" className=\"tap-icon py-1\" on:click={DashboardStore.newDashboard}>\n            <Icon name=\"newTab\" size=\"24\" />\n          </Button>\n        </div>\n      </HScroller>\n\n    </div>\n  </header>\n  {#if activeDashboard && !loading}\n    <div class=\"container h-100\">\n      {#if editMode}\n        <div class=\"n-toolbar n-row px-2 mt-2 mb-2\">\n          <Input type=\"text\" placeholder=\"Dashboard Label\" bind:value={activeDashboard.label} />\n          <Button color=\"clear\" className=\"text-primary-bright\" on:click={done}>{editMode ? 'Done' : 'Edit'}</Button>\n        </div>\n        <hr class=\"divider center my-3\" />\n      {/if}\n      {#if !editMode && activeDashboard && activeDashboard.widgets}\n        <div class=\"dashboard-wrapper\" on:swipeleft={DashboardStore.next} on:swiperight={DashboardStore.previous}>\n          {#if People && trackers}\n            {#if activeDashboard.widgets.length == 0}\n              <div class=\"center-all p-5 n-panel vertical\">\n                <Text faded size=\"md\" center>\n                  {Lang.t('dashboard.empty-message', 'Fresh Dashboard! Get started by adding the first Widget')}\n                </Text>\n                <Button size=\"sm\" color=\"transparent\" className=\"mt-4 text-primary-bright\" on:click={newWidget}>\n                  {Lang.t('dashboard.add-a-widget', 'Add a Widget...')}\n                </Button>\n              </div>\n            {/if}\n\n            {#each activeDashboard.widgets as widget (widget.id)}\n              <WidgetEle\n                {widget}\n                on:click={() => {\n                  editWidget(widget);\n                }} />\n            {/each}\n          {/if}\n        </div>\n        <div class=\"board-actions filler\">\n          <div class=\"btn-group filler\">\n            <Button on:click={newWidget} color=\"clear\">\n              <Text size=\"sm\">{Lang.t('general.add', 'Add')}</Text>\n            </Button>\n            <Button on:click={toggleEdit} color=\"clear\">\n              <Text size=\"sm\">{Lang.t('general.edit', 'Edit')}</Text>\n            </Button>\n            <Button on:click={deleteDashboard} color=\"clear\">\n              <Text size=\"sm\">{Lang.t('general.delete', 'Delete')}</Text>\n            </Button>\n          </div>\n        </div>\n        <div class=\"mt-3 p-2\" />\n      {:else if ready}\n        <SortableList\n          items={activeDashboard.widgets || []}\n          handle=\".menu-handle\"\n          key=\"id\"\n          on:update={(sorted) => {\n            activeDashboard.widgets = sorted.detail;\n            DashboardStore.update((state) => {\n              state.dashboards[$DashboardStore.activeIndex] = activeDashboard;\n              return state;\n            });\n            DashboardStore.save();\n          }}\n          let:item>\n          <ListItem solo className=\"pb-2\">\n            {#if item.type == 'text'}\n              <Text size=\"md\" truncate>{item.description}</Text>\n            {:else}\n              <TrackerSmallBlock xs truncate novalue element={item.element} value={item.type} />\n            {/if}\n            <div slot=\"right\" class=\"text-sm text-faded-2 pr-2\">\n              {#if item.timeRange}{item.timeRange.getLabel()}{/if}\n            </div>\n            <div slot=\"right\" class=\"menu-handle\">\n              <Icon name=\"menu\" />\n            </div>\n          </ListItem>\n        </SortableList>\n      {:else}\n        <div class=\"p-4 text-center mt-4\">\n          <Text size=\"sm\" faded>{Lang.t('general.loading', 'Loading')}...</Text>\n        </div>\n      {/if}\n    </div>\n  {:else}\n    <div class=\"n-panel center-all\">\n      <Spinner size={18} />\n      <NText size=\"sm\" style=\"margin-left:10px;\">Loading...</NText>\n    </div>\n  {/if}\n</NLayout>\n\n<Modal show={editingWidget !== undefined}>\n  <div class=\"n-toolbar-grid\" slot=\"header\">\n    <button class=\"btn btn-clear left text-primary-bright\" on:click={clearEditing}>Close</button>\n    <div class=\"main\">Widget Editor</div>\n    <button class=\"btn btn-clear right text-primary-bright\" on:click={saveEditingWidget}>\n      {#if editingWidget && editingWidget._editing}{Lang.t('general.update', 'Update')}{:else}{Lang.t('general.save', 'Save')}{/if}\n    </button>\n\n  </div>\n  {#if editingWidget}\n    <WidgetEditor bind:value={editingWidget} on:close={clearEditing} />\n  {/if}\n  <div slot=\"footer\" />\n</Modal>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Input from \"../../components/input/input.svelte\";\nimport ListItem from \"../../components/list-item/list-item.svelte\";\nimport { Widget, WidgetTimeFrame } from \"../../modules/dashboard/widget\";\nimport TrackerSmallBlock from \"../../components/tracker-ball/tracker-small-block.svelte\";\nimport Button from \"../../components/button/button.svelte\";\nimport Text from \"../../components/text/text.svelte\";\nimport { createEventDispatcher, onMount } from \"svelte\";\nimport ToggleSwitch from \"../../components/toggle-switch/toggle-switch.svelte\";\nimport Icon from \"../../components/icon/icon.svelte\";\nimport TinyColorPicker from \"../../components/color-picker/tiny-color-picker.svelte\";\nimport { TrackerStore } from \"../../store/tracker-store\";\nimport TrackerConfig from \"../../modules/tracker/tracker\";\nimport TrackableElement from \"../../modules/trackable-element/trackable-element\";\nimport ButtonGroup from \"../../components/button-group/button-group.svelte\";\nimport nid from \"../../modules/nid/nid\";\nimport { timeFrames } from \"./timeFrames\";\nimport { widgetTypes } from \"./widgetTypes\";\n;\nimport { Interact } from \"../../store/interact\";\nimport { DashboardStore } from \"../../store/dashboard-store\";\nimport { Lang } from \"../../store/lang\";\nimport { Dashboard } from \"../../modules/dashboard/dashboard\";\nexport let value = null;\nconst dispatch = createEventDispatcher();\nlet dateType;\nlet widget;\nlet goalValue;\nlet widgetTypeId;\nlet widgetType;\nlet conditionalStyling = false;\nlet editorView = \"options\";\n$: if (widgetTypeId) {\n    widgetType = widgetTypes.find((widgetType) => widgetType.id == widgetTypeId);\n    if (widgetType) {\n        value.type = widgetTypeId;\n        if ([...widgetType.optional, ...widgetType.requires].indexOf(\"cond-style\") == -1) {\n            // Doesn't support conditional styling.. remove that setting\n            value.compareValue = undefined;\n        }\n    }\n}\n/**\n * On Date Type Change\n **/\n$: if (dateType) {\n    let timeFrame = timeFrames.find((t) => t.id == dateType);\n    value.timeRange = new WidgetTimeFrame(timeFrame);\n    if (value.timeRange.id == \"today\" || value.timeRange.id == \"yesterday\") {\n        value.includeAvg = false;\n    }\n}\nlet editorButtons = [];\n$: if (value) {\n    editorButtons = [\n        {\n            label: \"Configure\",\n            active: editorView === \"options\",\n            click() {\n                changeView(\"options\");\n            },\n        },\n        {\n            label: \"Style\",\n            active: editorView === \"style\",\n            click() {\n                changeView(\"style\");\n            },\n        },\n        {\n            label: \"More\",\n            active: editorView === \"more\",\n            hide: !value.id ? false : true,\n            click() {\n                changeView(\"more\");\n            },\n        },\n    ];\n}\nfunction changeView(view) {\n    editorView = view;\n}\nfunction moveWidget() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const buttons = $DashboardStore.dashboards.map((dashboard) => {\n            return {\n                title: dashboard.label,\n                click() {\n                    try {\n                        DashboardStore.moveWidget(value, dashboard);\n                    }\n                    catch (e) {\n                        Interact.alert(\"Error\", e.message);\n                    }\n                },\n            };\n        });\n        Interact.popmenu({\n            buttons,\n            title: \"Which Dashboard?\",\n        });\n    });\n}\nfunction duplicateWidget() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let baseWidget = new Widget(value);\n        baseWidget.id = nid();\n        yield DashboardStore.saveWidget(baseWidget);\n        dispatch(\"close\");\n    });\n}\nfunction deleteWidget() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let confirmed = yield Interact.confirm(`Delete this widget?`, \"You can always recreate it\");\n        if (confirmed) {\n            try {\n                yield DashboardStore.deleteWidget(value);\n                dispatch(\"close\");\n            }\n            catch (e) {\n                Interact.alert(\"Error\", e.message);\n            }\n        }\n    });\n}\nfunction selectType() {\n    const generateElementOption = (title, type) => {\n        return {\n            title,\n            click() {\n                return __awaiter(this, void 0, void 0, function* () {\n                    let selected = yield Interact.select(type);\n                    if (selected.length) {\n                        value.element = value.element || { id: null, type: null, obj: null };\n                        value.element.obj = selected[0];\n                        value.element.type = type;\n                        if (type == \"tracker\") {\n                            value.element.id = value.element.obj.tag;\n                        }\n                        else if (type == \"person\") {\n                            value.element.id = value.element.obj.username;\n                        }\n                        else if (type == \"context\") {\n                            value.element.id = selected[0];\n                        }\n                        else {\n                            console.error(\"Fit for other types\", selected[0]);\n                        }\n                        value.element = value.element instanceof TrackableElement ? value.element : new TrackableElement(value.element);\n                    }\n                });\n            },\n        };\n    };\n    Interact.popmenu({\n        title: \"What type of item would you like to add?\",\n        buttons: [\n            generateElementOption(\"Tracker\", \"tracker\"),\n            generateElementOption(\"Person\", \"person\"),\n            generateElementOption(\"Context\", \"context\"),\n        ],\n    });\n}\nfunction getConditionalValue() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let inputTracker;\n        if (value.element.type == \"tracker\") {\n            inputTracker = value.element.obj;\n        }\n        else {\n            inputTracker = new TrackerConfig({ tag: value.element.obj.id, type: \"numeric\" });\n        }\n        // const tracker = TrackerStore.getByTag();\n        // was value.element.obj -- wth is this?\n        const response = yield Interact.trackerInput(inputTracker, { value: value.compareValue, allowSave: false });\n        if (response && response.value) {\n            value.compareValue = response.value;\n        }\n    });\n}\nonMount(() => {\n    if (value) {\n        if (value.timeRange) {\n            dateType = value.timeRange.id;\n        }\n        if (value.compareValue) {\n            conditionalStyling = true;\n        }\n        widgetTypeId = value.type;\n    }\n});\n</script>\n\n<style lang=\"scss\">.widget-top {\n  box-shadow: var(--box-shadow-float); }\n\n.dashwidget-editor {\n  flex-grow: 1;\n  flex-shrink: 1;\n  min-height: 300px;\n  background-color: var(--color-bg); }\n\n.widget-views {\n  padding: 16px;\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px; }\n</style>\n\n<div class=\"dashwidget-editor\">\n\n  <div class=\"widget-top p-2 bg-solid\">\n    <Input type=\"select\" placeholder=\"Widget\" bind:value={widgetTypeId}>\n      <option>Select a Widget</option>\n      {#each widgetTypes as widgetType}\n        <option value={widgetType.id}>{widgetType.label}</option>\n      {/each}\n    </Input>\n  </div>\n\n  <div class=\"widget-views\">\n    <ButtonGroup className=\"my-2\" size=\"sm\" buttons={editorButtons} />\n\n    {#if editorView == 'options'}\n      {#if widgetTypeId == 'text'}\n        <ListItem className=\"p-0\" bg=\"transparent\">\n          <Input placeholder=\"Message\" type=\"textarea\" rows={2} bind:value={value.description} />\n        </ListItem>\n      {/if}\n      {#if widgetType && [...widgetType.requires, ...widgetType.optional].indexOf('timeframe') > -1}\n        <ListItem className=\"p-0\" bg=\"transparent\">\n          <Input bind:value={dateType} type=\"select\" label=\"Timeframe\">\n            <option>Select</option>\n            {#each timeFrames as timeFrame}\n              <option value={timeFrame.id}>{timeFrame.label}</option>\n            {/each}\n          </Input>\n        </ListItem>\n      {/if}\n      {#if widgetType && [...widgetType.requires, ...widgetType.optional].indexOf('element') > -1}\n        <ListItem\n          bg=\"transparent\"\n          clickable\n          delay={0}\n          className=\"px-2 trackable-item\"\n          on:click={selectType}\n          title={`${!value.element ? '⚠️ ' : ''}Trackable Item`}>\n          <div slot=\"right\">\n            {#if value.element}\n              <TrackerSmallBlock\n                truncate\n                element={value.element}\n                on:click={selectType}\n                className=\"px-2\"\n                style=\"background-color:var(--color-solid); min-height:40px; min-width:100px; max-width:150px;\" />\n            {:else}\n              <Text className=\"text-primary-bright\">Select Tracker</Text>\n            {/if}\n          </div>\n        </ListItem>\n      {/if}\n      {#if widgetTypeId == 'value' && value.timeRange && ['today', 'yesterday'].indexOf(value.timeRange.id) == -1}\n        <ListItem bg=\"transparent\" title=\"Include Average\" className=\"p-0\">\n          <div slot=\"right\">\n            <ToggleSwitch bind:value={value.includeAvg} />\n          </div>\n        </ListItem>\n      {/if}\n    {:else if editorView == 'style'}\n      <ListItem bg=\"transparent\" className=\"p-0\">\n        <Input type=\"select\" label=\"Widget Size\" bind:value={value.size}>\n          <option value=\"sm\">Small</option>\n          <option value=\"md\">Medium</option>\n          <option value=\"lg\">Large</option>\n        </Input>\n      </ListItem>\n      {#if widgetType && [...widgetType.requires, ...widgetType.optional].indexOf('cond-style') > -1}\n        <!-- <div class=\"conditional-styling n-list {conditionalStyling ? 'solo framed' : ''}\"> -->\n        <ListItem bg=\"transparent\" title=\"Conditional Colors\" className=\"p-0\">\n          <div slot=\"right\">\n            <ToggleSwitch bind:value={conditionalStyling} />\n          </div>\n        </ListItem>\n        {#if conditionalStyling}\n          <ListItem bg=\"transparent\" title=\"Compare Value\" className=\"p-0\">\n            <div slot=\"right\">\n              <Input\n                pattern=\"[0-9]*\"\n                inputmode=\"numeric\"\n                placeholder={widgetTypeId == 'value' ? 'Value' : widgetTypeId == 'last-used' ? 'Days' : 'Value'}\n                style=\"max-width:140px;\"\n                bind:value={value.compareValue}>\n                <button\n                  class=\"btn btn-icon clickable mr-2\"\n                  slot=\"right\"\n                  on:click={async () => {\n                    getConditionalValue();\n                  }}>\n                  {#if value.element.type == 'tracker'}\n                    <Icon name=\"addOutline\" />\n                  {/if}\n                </button>\n              </Input>\n            </div>\n          </ListItem>\n          <ListItem bg=\"transparent\" className=\"p-0\">\n            <div class=\"under\" slot=\"left\">\n              <div class=\"text-center\">\n                <Text className=\"mb-2\" size=\"sm\">Under value color</Text>\n                <TinyColorPicker bind:value={value.compareUnderColor} />\n              </div>\n            </div>\n            <div class=\"over\" slot=\"right\">\n              <div class=\"text-center\">\n                <Text className=\"mb-2\" size=\"sm\">Over value color</Text>\n                <TinyColorPicker bind:value={value.compareOverColor} />\n              </div>\n            </div>\n          </ListItem>\n        {/if}\n        <!-- </div> -->\n      {/if}\n    {:else if editorView == 'more'}\n      {#if value._editing}\n        <ListItem bg=\"transparent\" clickable on:click={moveWidget}>\n          <div slot=\"left\">\n            <Icon name=\"shuffle\" className=\"fill-primary-bright\" />\n          </div>\n          Move Widget\n        </ListItem>\n        <ListItem bg=\"transparent\" clickable on:click={duplicateWidget}>\n          <div slot=\"left\">\n            <Icon name=\"copy\" className=\"fill-primary-bright\" />\n          </div>\n          Duplicate Widget\n        </ListItem>\n        <ListItem bg=\"transparent\" clickable on:click={deleteWidget}>\n          <div slot=\"left\">\n            <Icon name=\"delete\" className=\"fill-red\" />\n          </div>\n          Delete Widget...\n        </ListItem>\n      {/if}\n    {/if}\n\n    <!-- {#if widgetType && [...widgetType.requires, ...widgetType.optional].indexOf('goal') > -1}\n      <Input placeholder=\"Goal\" type=\"number\" bind:value={value.goal} />\n    {/if} -->\n\n  </div>\n</div>\n",
    "<script lang=\"ts\">import PositivityBar from \"../../components/positivity-bar/positivity-bar.svelte\";\nimport BarChart from \"../../components/charts/bar-chart-2.svelte\";\nimport TrackerSmallBlock from \"../../components/tracker-ball/tracker-small-block.svelte\";\nimport Text from \"../../components/text/text.svelte\";\nimport { Widget } from \"../../modules/dashboard/widget\";\nimport { createEventDispatcher } from \"svelte\";\nimport Pie from \"../../components/charts/pie.svelte\";\nimport Icon from \"../../components/icon/icon.svelte\";\nimport Button from \"../../components/button/button.svelte\";\nimport { strToColor } from \"../../components/dymoji/dymoji\";\nimport dayjs from \"dayjs\";\nimport { element } from \"svelte/internal\";\nimport nid from \"../../modules/nid/nid\";\nimport Calendar from \"../../components/calendar/calendar.svelte\";\nimport WidgetWhatTime from \"./widgets/widget-what-time.svelte\";\nimport WidgetLastUsed from \"./widgets/widget-last-used.svelte\";\nimport WidgetBarChart from \"./widgets/widget-bar-chart.svelte\";\nimport WidgetValue from \"./widgets/widget-value-display.svelte\";\nimport WidgetMinMax from \"./widgets/widget-min-max.svelte\";\nimport WidgetPositivityPie from \"./widgets/widget-positivity-pie.svelte\";\nimport WidgetMap from \"./widgets/widget-map.svelte\";\nimport WidgetStreak from \"./widgets/widget-streak.svelte\";\nimport { LastUsed } from \"../../store/last-used\";\nimport { Interact } from \"../../store/interact\";\nimport { DashboardStore } from \"../../store/dashboard-store\";\nimport Spinner from \"../../components/spinner/spinner.svelte\";\nimport { Lang } from \"../../store/lang\";\nconst dispatch = createEventDispatcher();\nconst id = nid();\nexport let widget;\nfunction getClass(widget) {\n    let classes = [`type-${widget.type}`];\n    let value;\n    if (widget.stats) {\n        if (widget.type == \"last-used\") {\n            value = widget.stats.daysPast;\n        }\n        else {\n            value = widget.math !== \"sum\" ? widget.stats.avg : widget.stats.sum;\n        }\n    }\n    value = value || 0;\n    if (widget.compareValue) {\n        if (value > widget.compareValue) {\n            classes.push(`over widget-${widget.compareOverColor}`);\n        }\n        else if (value < widget.compareValue) {\n            classes.push(`over widget-${widget.compareUnderColor}`);\n        }\n    }\n    classes.push(`widget-size-${widget.size}`);\n    return classes.join(\" \");\n}\n</script>\n\n<style lang=\"scss\">:global(.dashboard-text) {\n  padding: 4px 16px;\n  min-width: 100% !important;\n  flex-grow: 1;\n  display: flex;\n  width: 100%;\n  font-size: 0.9rem;\n  color: var(--color-inverse-2);\n  align-items: center;\n  text-align: center !important;\n  justify-content: center;\n  max-width: 100% !important; }\n  :global(.dashboard-text).widget-size-md {\n    font-size: 1rem;\n    font-weight: 500;\n    padding: 8px 16px;\n    line-height: 1.1rem; }\n  :global(.dashboard-text).widget-size-lg {\n    padding: 8px 16px;\n    font-size: 1.6rem;\n    line-height: 1.7rem;\n    font-weight: 700;\n    padding: 16px; }\n\n:global(.dashboard-text + .dashboard-text) {\n  padding-top: 0px !important;\n  padding-bottom: 16px; }\n\n.dashboard-widget {\n  max-height: 300px;\n  position: relative; }\n  .dashboard-widget:after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 4px; }\n\n:global(.dashboard-widget.over .widget-footer .n-text, .dashboard-widget.under .widget-footer .n-text) {\n  color: #fff !important; }\n\n:global(.dashboard-widget.widget-red .widget-footer .n-text) {\n  color: var(--color-red) !important; }\n\n:global(.dashboard-widget.widget-blue .widget-footer .n-text) {\n  color: var(--color-blue) !important; }\n\n:global(.dashboard-widget.widget-green .widget-footer .n-text) {\n  color: var(--color-green) !important; }\n\n:global(.dashboard-widget.widget-orange .widget-footer .n-text) {\n  color: var(--color-orange) !important; }\n\n:global(.dashboard-widget.widget-red:after) {\n  background-color: var(--color-red) !important; }\n\n:global(.dashboard-widget.widget-blue:after) {\n  background-color: var(--color-blue) !important; }\n\n:global(.dashboard-widget.widget-green:after) {\n  background-color: var(--color-green) !important; }\n\n:global(.dashboard-widget.widget-orange:after) {\n  background-color: var(--color-orange) !important; }\n\n:global(.dashboard-widget) {\n  margin: 8px;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--color-solid);\n  border-radius: 16px;\n  box-shadow: var(--box-shadow-float);\n  overflow: hidden;\n  flex-shrink: 1;\n  flex-grow: 1; }\n  :global(.dashboard-widget) .widget-header,\n  :global(.dashboard-widget) .widget-footer {\n    padding: 6px 8px;\n    flex-grow: 0;\n    flex-shrink: 0;\n    min-height: 32px; }\n  :global(.dashboard-widget) .widget-footer {\n    margin-top: 8px; }\n  :global(.dashboard-widget) .widget-main {\n    height: 90px;\n    flex-grow: 1; }\n\n.widget-size-lg {\n  min-width: calc(100% - 16px) !important; }\n\n.widget-size-md {\n  min-width: calc(50% - 16px) !important; }\n\n.widget-size-sm {\n  min-width: calc(25% - 16px) !important;\n  max-width: calc(50% - 16px); }\n\n@media (max-width: 599.98px) {\n  .widget-size-sm {\n    min-width: calc(50% - 16px) !important;\n    max-width: calc(50% - 16px); }\n  .widget-size-md,\n  .widget-size-lg {\n    min-width: calc(100% - 16px) !important;\n    max-width: calc(100% - 16px); } }\n\n:global(.dashboard-widget .value) {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: var(--color-inverse);\n  height: 100%;\n  padding: 2px 8px; }\n  :global(.dashboard-widget .value) .current {\n    font-size: 2rem;\n    line-height: 100%;\n    text-align: center; }\n  :global(.dashboard-widget .value).value-sm .current {\n    font-size: 1.4rem; }\n  :global(.dashboard-widget .value).value-sm .avg {\n    opacity: 0.6; }\n  :global(.dashboard-widget .value).last-used .current {\n    font-size: 1.5rem; }\n</style>\n\n{#if widget && widget.type !== 'text'}\n  <div class=\"dashboard-widget {getClass(widget)}\" {id}>\n    <div class=\"widget-header n-row\">\n      <TrackerSmallBlock\n        xs\n        truncate\n        novalue\n        element={widget.element}\n        on:click={() => {\n          Interact.openStats(widget.element.toSearchTerm());\n        }} />\n      <div class=\"filler\" />\n      <Button\n        size=\"xs\"\n        color=\"clear\"\n        className=\"p-1 font-weight-normal\"\n        on:click={() => {\n          DashboardStore.pickSize(widget);\n        }}>\n        {widget.size}\n      </Button>\n      <Button\n        size=\"xs\"\n        color=\"clear\"\n        className=\"p-1\"\n        on:click={() => {\n          dispatch('click');\n        }}>\n        <Icon name=\"settings\" style=\"fill: var(--color-inverse-2)\" size=\"16\" />\n      </Button>\n    </div>\n    <div class=\"widget-main\">\n      {#if widget.stats}\n        {#if ['barchart', 'linechart'].indexOf(widget.type) > -1 && widget.stats && widget.stats.chart}\n          <WidgetBarChart {widget} />\n        {:else if widget.type == 'value' && widget.stats}\n          <WidgetValue {widget} />\n        {:else if widget.type == 'what-time'}\n          <WidgetWhatTime {widget} />\n        {:else if widget.type == 'last-used'}\n          <WidgetLastUsed {widget} />\n        {:else if widget.type == 'positivity' && widget.stats}\n          <WidgetPositivityPie {widget} />\n        {:else if widget.type == 'min-max' && widget.stats}\n          <WidgetMinMax {widget} />\n        {:else if widget.type == 'map' && widget.stats}\n          <WidgetMap {widget} />\n        {:else if widget.type == 'streak' && widget.stats}\n          <WidgetStreak {widget} />\n        {:else}\n          <div class=\"value\">Unknown {widget.type}</div>\n        {/if}\n      {:else}\n        <div class=\"value n-row\">\n          <Spinner size={24} />\n        </div>\n      {/if}\n    </div>\n    <div class=\"widget-footer n-row\">\n      {#if widget.timeRange}\n        <Text size=\"xs\" className=\"text-center flex-grow text-uppercase font-weight-bold\">{widget.getLabel()}</Text>\n      {/if}\n    </div>\n  </div>\n{:else}\n  <div\n    {id}\n    class=\"dashboard-text type-text text-center widget-size-{widget.size}\"\n    on:click={() => {\n      dispatch('click');\n    }}>\n    {widget.description}\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import BarChart from \"../../../components/charts/bar-chart-2.svelte\";\nimport { getWidgetColor } from \"../dashboard-helpers\";\n;\nimport { element } from \"svelte/internal\";\nexport let widget;\n</script>\n\n<style>\n  .chart-value {\n    height: 100%;\n    flex-grow: 1;\n    flex-shrink: 0;\n    display: flex;\n    width: 100%;\n    display: column;\n    justify-content: stretch;\n  }\n</style>\n\n{#if widget}\n  <div class=\"chart-value\">\n    <BarChart\n      height={100}\n      type={widget.type == 'linechart' ? 'line' : 'bar'}\n      color={getWidgetColor(widget)}\n      labels={widget.stats.chart.values.map((point) => point.x)}\n      points={widget.stats.chart.values}\n      hideXTicks={widget.size == 'sm'}\n      hideYTicks={widget.size == 'sm'}\n      yFormat={(y) => {\n        if (widget.element.type == 'tracker') {\n          return widget.element.obj.displayValue(y);\n        } else {\n          return y;\n        }\n      }} />\n  </div>\n{/if}\n",
    "<script lang=\"ts\">;\nimport { formatValue } from \"../dashboard-helpers\";\nimport Text from \"../../../components/text/text.svelte\";\nimport { UserStore } from \"../../../store/user-store\";\nimport dayjs from \"dayjs\";\nimport Icon from \"../../../components/icon/icon.svelte\";\nexport let widget;\n$: dateFormat = $UserStore.meta.is24Hour ? \"ddd D MMM YYYY\" : \"ddd MMM D YYYY\";\n</script>\n\n<style>\n  .min-max {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n  .max {\n    padding-bottom: 6px;\n  }\n\n  :global(.widget-size-lg .min-max, .widget-size-sm .n-text.xl) {\n    font-size: 1.4rem;\n  }\n  :global(.widget-size-lg .min-max, .widget-size-md .min-max) {\n    flex-direction: row;\n  }\n  :global(.widget-size-lg .min-max .min, .widget-size-md .min-max .min) {\n    padding-bottom: 6px;\n    padding-left: 12px;\n    border-left: solid 1px var(--color-solid-2);\n    margin-left: 12px;\n  }\n</style>\n\n<div class=\"value min-max\">\n  <div class=\"max text-center\">\n    <Text size={formatValue(widget.stats.max.value, widget).toString().length > 5 ? 'lg' : 'xl'} bold>\n      {formatValue(widget.stats.max.value, widget)}\n    </Text>\n    <Text size=\"xs\" faded style=\"margin-left:-12px;\">\n      <Icon name=\"chevronUp\" size=\"12\" />\n      {dayjs(widget.stats.max.date).format(dateFormat)}\n    </Text>\n  </div>\n  <div class=\"min text-center\">\n    <!-- Max is set on purpose here.. for consistency -->\n    <Text size={formatValue(widget.stats.max.value, widget).toString().length > 5 ? 'lg' : 'xl'} bold>\n      {formatValue(widget.stats.min.value, widget)}\n    </Text>\n    <Text size=\"xs\" faded style=\"margin-right:-12px;\">\n      {dayjs(widget.stats.min.date).format(dateFormat)}\n      <Icon name=\"chevronDown\" size=\"12\" />\n    </Text>\n  </div>\n</div>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Calendar from \"../../../components/calendar/calendar.svelte\";\nimport dayjs from \"dayjs\";\n;\nimport { onMount } from \"svelte\";\nlet _elCalendar;\nexport let widget;\nlet streakCount = 0;\nfunction countDays() {\n    let count = 0;\n    return count;\n}\nfunction main() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let days = 0;\n        let count = 0;\n        let streakData = widget.stats._stats.getStreakData();\n        streakCount = streakData.streak;\n    });\n}\nonMount(main);\n</script>\n\n<style>\n  .calendar-wrapper {\n    max-width: 120px;\n    min-height: 200px;\n  }\n</style>\n\n{#if widget && widget.element.type == 'tracker'}\n  <div class=\"calendar-wrapper\">{streakCount}</div>\n{:else}Streaks currently only support Trackers{/if}\n",
    "<script lang=\"ts\">;\nimport { formatValue } from \"../dashboard-helpers\";\nexport let widget;\n</script>\n\n<style>\n  .current {\n    font-size: 1.5rem;\n  }\n</style>\n\n<div class=\"value {widget.includeAvg ? 'value-sm' : ''}\">\n  <div class=\"current\">{widget.math == 'mean' ? formatValue(widget.stats.avg, widget) : formatValue(widget.stats.sum, widget)}</div>\n  {#if widget.includeAvg}\n    <div class=\"avg\">avg {formatValue(widget.stats.avg, widget)}</div>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport NLog from \"../../../modules/nomie-log/nomie-log\";\n;\n;\nimport TrackerLogsToTime from \"../../../utils/tracker-logs-to-time/tracker-logs-to-time\";\nimport { onMount } from \"svelte\";\nexport let widget;\nlet times = [];\nfunction init() {\n    return __awaiter(this, void 0, void 0, function* () {\n        times = TrackerLogsToTime(widget.element.id, widget.logs);\n    });\n}\n</script>\n\n<style lang=\"scss\">.time-graph {\n  border: solid 1px var(--color-solid-1);\n  height: 120px; }\n\n.time-graph .days {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  flex-grow: 1;\n  flex-shrink: 1;\n  height: 100%;\n  justify-content: stretch; }\n\n.time-graph .days .day {\n  display: flex;\n  flex-grow: 1;\n  flex-shrink: 1;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%; }\n  .time-graph .days .day .bar {\n    min-width: 4px;\n    max-width: 14px;\n    border-radius: 7px;\n    background-color: var(--color-inverse);\n    min-height: 10px;\n    flex-grow: 0;\n    flex-shrink: 0; }\n</style>\n\n{#await init()}\n  Loading...\n{:then value}\n  <div class=\"time-graph\">\n    <div class=\"days\">\n      {#each times as day}\n        <div class=\"day\">\n          <div class=\"bar\" style=\"height:{day.percent}%\" />\n        </div>\n      {/each}\n    </div>\n  </div>\n{:catch error}\n  error{error.message}\n{/await}\n",
    "<script>\n  // Vendors\n  import { onMount } from \"svelte\";\n  import { Link } from \"svelte-routing\";\n\n  // Components\n  import Icon from \"../../components/icon/icon.svelte\";\n  import AppTab from \"../../components/app-tab/app-tab.svelte\";\n\n  import { Lang } from \"../../store/lang\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { FeatureStore } from \"../../store/feature-store\";\n  import NPaths from \"../../paths\";\n  import { UserStore } from \"../../store/user-store\";\n  import Features from \"../settings/features.svelte\";\n  const state = {\n    mounted: false,\n  };\n\n  $: hideLabels = $UserStore.meta.hideLabels;\n\n  onMount(() => {\n    state.mounted = true;\n  });\n</script>\n\n<style lang=\"scss\">#app-tabs {\n  --tab-height: 65px;\n  height: calc(var(--tab-height) + env(safe-area-inset-bottom));\n  padding-bottom: calc(env(safe-area-inset-bottom));\n  background-color: var(--footer-background);\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n  z-index: 1200;\n  flex-shrink: 0; }\n  #app-tabs.compact {\n    --tab-height: 55px;\n    height: calc(var(--tab-height) + env(safe-area-inset-bottom)); }\n    #app-tabs.compact .n-row {\n      max-height: var(--tab-height);\n      min-height: var(--tab-height);\n      height: var(--tab-height); }\n  #app-tabs .n-row {\n    z-index: 10;\n    max-height: var(--tab-height);\n    min-height: var(--tab-height);\n    height: var(--tab-height);\n    flex-shrink: 0; }\n\n:global(#app-tabs .notification) {\n  position: absolute;\n  top: 8px;\n  right: calc(50% - 15px);\n  width: 6px;\n  height: 6px;\n  background-color: var(--color-red);\n  border-radius: 3px; }\n</style>\n\n{#if state.mounted}\n  <nav id=\"app-tabs\" class={hideLabels ? 'compact' : ''}>\n    <div class=\"n-row mw-500px mx-auto\">\n\n      <AppTab link={NPaths.routes.history()} icon=\"calendar\" label={Lang.t('tabs.history')} />\n      {#if $FeatureStore.dashboard}\n        <AppTab link={NPaths.routes.dashboard()} icon=\"report\" label={Lang.t('tabs.dashboard', 'Dash')} />\n      {/if}\n      <AppTab link=\"/\" icon=\"grid\" label={Lang.t('tabs.track', 'Track')}>\n        {#if $TrackerStore.timers.length}\n          <div class=\"notification\" />\n        {/if}\n      </AppTab>\n      {#if $FeatureStore.People}\n        <AppTab link={NPaths.routes.People()} icon=\"user\" label={Lang.t('tabs.People', 'People')} />\n      {/if}\n      <AppTab link={NPaths.routes.settings()} icon=\"settings\" label={Lang.t('tabs.settings', 'Settings')} />\n\n    </div>\n  </nav>\n{/if}\n",
    "<script>\n  import Modal from \"../../components/modal/modal.svelte\";\n\n  import TrackerButton from \"../../containers/board/tracker-button.svelte\";\n  import NText from \"../../components/text/text.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n\n  // Stores\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { Lang } from \"../../store/lang\";\n  import { TrackerLibrary } from \"../../store/tracker-library\";\n  import { Interact } from \"../../store/interact\";\n  import { UserStore } from \"../../store/user-store\";\n  import tick from \"../../utils/tick/tick\";\n\n  let installed = {}; // hol der for anything installed during the opening\n\n  let trackers = [];\n  let ready = false;\n\n  UserStore.onReady(() => {\n    ready = true;\n  });\n\n  $: if ($TrackerLibrary && !trackers.length && ready) {\n    trackers = $TrackerLibrary.trackers.map((tracker) => {\n      if (tracker.uom == \"oz\" && $UserStore.meta.is24Hour === true) {\n        tracker.uom = \"milliliter\";\n        tracker.default = \"350\";\n      }\n      return tracker;\n    });\n  }\n\n  function isInstalled(tracker) {\n    return $TrackerStore.trackers.hasOwnProperty(tracker.tag) || installed.hasOwnProperty(tracker.tag);\n  }\n\n  async function toggleTrackerInstalled(tracker) {\n    if (!isInstalled(tracker)) {\n      TrackerStore.saveTracker(tracker);\n      installed[tracker.tag] = true;\n      Interact.toast(`${tracker.label} added`);\n    } else {\n      let confirmed = await Interact.confirm(`Remove ${tracker.label}?`, `Data will be untouched`);\n      if (confirmed) {\n        await TrackerStore.deleteTracker(tracker);\n        delete installed[tracker.tag];\n        installed = installed;\n        Interact.toast(`${tracker.label} removed`);\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.grid {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 16px 0;\n  flex-grow: 1; }\n  .grid .tracker-option {\n    margin: 4px; }\n\n.intro-message {\n  text-align: center;\n  margin: 0 16px; }\n\n.tracker-option {\n  position: relative; }\n  .tracker-option .badge {\n    position: absolute;\n    right: 8px;\n    top: 10px;\n    z-index: 400;\n    width: 22px;\n    padding: 0;\n    text-align: center; }\n</style>\n\n<Modal\n  type={$TrackerLibrary.first ? 'fullscreen' : 'fullscreen'}\n  show={true}\n  className=\"library-modal\"\n  title={Lang.t('tracker.things-to-track')}>\n\n  {#if $TrackerLibrary.first}\n    <div class=\"px-2 pt-3 intro-message\">\n      <NText size=\"sm\" tag=\"div\">{Lang.t('tracker.pick-at-least-one')}</NText>\n    </div>\n  {/if}\n\n  <div class=\"n-grid\">\n    {#each trackers as tracker, index (tracker.tag)}\n      <div class=\"tracker-option\">\n        {#if $TrackerStore.trackers.hasOwnProperty(tracker.tag) || installed.hasOwnProperty(tracker.tag)}\n          <div class=\"badge badge-green\">\n            <NIcon name=\"checkmark\" className=\"fill-white\" size=\"16\" />\n          </div>\n        {/if}\n        <TrackerButton\n          {tracker}\n          on:click={() => {\n            toggleTrackerInstalled(tracker);\n          }} />\n      </div>\n    {/each}\n  </div>\n  <button\n    slot=\"footer\"\n    disabled={Object.keys(installed).length === 0 && $TrackerLibrary.first}\n    class=\"btn btn-primary filler btn-lg\"\n    on:click={TrackerLibrary.toggle}>\n    {Lang.t('general.done')}\n  </button>\n</Modal>\n",
    "<script>\n  // Utils\n  import Logger from \"../../utils/log/log\";\n  import time from \"../../utils/time/time\";\n\n  //Svelte\n  import { createEventDispatcher, onMount } from \"svelte\";\n\n  // Vendor\n  import dayjs from \"dayjs\";\n\n  // Modules\n  import NomieLog from \"../../modules/nomie-log/nomie-log\";\n\n  // Components\n  import NModal from \"../../components/modal/modal.svelte\";\n  import NPositivitySelector from \"../../components/positivity-selector/positivity-selector.svelte\";\n  import AutoComplete from \"../../components/auto-complete/auto-complete.svelte\";\n  import HScroller from \"../../components/h-scroller/h-scroller.svelte\";\n  import NMap from \"../../containers/map/map.svelte\";\n  import NCell from \"../../components/cell/cell.svelte\";\n  import NInput from \"../../components/input/input.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import DateTimeBar from \"../../components/date-time-bar/date-time-bar.svelte\";\n  import ButtonGroup from \"../../components/button-group/button-group.svelte\";\n  import { Lang } from \"../../store/lang\";\n  import ListItem from \"../../components/list-item/list-item.svelte\";\n  import { Locations } from \"../../store/locations\";\n\n  // Props\n  export let log = undefined;\n\n  let textarea;\n  // consts\n  const console = new Logger(\"log-editor.svelte\");\n  const dispatch = createEventDispatcher();\n\n  // Setup state\n  let state = {\n    view: \"note\",\n    dateTimeValue: null,\n    saving: false,\n  };\n\n  // Watch for Log\n  // $: if (log) {\n  //   state.log = new NomieLog(log);\n  // }\n\n  // Set up Methods\n  const methods = {\n    init() {\n      if (log) {\n        state.log = new NomieLog(log);\n        state.dateTimeValue = dayjs(new Date(log.end)).format(\"YYYY-MM-DDTHH:mm\");\n      }\n    },\n    setView(view) {\n      state.view = view;\n    },\n    getLocations() {\n      let locations = [];\n      if (state.log.lat) {\n        locations.push({\n          lat: state.log.lat,\n          lng: state.log.lng,\n          name: state.log.location,\n        });\n      }\n      return locations;\n    },\n    save() {\n      state.saving = true;\n      // let updatedDate = time.datetimeLocal(state.dateTimeValue);\n      // state.log.start = updatedDate.getTime();\n      // state.log.end = updatedDate.getTime();\n      dispatch(\"save\", state.log);\n      // dispatch(\"close\");\n    },\n  };\n\n  async function selectLocation() {\n    let location = await Locations.selectLocation();\n    if (location) {\n      state.log.lat = location.lat;\n      state.log.lng = location.lng;\n      state.log.location = location.name;\n    }\n  }\n\n  onMount(() => {\n    methods.init();\n  });\n</script>\n\n<style lang=\"scss\">:global(.log-editor) {\n  z-index: 1301 !important; }\n\n:global(.log-editor .view-port .n-map-container) {\n  height: 300px; }\n\n:global(.log-editor .view-port .date-time) {\n  height: 350px;\n  width: 100vw;\n  max-width: 320px; }\n\n:global(.log-editor .n-modal) {\n  max-width: 300px;\n  width: 300px; }\n\n.view-port {\n  min-height: 200px; }\n  .view-port textarea {\n    font-size: 1rem;\n    height: 275px; }\n  .view-port .center-content {\n    display: flex;\n    width: 100%;\n    flex-grow: 1;\n    flex-shrink: 1;\n    height: 100%;\n    align-items: center;\n    padding: 16px;\n    height: 200px; }\n  .view-port .date-time {\n    min-height: 350px;\n    padding: 0px; }\n</style>\n\n{#if state.log}\n  <NModal title=\"Log Options\" className=\"log-editor\">\n    <div slot=\"header\" class=\"w-100 p-2\">\n      <ButtonGroup\n        buttons={[{ label: Lang.t('general.note', 'Note'), active: state.view === 'note', click() {\n              methods.setView('note');\n            } }, { label: Lang.t('general.score', 'Score'), active: state.view === 'score', click() {\n              methods.setView('score');\n            } }, { label: Lang.t('general.where', 'Where'), active: state.view === 'where', click() {\n              methods.setView('where');\n            } }, { label: Lang.t('general.when', 'When'), active: state.view === 'when', click() {\n              methods.setView('when');\n            } }]} />\n    </div>\n\n    <div class=\"view-port\">\n      {#if state.view == 'note'}\n        <div class=\"p-2\">\n          <textarea class=\"form-control\" bind:this={textarea} bind:value={state.log.note} />\n          <AutoComplete\n            scroller\n            input={state.log.note}\n            on:select={(evt) => {\n              state.log.note = evt.detail.note;\n              textarea.focus();\n              textarea.setSelectionRange(textarea.value.length, textarea.value.length);\n            }} />\n\n        </div>\n      {:else if state.view == 'where'}\n        {#if state.log}\n          <div style=\"height:200px; max-height:200px; min-height:200px; overflow:hidden\">\n            <NMap\n              style=\"max-height:200px;\"\n              locations={state.log.lat ? [{ lat: state.log.lat, lng: state.log.lng, name: state.log.location }] : []}\n              picker={true}\n              on:change={(event) => {\n                state.log.lat = event.detail.lat;\n                state.log.lng = event.detail.lng;\n                state.log.location = event.detail.location;\n              }} />\n          </div>\n        {/if}\n        <ListItem compact clickable detail on:click={selectLocation}>Pick from my locations</ListItem>\n      {:else if state.view == 'score'}\n        <div class=\"score center-content\">\n          <NPositivitySelector\n            size=\"xl\"\n            score={state.log.score}\n            on:change={(evt) => {\n              state.log.score = evt.detail;\n            }} />\n        </div>\n      {:else if state.view == 'when'}\n        <div class=\"date-time center-content p-0\">\n          <DateTimeBar\n            opened\n            style=\"padding:0px;\"\n            date={dayjs(state.log.end)}\n            on:change={(evt) => {\n              state.log.end = evt.detail.toDate().getTime();\n            }} />\n        </div>\n      {/if}\n    </div>\n\n    <div class=\"buttons n-row\" slot=\"footer\">\n      {#if !state.saving}\n        <button\n          class=\"btn btn-clear w-50\"\n          on:click={() => {\n            dispatch('close');\n          }}>\n          Cancel\n        </button>\n        <button class=\"btn btn-primary w-50\" on:click={methods.save}>Save</button>\n      {:else}\n        <button class=\"btn btn-primary w-100\" disabled>Saving...</button>\n      {/if}\n    </div>\n\n  </NModal>\n{/if}\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { createEventDispatcher } from \"svelte\";\nimport Item from \"../../components/list-item/list-item.svelte\";\nimport NIcon from \"../../components/icon/icon.svelte\";\nimport locate from \"../../modules/locate/locate\";\nimport distance from \"../../modules/locate/distance\";\nimport Location from \"../../modules/locate/Location\";\nimport { Locations } from \"../../store/locations\";\nimport { Interact } from \"../../store/interact\";\nimport { Lang } from \"../../store/lang\";\nimport tick from \"../../utils/tick/tick\";\nimport Page from \"../layout/page.svelte\";\n// props\nexport let locations = [];\nexport let records = [];\nexport let small = undefined;\nexport let picker = undefined;\nexport let height = undefined;\nexport let className = \"\";\nexport let style = \"\";\nexport let lock = false;\n// consts\nconst dispatch = createEventDispatcher();\nconst id = `map-${Math.random().toString().replace(\".\", \"\")}`;\n// Setup GeoCode SErvice\nconst geocodeService = L.esri.Geocoding.geocodeService();\n// Leaflet Map Holder\nlet MAP = undefined;\nlet _el;\nlet mapReady = false;\n// Local State\nlet data = {\n    locationName: null,\n    activeLocation: locations[locations.length - 1] || null,\n    locating: false,\n    lat: null,\n    lng: null,\n    showLocations: false,\n    height: `100px`,\n};\nlet lastLocations;\n$: if (locations && JSON.stringify(locations) !== lastLocations) {\n    try {\n        lastLocations = JSON.stringify(locations);\n        initAndRender();\n    }\n    catch (e) {\n        console.error(`Location change error`, e.message);\n    }\n}\nfunction initAndRender() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield methods.init();\n            methods.renderMap();\n            mapReady = true;\n        }\n        catch (e) {\n            mapReady = false;\n            console.error(`init and render error`, e.message);\n        }\n    });\n}\n$: if (!locations.length && records.length) {\n    try {\n        let locs = records\n            .filter((r) => r.lat)\n            .map((record) => {\n            return {\n                lat: record.lat,\n                lng: record.lng,\n                name: record.location,\n                log: record,\n            };\n        });\n        locations = locs;\n    }\n    catch (e) {\n        console.error(`Location || record length reaction error`, e.mesasge);\n    }\n}\n$: if (picker && MAP && locations.length == 0) {\n    try {\n        locate()\n            .then((location) => {\n            locations.push({\n                lat: location.latitude,\n                lng: location.longitude,\n            });\n            MAP.setView(L.latLng(location.latitude, location.longitude), 12);\n        })\n            .catch((e) => { });\n    }\n    catch (e) {\n        console.error(\"Picker reaction error\", e.message);\n    }\n}\n// methods\nexport let methods = {\n    init() {\n        if (_el) {\n            data.height = _el.parentElement.clientHeight;\n        }\n        /** Initialize map **/\n        return new Promise((resolve, reject) => {\n            if (document.getElementById(id)) {\n                MAP = new L.Map(id).fitWorld();\n                var arcgisOnline = L.esri.Geocoding.arcgisOnlineProvider();\n                let searchController = L.esri.Geocoding.geosearch({\n                    zoomToResult: true,\n                    placeholder: \"Search\",\n                    useMapBounds: 25,\n                    providers: [\n                        arcgisOnline,\n                        L.esri.Geocoding.mapServiceProvider({\n                            label: \"States and Counties\",\n                            url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer\",\n                            layers: [2, 3],\n                            searchFields: [\"NAME\", \"STATE_NAME\"],\n                        }),\n                    ],\n                });\n                searchController.on(\"results\", (data) => {\n                    if (data.latlng) {\n                        let location = new Location({\n                            lat: data.latlng.lat,\n                            lng: data.latlng.lng,\n                            name: data.text,\n                        });\n                        methods.setLocation(location);\n                    }\n                });\n                let moveTimeout;\n                const onMove = () => {\n                    let center = MAP.getCenter();\n                    let lat = center.lat;\n                    let lng = center.lng;\n                    data.lat = lat;\n                    data.lng = lng;\n                    // Stop this from being called multiple times.\n                    /**\n                     * Fire the Move action -\n                     * encased so we can only do it so often\n                     **** */\n                    const fireMove = () => __awaiter(this, void 0, void 0, function* () {\n                        // let loc = await methods.getLocation(lat, lng);\n                        // data.locationName = loc.Match_addr;\n                        dispatch(\"change\", new Location(Object.assign(Object.assign(Object.assign({}, MAP.getCenter()), { location: data.locationName }), { name: null })));\n                    });\n                    // Clear Timeout\n                    clearTimeout(moveTimeout);\n                    // Set 1s timeout\n                    moveTimeout = setTimeout(() => {\n                        // Fire Move\n                        fireMove();\n                    }, 1000);\n                };\n                // Clear any moveend listeners\n                MAP.off(\"moveend\", onMove);\n                // If we're picking an address do the following\n                if (picker) {\n                    // Add the Search Controller\n                    searchController.addTo(MAP);\n                    MAP.on(\"moveend\", onMove);\n                }\n                // Clean up the layers\n                MAP.eachLayer(function (layer) {\n                    MAP.removeLayer(layer);\n                });\n                // return map\n                mapReady = true;\n                resolve(MAP);\n            }\n            else {\n                mapReady = false;\n            } // end no map\n        });\n    },\n    deleteLocation(location) {\n        Interact.confirm(`${Lang.t(\"general.delete\")} ${location.name}?`).then((res) => {\n            if (res) {\n                Locations.deleteByID(location.id);\n            }\n        });\n    },\n    editName(location) {\n        Interact.prompt(\"Location Name\", null, { value: location.name }).then((res) => {\n            location.name = res;\n            Locations.save(location);\n        });\n    },\n    setLocation(location) {\n        data.locationName = location.name;\n        data.lat = location.lat;\n        data.lng = location.lng;\n        locations = [location];\n        data.showLocations = false;\n        MAP.setView(L.latLng(location.lat, location.lng), 12);\n        dispatch(\"location\", location);\n    },\n    /**\n     * Save the current Location\n     */\n    saveLocation() {\n        Locations.save(new Location({\n            name: data.locationName,\n            lat: data.lat,\n            lng: data.lng,\n        })).then((loc) => {\n            Interact.toast(Lang.t(\"general.saved\"));\n        });\n        // Locations.save({\n        //   name: data.locationName,\n        //   lat:\n        // })\n    },\n    renderMap() {\n        if (_el) {\n            let mapTheme = `https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png`;\n            if (document.body.classList.contains(\"theme-dark\")) {\n                mapTheme = `https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png`;\n            }\n            // Add Attribution\n            L.tileLayer(mapTheme, {\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/\">OSM</a> <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n                maxZoom: 18,\n            }).addTo(MAP);\n            var myIcon = L.icon({\n                iconUrl: \"/images/map/map-marker.svg\",\n                iconRetinaUrl: \"/images/map/map-marker.svg\",\n                iconSize: [32, 32],\n                iconAnchor: [9, 21],\n                popupAnchor: [0, -14],\n            });\n            let latLngArray = locations.map((loc) => {\n                return [loc.lat, loc.lng];\n            });\n            // Quick Add Marker Function\n            let addMarker = (latLng, name, click) => {\n                let mkr = new L.marker(latLng, {\n                    icon: myIcon,\n                });\n                // If location name is present (TODO) show it in a popup\n                if (name) {\n                    mkr.bindPopup(name);\n                }\n                mkr.on(\"click\", click);\n                mkr.addTo(MAP);\n            };\n            /**\n             * PIN RENDERING\n             * If maxDistance between them is greater than 0.1 km\n             */\n            let maxDistance = distance.furthest(latLngArray);\n            if (maxDistance > 0.4) {\n                // Loop over locaitons provided in props\n                locations.forEach((loc) => {\n                    addMarker([loc.lat, loc.lng], loc.name, () => {\n                        // On Marker Click\n                        data.activeLocation = loc;\n                        // If a log exists - show the Share Log popup\n                        if (loc.log) {\n                            Interact.shareLog(loc.log);\n                        }\n                    });\n                });\n                let connectTheDots = (data) => {\n                    // TODO: Look at making this curved dotted lines - and not just straight ones\n                    var c = [];\n                    data.forEach((location) => {\n                        c.push([location.lat, location.lng]);\n                    });\n                    return c;\n                };\n                //let pathLine =\n                L.polyline(connectTheDots(locations), {\n                    color: \"rgba(2.7%, 52.5%, 100%, 0.378)\",\n                }).addTo(MAP);\n            }\n            else {\n                // Max Distance is not enough to justify rendering a bunch of pins\n                if (locations.length) {\n                    addMarker([locations[0].lat, locations[0].lng], locations[0].name, () => {\n                        data.activeLocation = locations[0];\n                        if (data.activeLocation.log) {\n                            Interact.shareLog(data.activeLocation.log);\n                        }\n                    });\n                }\n            }\n            // Make the map fit the bounds of all locations provided\n            if (latLngArray.length) {\n                MAP.fitBounds(latLngArray);\n            }\n            MAP.invalidateSize();\n        }\n    },\n    getLocation(lat, lng) {\n        return new Promise((resolve, reject) => {\n            geocodeService\n                .reverse()\n                .latlng([lat, lng])\n                .run((error, result) => {\n                resolve((result || {}).address || \"Unknown\");\n            });\n        });\n    },\n};\n// Reactive Location Lookup\n// $: getLocation = () => {\n//   return new Promise(resolve => {\n//     // If activeLocation is not null\n//     if (data.activeLocation) {\n//       // Look up lat long\n//       methods\n//         .getLocation(data.activeLocation.lat, data.activeLocation.lng)\n//         .then(address => {\n//           resolve(address);\n//         });\n//     } else {\n//       resolve(null);\n//     }\n//   });\n// };\nlet check = 1;\n// On Mount\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    initAndRender();\n}));\n</script>\n\n<style lang=\"scss\">.n-map-container {\n  background-color: var(--color-solid);\n  position: relative;\n  min-height: 100%;\n  flex-grow: 1;\n  flex-shrink: 1; }\n  .n-map-container .n-map-wrapper {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 1; }\n\n.n-map-container .location-name {\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  font-weight: bold;\n  font-size: 0.9rem;\n  height: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: stretch;\n  transition: height 0.2s ease-in-out;\n  z-index: 1000;\n  padding: 0px 5px;\n  background-color: var(--color-solid);\n  border-top: solid 1px var(--color-faded);\n  color: var(--color-inverse);\n  text-align: center;\n  z-index: 2;\n  box-shadow: 0px -6px 10px rgba(0, 0, 0, 0.1); }\n  .n-map-container .location-name .row {\n    margin: 0;\n    flex-wrap: nowrap; }\n  .n-map-container .location-name .locations {\n    width: 100%; }\n  .n-map-container .location-name.expanded {\n    z-index: 2001;\n    max-height: 300px;\n    flex-grow: 1;\n    height: auto;\n    max-height: 300px;\n    overflow: scroll;\n    padding: 0; }\n    .n-map-container .location-name.expanded .row {\n      min-height: 50px; }\n    .n-map-container .location-name.expanded .locations.list {\n      border-top: solid 1px var(--color-faded);\n      overflow-y: scroll;\n      display: flex;\n      flex-direction: column;\n      align-content: stretch; }\n      .n-map-container .location-name.expanded .locations.list .right {\n        margin-left: 0px; }\n  .n-map-container .location-name .row {\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-items: center;\n    justify-content: stretch; }\n    .n-map-container .location-name .row .name {\n      text-align: left;\n      width: calc(100% - 90px);\n      margin: 0 auto;\n      font-size: 0.7rem;\n      line-height: 0.8rem;\n      align-self: center;\n      flex-grow: 1;\n      flex-shrink: 1;\n      padding: 0 4px; }\n\n.picker-cover {\n  pointer-events: none;\n  position: absolute;\n  top: -27px;\n  bottom: 0;\n  left: 12px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000; }\n  .picker-cover svg {\n    fill: red;\n    opacity: 0.5; }\n\n.map-lock-cover {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0);\n  z-index: 2000; }\n\n.n-map-container .n-map {\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n  flex-shrink: 1; }\n</style>\n\n<div\n  bind:this={_el}\n  class=\"{className} n-map-container {small ? 'small ' : ''}\"\n  style=\"{height ? `height: ${height}px;` : `min-height: ${data.height}px;`}\n  {style}\">\n  {#if lock}\n    <div class=\"map-lock-cover\" />\n  {/if}\n  {#if picker}\n    <div class=\"picker-cover\">\n      <div class=\"picker-target\">\n        <svg\n          version=\"1.1\"\n          id=\"Capa_1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          x=\"0px\"\n          y=\"0px\"\n          viewBox=\"0 0 60 60\"\n          height=\"120\"\n          style=\"enable-background:new 0 0 60 60;\"\n          xml:space=\"preserve\">\n          <g>\n            <path\n              d=\"M42,29h-5.08c-0.441-3.059-2.861-5.479-5.92-5.92V18c0-0.553-0.447-1-1-1s-1,0.447-1,1v5.08\n              c-3.059,0.441-5.479,2.862-5.92,5.92H18c-0.553,0-1,0.447-1,1s0.447,1,1,1h5.08c0.441,3.059,2.861,5.479,5.92,5.92V42\n              c0,0.553,0.447,1,1,1s1-0.447,1-1v-5.08c3.059-0.441,5.479-2.862,5.92-5.92H42c0.553,0,1-0.447,1-1S42.553,29,42,29z M30,35\n              c-2.757,0-5-2.243-5-5s2.243-5,5-5s5,2.243,5,5S32.757,35,30,35z\" />\n          </g>\n        </svg>\n      </div>\n    </div>\n  {/if}\n  <div class=\"n-map-wrapper\" style=\"bottom:{picker ? '1px' : '0'}\">\n    <div {id} class=\"n-map\" />\n  </div>\n\n</div>\n",
    "<script>\n  //svelte\n  import { createEventDispatcher } from \"svelte\";\n  import { tap } from \"@sveltejs/gestures\";\n  import Button from \"../../components/button/button.svelte\";\n\n  // Props\n  export let value = \"\";\n\n  // Consts\n  const dispatch = createEventDispatcher();\n\n  // Methods\n  const select = (num) => () => (value += num);\n  const clear = () => (value = \"\");\n  const submit = (event) => {\n    setTimeout(() => {\n      dispatch(\"submit\");\n      event.stopPropagation();\n    }, 10);\n  };\n</script>\n\n<style lang=\"scss\">.keypad {\n  display: grid;\n  grid-template-columns: repeat(3, 5em);\n  grid-template-rows: repeat(4, 3em);\n  grid-gap: 0.5em; }\n\n:global(.keypad button) {\n  color: #fff; }\n  :global(.keypad button):hover {\n    color: #fff; }\n</style>\n\n<div class=\"keypad\">\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(1)}>1</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(2)}>2</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(3)}>3</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(4)}>4</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(5)}>5</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(6)}>6</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(7)}>7</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(8)}>8</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(9)}>9</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" disabled={!value} on:click={clear}>Clear</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" on:click={select(0)}>0</Button>\n  <Button delay={0} shape=\"round\" color=\"transparent\" disabled={!value} on:click={submit}>Submit</Button>\n</div>\n",
    "<script>\n  // Components\n  import Keypad from \"./keypad.svelte\";\n  // Stores\n  import { UserStore } from \"../../store/user-store\";\n  import nid from \"../../modules/nid/nid\";\n\n  import Storage from \"../../modules/storage/storage\";\n  import { onMount } from \"svelte\";\n  import { Interact } from \"../../store/interact\";\n\n  let _pin;\n  let pin;\n  let locked = false;\n  $: view = _pin ? _pin.replace(/\\d(?!$)/g, \" • \") : \"Enter Pin\";\n  $: shouldLock = $UserStore.meta.lock || false;\n  $: accessPin = $UserStore.meta.access_pin || null;\n  $: if (accessPin) {\n    if (accessPin == pin) {\n      locked = false;\n    } else {\n      locked = shouldLock;\n    }\n  }\n\n  const methods = {\n    submit() {\n      // encode the pin\n      pin = nid(_pin);\n      if (pin !== accessPin) {\n        Interact.alert(`Invalid Pin`, \"Please try again.\");\n        _pin = \"\";\n      }\n    },\n    shake() {\n      alert(\"Incorrect Pin\");\n    },\n  };\n</script>\n\n<style>\n  h1 {\n    color: #fff;\n    margin-bottom: 20px;\n    border-bottom: solid 1px rgba(255, 255, 255, 0.2);\n    padding-bottom: 20px;\n    width: 100%;\n    text-align: center;\n  }\n</style>\n\n<div class=\"lock-screen full-screen flex-column bg-primary-bright {locked && accessPin ? 'visible' : 'hidden'}\">\n  <h1>{view}</h1>\n  <Keypad bind:value={_pin} on:submit={methods.submit} />\n</div>\n",
    "<script>\n  // components\n  import NText from \"../../components/text/text.svelte\";\n  import NModal from \"../../components/modal/modal.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import Dymoji from \"../../components/dymoji/dymoji.svelte\";\n\n  //Utils\n  import { createEventDispatcher } from \"svelte\";\n  import { fade } from \"svelte/transition\";\n\n  // Stores\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import { PeopleStore } from \"../../store/People-store\";\n  import { Interact } from \"../../store/interact\";\n  import { ContextStore } from \"../../store/context-store\";\n  import { Lang } from \"../../store/lang\";\n  import Button from \"../../components/button/button.svelte\";\n\n  // Props\n  export let show = false;\n  export let multiple = false;\n  // export let multiple = false;\n\n  // Consts\n  const dispatch = createEventDispatcher();\n\n  // State\n  let state = {\n    selected: [],\n    items: [],\n    multiple,\n  };\n\n  function onDoubleTap(item) {\n    state.selected = [item];\n    dispatch(\"select\", state.selected);\n  }\n\n  // Holder of the alphabet for the list\n  let alphaGroup = {};\n\n  // When tracker store loads. Turn trackers into array sorted by label\n  $: type = $Interact.selector.type;\n\n  let isShown = false;\n  $: if ($Interact.selector.show && !isShown) {\n    isShown = true;\n    switch ($Interact.selector.type) {\n      case \"tracker\":\n        state.title = multiple ? \"Select Trackers\" : \"Select a Tracker\";\n        state.items = Object.keys($TrackerStore.trackers || {})\n          .map((tag) => {\n            return $TrackerStore.trackers[tag];\n          })\n          .sort((a, b) => {\n            return a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1;\n          });\n        break;\n\n      case \"person\":\n        state.title = multiple ? \"Select People\" : \"Select a Person\";\n\n        state.items = Object.keys($PeopleStore.People || {})\n          .map((username) => {\n            return $PeopleStore.People[username];\n          })\n          .sort((a, b) => {\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\n          });\n        break;\n\n      case \"context\":\n        state.title = \"Select Context\";\n\n        state.items = Object.keys($ContextStore || {})\n          .map((tag) => {\n            return $ContextStore[tag];\n          })\n          .sort((a, b) => {\n            return a > b ? 1 : -1;\n          });\n        break;\n    }\n  } else if ($Interact.selector.show == false && isShown) {\n    isShown = false;\n    state.selected = [];\n  }\n\n  // When selected, auto create an array of selected trackers\n  // $: state.selectedArray = Object.keys(state.selected).map(tag => {\n  //   alphaGroup = {};\n  //   return state.selected[tag];\n  // });\n\n  $: if (state.selected) {\n    alphaGroup = {};\n  }\n\n  // If show changes, set selected to notihng\n\n  // Methods\n  const methods = {\n    toggle(item) {\n      if (multiple) {\n        let index = state.selected.indexOf(item);\n        if (index > -1) {\n          // unselect\n          state.selected.splice(index, 1);\n        } else {\n          state.selected.push(item);\n        }\n      } else {\n        state.selected = [item];\n      }\n      state.selected = state.selected;\n    },\n    close() {\n      dispatch(\"cancel\");\n    },\n    // Check if a letter has been shown\n    alphaGroupExists(item) {\n      if (state.items.length > 10) {\n        // get first letter\n        let alpha = item.substr(0, 1).toLowerCase();\n        // If it has value - return true...\n        if (alphaGroup.hasOwnProperty(alpha)) {\n          return true;\n        } else {\n          // Else - populate the alphaGroup, then return false\n          alphaGroup[alpha] = true;\n          return false;\n        }\n      } else {\n        // if it's less than 10 trackers - just show them without the letters\n        return true;\n      }\n    },\n  };\n</script>\n\n<style lang=\"scss\">:global(.tracker-selector-modal .sticky-top) {\n  position: sticky;\n  top: 0px; }\n</style>\n\n{#if show}\n  <NModal title={state.title} type=\"fullscreen\" className=\"tracker-selector-modal\" allowClose={true} on:close={methods.close}>\n\n    {#if state.items.length == 0}\n      <NItem class=\"text-inverse-2\">Nothing found</NItem>\n    {/if}\n\n    {#if type == 'tracker'}\n      <div class=\"list trackers\">\n        {#each state.items as item}\n          {#if !methods.alphaGroupExists(item.label)}\n            <NItem className=\"bg-light text-faded sticky-top\" title={item.label.substr(0, 1).toUpperCase()} />\n          {/if}\n          <NItem\n            clickable\n            className=\"bottom-line\"\n            title={item.label}\n            on:dbltap={() => {\n              onDoubleTap(item);\n            }}\n            on:click={() => {\n              methods.toggle(item);\n            }}>\n            <span slot=\"left\">\n              <NText size=\"lg\">{item.emoji}</NText>\n            </span>\n            <span slot=\"right\">\n              {#if state.selected.indexOf(item) > -1}\n                <NIcon name=\"radioFilled\" className=\"fill-primary-bright\" />\n              {:else}\n                <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n              {/if}\n            </span>\n          </NItem>\n        {/each}\n      </div>\n    {:else if type == 'person'}\n      <!-- It's a person list -->\n      <div class=\"list People\">\n        {#each state.items as person}\n          {#if !methods.alphaGroupExists(person.displayName)}\n            <NItem className=\"bg-light text-faded sticky-top\" title={person.displayName.substr(0, 1).toUpperCase()} />\n          {/if}\n          <NItem\n            clickable\n            className=\"bottom-line {state.selected.indexOf(person) > -1 ? 'bg-selected' : ''}\"\n            title={person.displayName}\n            on:click={() => {\n              methods.toggle(person);\n            }}>\n            <span slot=\"left\">\n              <Dymoji username={person.username} size=\"24\" />\n            </span>\n            <span slot=\"right\">\n              {#if state.selected.indexOf(person) > -1}\n                <NIcon name=\"radioFilled\" className=\"fill-primary-bright\" />\n              {:else}\n                <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n              {/if}\n            </span>\n          </NItem>\n        {/each}\n      </div>\n    {:else if type == 'context'}\n      <div class=\"list context\">\n        {#each state.items as context}\n          {#if !methods.alphaGroupExists(context)}\n            <NItem className=\"bg-light text-faded sticky-top\" title={context.substr(0, 1).toUpperCase()} />\n          {/if}\n          <NItem\n            clickable\n            className=\"bottom-line {state.selected.indexOf(context) > -1 ? 'bg-selected' : ''}\"\n            title={'+' + context}\n            on:click={() => {\n              methods.toggle(context);\n            }}>\n            <span slot=\"right\">\n              {#if state.selected.indexOf(context) > -1}\n                <NIcon name=\"radioFilled\" className=\"fill-primary-bright\" />\n              {:else}\n                <NIcon name=\"radio\" className=\"fill-primary-bright\" />\n              {/if}\n            </span>\n          </NItem>\n        {/each}\n      </div>\n    {/if}\n    <div slot=\"footer\" class=\"n-row\">\n      <Button color=\"light\" size=\"lg\" className=\"w-100 mr-2\" on:click={methods.close}>{Lang.t('general.close')}</Button>\n      {#if state.selected.length > 0}\n        <Button\n          size=\"lg\"\n          className=\"w-100\"\n          on:click={() => {\n            dispatch('select', state.selected);\n          }}>\n          {Lang.t('general.done', 'Done')}\n        </Button>\n      {/if}\n    </div>\n  </NModal>\n{/if}\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n;\n;\nimport ListItem from \"../../components/list-item/list-item.svelte\";\nimport BarChart from \"../../components/charts/bar-chart-2.svelte\";\nimport { Interact } from \"../../store/interact\";\nimport Icon from \"../../components/icon/icon.svelte\";\nimport { createEventDispatcher, onMount } from \"svelte\";\nimport { Lang } from \"../../store/lang\";\nimport { TrackerStore } from \"../../store/tracker-store\";\nimport { UserStore } from \"../../store/user-store\";\nimport StatsRef from \"../../modules/stats/stats-ref\";\nimport extract from \"../../utils/extract/extract\";\nimport tick from \"../../utils/tick/tick\";\nimport dataDistance from \"../../modules/data-distance/data-distance\";\nimport math from \"../../utils/math/math\";\nimport Button from \"../../components/button/button.svelte\";\nimport Spinner from \"../../components/spinner/spinner.svelte\";\nimport Text from \"../../components/text/text.svelte\";\nimport Toast from \"../../components/toast/toast.svelte\";\nconst dispatch = createEventDispatcher();\nexport let stats;\nexport let fromDate;\nexport let toDate;\nexport let timeSpan;\nexport let remember;\nexport let selected;\nconst state = {\n    compare: [],\n    selected: {\n        index: null,\n    },\n};\nlet lastTracker;\nonMount(() => {\n    loadSavedCompares();\n});\nfunction compareTracker() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let trackers = yield Interact.select(\"tracker\", true);\n        if (trackers.length) {\n            for (var i = 0; i < trackers.length; i++) {\n                const tracker = trackers[i];\n                const compareObj = yield getTrackerStats(tracker);\n                state.compare.push(compareObj);\n            }\n            state.compare = state.compare;\n            rememberCompare();\n        }\n    });\n}\nfunction rememberCompare() {\n    let comparing = state.compare.map((statRef) => statRef.getSearchTerm());\n    remember(\"compare\", comparing);\n}\nfunction loadSavedCompares() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let savedCompares = remember(\"compare\");\n        // If we do - then lets load them each up\n        if (state.compare.length == 0 && savedCompares) {\n            // Loop over compares\n            (savedCompares || [])\n                .filter((row) => row)\n                .forEach((searchTerm) => {\n                let type = extract.toElement(searchTerm);\n                type.obj = type.type == \"tracker\" ? TrackerStore.byTag(type.id) : {};\n                state.compare.push(new StatsRef({\n                    id: `compare-${Math.random()}`,\n                    type: type.type,\n                    key: type.id,\n                    math: type.obj.math || \"sum\",\n                    label: type.id,\n                    base: type.obj,\n                    is24Hour: $UserStore.meta.is24Hour,\n                }));\n            });\n        }\n        // Put it here to show its loading\n        state.compare = state.compare;\n        // Get Stats for Compares\n        for (let i = 0; i < state.compare.length; i++) {\n            state.compare[i].getStats(timeSpan, fromDate, toDate, false).then(() => {\n                state.compare = state.compare;\n            });\n        }\n        state.compare = state.compare;\n    });\n} // end load saved compares\nfunction comparePerson() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let People = yield Interact.select(\"person\", true);\n        if (People.length) {\n            for (var i = 0; i < People.length; i++) {\n                const person = People[i];\n                let compareObj = new StatsRef({\n                    type: \"person\",\n                    key: person.username,\n                    label: person.displayName,\n                    base: person,\n                    is24Hour: $UserStore.meta.is24Hour,\n                });\n                yield compareObj.getStats(timeSpan, fromDate, toDate);\n                state.compare.push(compareObj);\n            }\n            state.compare = state.compare;\n            rememberCompare();\n        }\n    });\n}\nfunction compareContext() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let contexts = yield Interact.select(\"context\", true);\n        if (contexts.length) {\n            for (var i = 0; i < contexts.length; i++) {\n                const context = contexts[i];\n                let compareObj = new StatsRef({\n                    type: \"context\",\n                    key: context,\n                    label: context,\n                    base: context,\n                    is24Hour: $UserStore.meta.is24Hour,\n                });\n                yield compareObj.getStats(timeSpan, fromDate, toDate);\n                state.compare.push(compareObj);\n            }\n            state.compare = state.compare;\n            rememberCompare();\n        }\n    });\n}\nfunction compareSearchTerm() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let item = yield Interact.prompt(\"Term\", null);\n        if (item) {\n            let compareObj = new StatsRef({\n                type: \"search\",\n                key: item,\n                label: item,\n                base: item,\n                is24Hour: $UserStore.meta.is24Hour,\n            });\n            yield compareObj.getStats(timeSpan, fromDate, toDate);\n            state.compare.push(compareObj);\n        }\n        state.compare = state.compare;\n        rememberCompare();\n    });\n}\nfunction compareType() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let types = [\"Tracker\", \"Person\", \"Context\", \"Search Term\", \"Pick for me\"];\n        Interact.popmenu({\n            buttons: types.map((type) => {\n                return {\n                    title: `${type}...`,\n                    click() {\n                        return __awaiter(this, void 0, void 0, function* () {\n                            switch (type) {\n                                case \"Tracker\":\n                                    yield compareTracker();\n                                    break;\n                                case \"Person\":\n                                    yield comparePerson();\n                                    break;\n                                case \"Context\":\n                                    yield compareContext();\n                                    break;\n                                case \"Search Term\":\n                                    yield compareSearchTerm();\n                                    break;\n                                case \"Pick for me\":\n                                    yield findRelatedTrackers();\n                                    break;\n                            }\n                        });\n                    },\n                };\n            }),\n        });\n    });\n}\nfunction getTrackerStats(tracker) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let compareObj = new StatsRef({\n            type: \"tracker\",\n            key: tracker.tag,\n            label: tracker.label,\n            base: tracker,\n            is24Hour: $UserStore.meta.is24Hour,\n        });\n        yield compareObj.getStats(timeSpan, fromDate, toDate);\n        return compareObj;\n    });\n}\n/**\n * RSquared\n * A crazy ass function!!!\n * This will load up the the stats for EVERY tracker\n * for the current time period, and run a\n * RSquared distance function on each to identify\n * any that have simular patterns.\n */\nfunction findRelatedTrackers() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Clear Compare\n        state.compare = [];\n        yield tick(200);\n        let compareItems = {};\n        let trackerTags = Object.keys($TrackerStore.trackers);\n        let activeTrackerValues = stats.chart.values.map((point) => point.y);\n        Interact.blocker(`Comparing against ${trackerTags.length} trackers...`, { perm: true });\n        yield tick(20);\n        const _getStats = (tag, index, total) => __awaiter(this, void 0, void 0, function* () {\n            let tracker = $TrackerStore.trackers[tag];\n            Interact.blocker(`Comparing ${math.round(math.percentage(total, index))}%`, { perm: true });\n            yield tick(1);\n            let results = yield getTrackerStats(tracker);\n            if (results.stats.rows.length > 0) {\n                let compareValues = results.stats.chart.values.map((point) => point.y); // get y values\n                let distance = yield dataDistance.score(activeTrackerValues, compareValues); // calculate distance\n                results.distance = distance;\n                compareItems[tag] = {\n                    stats: results,\n                    distance: distance,\n                };\n            }\n            return true;\n        });\n        // Loop over trackers\n        for (var i = 0; i < trackerTags.length; i++) {\n            yield _getStats(trackerTags[i], i, trackerTags.length); // get stats\n        }\n        // Generate Results\n        let maxScore = 0;\n        let results = Object.keys(compareItems)\n            .map((tag) => {\n            return {\n                tag,\n                stats: compareItems[tag].stats,\n                value: compareItems[tag].distance,\n            };\n        })\n            // Remove any 0 values (exact match)\n            .filter((r) => r.value && !isNaN(r.value))\n            .sort((a, b) => {\n            if (a.value > maxScore) {\n                maxScore = a.value;\n            }\n            // Sort by Lowest value\n            return a.value > b.value ? -1 : 1;\n        })\n            // Remove anything over 5000 and only 5\n            .filter((r, index) => {\n            if (index < 11) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        })\n            .map((r) => {\n            r.stats.distance = math.percentage(maxScore, r.value);\n            return r;\n        });\n        // Loop over results\n        for (var i = 0; i < results.length; i++) {\n            let tag = results[i].tag;\n            let tracker = $TrackerStore.trackers[tag];\n            if (tracker) {\n                let stats = compareItems[tag].stats;\n                state.compare.push(stats);\n            }\n        }\n        // Hit it again for svelte array\n        state.compare = state.compare;\n        // Save trackers for later\n        rememberCompare();\n        // Close blocker\n        Interact.stopBlocker();\n        // Interact.toast(\"Compare complete\", { perm: false });\n    });\n}\nfunction removeCompare(compare) {\n    state.compare = state.compare.filter((row) => {\n        return row != compare;\n    });\n    rememberCompare();\n}\n</script>\n\n<style lang=\"scss\">:global(.chart-item.solo.n-item) {\n  margin: 8pt 0;\n  width: calc(100% - 0px);\n  border-radius: 0px;\n  padding: 8px 0;\n  padding-right: 8px; }\n\n:global(.chart-item) {\n  position: relative; }\n  :global(.chart-item) .btn-close {\n    position: absolute;\n    top: 5px;\n    left: 6px;\n    padding: 0;\n    height: 20px;\n    width: 20px;\n    border: solid 1px var(--color-solid-2);\n    background-color: var(--color-solid); }\n    :global(.chart-item) .btn-close svg {\n      height: 18px;\n      width: 18px; }\n\n.distance {\n  font-size: 12px;\n  color: var(--color-solid-3);\n  position: absolute;\n  top: 10px;\n  right: 16px;\n  text-align: center; }\n\n:global(.chart-item .btn-close svg) {\n  fill: var(--color-inverse) !important; }\n</style>\n\n{#if stats}\n  <div class=\"charts\">\n\n    {#each state.compare as compare (compare.id)}\n      {#if compare.stats}\n        <ListItem className=\"solo chart-item\">\n\n          {#if compare.distance}\n            <div class=\"distance\">\n              <strong>{compare.distance.toFixed(0)}</strong>\n            </div>\n          {/if}\n\n          <BarChart\n            height={120}\n            title={`${compare.getSearchTerm()}`}\n            color={compare.getTracker().color}\n            labels={compare.stats.chart.values.map((point) => point.x)}\n            points={compare.stats.chart.values}\n            on:swipeLeft={() => {\n              dispatch('nextDate');\n            }}\n            on:swipeRight={() => {\n              dispatch('previousDate');\n            }}\n            on:more={(evt) => {\n              Interact.onThisDay(evt.detail.date.toDate());\n            }}\n            on:titleClick={(event) => {\n              Interact.openStats(compare.getSearchTerm());\n            }}\n            on:tap={(event) => {\n              dispatch('dateSelected', event.detail);\n            }}\n            activeIndex={selected.index}\n            yFormat={(y) => {\n              return compare.getTracker().displayValue(y);\n            }} />\n          <!--  -->\n\n          <button\n            class=\"btn btn-clear btn-close\"\n            on:click={() => {\n              removeCompare(compare);\n            }}>\n            <Icon name=\"close\" size=\"16\" />\n          </button>\n        </ListItem>\n      {:else}\n        <ListItem className=\"solo chart-item\">\n          <div slot=\"left\" class=\"pl-3\">\n            <Spinner size={18} />\n            <Text size=\"sm\" className=\"ml-2\">{compare.getSearchTerm()}</Text>\n          </div>\n        </ListItem>\n      {/if}\n    {/each}\n  </div>\n\n  {#if state.compare.length == 0}\n    <div class=\"p-2\" />\n  {/if}\n\n  <div class=\"p-2 pt-2 n-row\">\n    <Button className=\"mr-1\" block color=\"light\" on:click={findRelatedTrackers}>{Lang.t('stats.find-related', 'Auto Compare')}...</Button>\n    <Button className=\"ml-1\" block color=\"light\" on:click={compareType}>{Lang.t('stats.select-comparison', 'Select Manually')}...</Button>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { navigate, Router, Route } from \"svelte-routing\";\nimport dayjs from \"dayjs\";\n;\nimport Tracker from \"../../modules/tracker/tracker\";\n;\n;\nimport NLog from \"../../modules/nomie-log/nomie-log\";\nimport StatsV5, { timeSpans } from \"../../modules/stats/statsV5\";\n;\nimport StatsRef from \"../../modules/stats/stats-ref\";\nimport TimeOfDay from \"../../components/time-of-day/time-of-day.svelte\";\nimport DayOfWeek from \"../../components/day-of-week/day-of-week.svelte\";\n;\n;\nimport tick from \"../../utils/tick/tick\";\nimport math from \"../../utils/math/math\";\nimport Storage from \"../../modules/storage/storage\";\nimport DataDistance from \"../../modules/data-distance/data-distance\";\nimport extractor from \"../../utils/extract/extract\";\nimport NModal from \"../../components/modal/modal.svelte\";\nimport Dymoji from \"../../components/dymoji/dymoji.svelte\";\nimport NButtonGroup from \"../../components/button-group/button-group.svelte\";\nimport HScroller from \"../../components/h-scroller/h-scroller.svelte\";\nimport NToolbar from \"../../components/toolbar/toolbar.svelte\";\nimport NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\nimport NItem from \"../../components/list-item/list-item.svelte\";\nimport NSpinner from \"../../components/spinner/spinner.svelte\";\nimport NBarChart from \"../../components/charts/bar-chart-2.svelte\";\nimport NLogList from \"../../components/log-list/log-list.svelte\";\nimport NTimeGrid from \"../../components/day-time-grid/day-time-grid.svelte\";\nimport NIcon from \"../../components/icon/icon.svelte\";\nimport NMap from \"../../containers/map/map.svelte\";\nimport { LedgerStore } from \"../../store/ledger\";\nimport { Interact } from \"../../store/interact\";\nimport { UserStore } from \"../../store/user-store\";\nimport { Lang } from \"../../store/lang\";\nimport { TrackerStore } from \"../../store/tracker-store\";\nimport { PeopleStore } from \"../../store/People-store\";\nimport StatsOverview from \"./stats-overview.svelte\";\nimport StatsCompare from \"./stats-compare.svelte\";\nimport Button from \"../../components/button/button.svelte\";\nimport Text from \"../../components/text/text.svelte\";\nimport NPaths from \"../../paths\";\nimport StatsTime from \"./stats-time.svelte\";\nimport regex from \"../../utils/regex\";\nimport NextPrevCal from \"../../components/next-prev-cal/next-prev-cal.svelte\";\nimport { SearchStore } from \"../../store/search-store\";\nimport NDate from \"../../utils/ndate/ndate\";\n/**\n * Time Spans available for stats - holding of various\n * units and formats\n **/\n/**\n * View Management\n * Available view, labels, and whatnot\n * **/\nconst dataViews = {\n    overview: { id: \"overview\", label: \"Home\" },\n    compare: { id: \"compare\", label: \"Compare\" },\n    map: { id: \"map\", label: \"Map\" },\n    time: { id: \"time\", label: \"Time\" },\n    logs: { id: \"logs\", label: \"Logs\", focused: true },\n};\n// /**\n//  * Type Shortcuts\n//  * **/\n// const types = {\n//   tracker: { prefix: \"#\" },\n//   person: { prefix: \"@\" },\n//   context: { prefix: \"+\" },\n//   location: { prefix: \"\" },\n// };\n/**\n * Remember View Settings\n * A fast way to store UI state in localstorage\n * Good for remembering what they did last\n * **/\nconst viewMemory = new Storage.SideStore(\"stats-memory\");\nfunction remember(key, value) {\n    let base = `${getLastTerm()}-${key}`;\n    if (key && value !== undefined) {\n        viewMemory.put(base, value);\n        return value;\n    }\n    else {\n        return viewMemory.get(base);\n    }\n}\n/**\n * States Modal Main State\n * Its a class because it's getting bit and complicated\n * **/\nclass StatsModalState {\n    constructor() {\n        this.currentTerm = null; // what's the search term @person #tracker +context\n        this.currentColor = \"#444\"; // Default color\n        this.showAnimation = false;\n        this.range = undefined;\n        this.currentColor = \"#444\";\n        this.date = dayjs();\n        this.timeSpan = remember(\"timeSpan\") || \"w\";\n        this.dataView = remember(\"dataView\") || \"overview\";\n        this.timeOption = [];\n        this.viewOption = [];\n        this.loading = true;\n        this.range = undefined;\n        this.stats = null;\n        this.compare = [];\n        this.selected = { index: undefined, rows: null, date: null };\n        this.lookupStack = [];\n        this.related = [];\n        this.trackableElement = undefined;\n        this.tracker = undefined;\n    }\n}\nconst state = new StatsModalState();\nfunction setTimeView(option) {\n    remember(\"timeSpan\", option.id);\n    state.timeSpan = option.id;\n}\nfunction setView(option) {\n    remember(\"dataView\", option.id);\n    state.dataView = option.id;\n}\nfunction getTimeSpan() {\n    return timeSpans[state.timeSpan];\n}\nfunction getTimeViewButtons() {\n    return;\n}\n$: timeViewButtons = Object.keys(timeSpans).map((optionId) => {\n    let option = timeSpans[optionId];\n    return {\n        label: option.label,\n        active: state.timeSpan === optionId,\n        click: () => {\n            setTimeView(option);\n        },\n    };\n});\n$: logViewButtons = [\n    {\n        label: `Only ${state.currentTerm}`,\n        id: \"focused\",\n        active: dataViews.logs.focused,\n        click() {\n            dataViews.logs.focused = true;\n            if (state.selected.index) {\n                setSelected(state.selected);\n            }\n        },\n    },\n    {\n        label: `All Logs`,\n        id: \"all\",\n        active: !dataViews.logs.focused,\n        click() {\n            dataViews.logs.focused = false;\n            if (state.selected) {\n                setSelected(state.selected);\n            }\n        },\n    },\n];\n/**\n * Generate the btn group buttons\n * **/\nfunction getDataViewButtons() {\n    return Object.keys(dataViews)\n        .map((optionId) => {\n        let option = dataViews[optionId];\n        if ((option.excludeFrom || []).indexOf(state.timeSpan) == -1) {\n            return {\n                label: option.label,\n                active: state.dataView === optionId,\n                click: () => {\n                    setView(option);\n                },\n            };\n        }\n        else {\n            return null;\n        }\n    })\n        .filter((row) => row);\n}\n// Close the stat window\nfunction close() {\n    Interact.closeStats();\n}\n// Back from the stack of stats\nfunction back() {\n    Interact.update((state) => {\n        state.stats.terms.pop();\n        return state;\n    });\n    main();\n}\n// Generate a Search term for a text and type\n// for example turn tracker + water into #water\nfunction getSearchTerm(type, text) {\n    let response = \"\";\n    switch (type) {\n        case \"tracker\":\n            response = `#${text}`;\n            break;\n        case \"person\":\n            response = `@${text}`;\n            break;\n        case \"context\":\n            response = `+${text}`;\n            break;\n        default:\n            response = text;\n            break;\n    }\n    return response;\n}\nfunction getTitle() {\n    return getLastTerm();\n}\n/**\n * Get the proper From Date to display\n * BUG: This might have a probelm\n * **/\nfunction getFromDate() {\n    let timespan = getTimeSpan();\n    let fromDate = getToDate()\n        .subtract(timespan.count || 1, timespan.unit)\n        .startOf(\"day\");\n    // If its week or month, add a day to the start - #bug maybe?\n    fromDate = [\"week\"].indexOf(timespan.unit) > -1 ? fromDate.add(1, \"day\") : fromDate;\n    return fromDate;\n}\n/**\n * Get End Date\n * Returns a Dayjs version of the date\n * **/\nfunction getToDate() {\n    let toDate = dayjs(state.date).endOf(\"day\");\n    return toDate;\n}\n/**\n * Get a Trackable Element\n * from a String.\n * **/\nfunction getTrackableElement(str) {\n    let type = extractor.toElement(str);\n    if (type.type == \"tracker\") {\n        type.obj = $TrackerStore.trackers[type.id];\n    }\n    return type;\n}\nfunction onMoreTap() {\n    let buttons = [\n        {\n            title: \"View Streak\",\n            click: () => {\n                Interact.openStreak(state.currentTerm);\n            },\n        },\n        {\n            title: `Edit ${state.currentTerm}`,\n            click: () => {\n                if (state.trackableElement.type == \"tracker\") {\n                    Interact.editTracker(TrackerStore.byTag(state.trackableElement.id));\n                }\n                else if (state.trackableElement.type == \"person\") {\n                    Interact.person(state.trackableElement.id);\n                }\n            },\n        },\n        {\n            title: `Search for ${state.currentTerm}`,\n            click() {\n                close();\n                SearchStore.search(state.trackableElement.prefix + state.trackableElement.id);\n            },\n        },\n    ];\n    Interact.popmenu({ title: \"Options\", buttons });\n}\nfunction onCalendarTap() {\n    let buttons = [];\n    const gotoToday = {\n        title: \"Today\",\n        click: () => {\n            changeDate(dayjs());\n        },\n    };\n    const startOfMonth = {\n        title: \"Start of month\",\n        click: () => {\n            changeDate(state.date.startOf(\"month\").subtract(1, \"day\"));\n        },\n    };\n    const startOfYear = {\n        title: \"Start of year\",\n        click: () => {\n            changeDate(state.date.startOf(\"year\"));\n        },\n    };\n    const startOfWeek = {\n        title: \"Start of week\",\n        click: () => {\n            let date = NDate.setFirstDayOfWeek($UserStore.meta.firstDayOfWeek).getFirstDayOfWeek();\n            changeDate(date.startOf(\"day\"));\n        },\n    };\n    if (dayjs().format(\"DD-MM-YYYY\") !== state.date.format(\"DD-MM-YYYY\")) {\n        buttons.push(gotoToday);\n    }\n    buttons.push(startOfWeek);\n    buttons.push(startOfMonth);\n    buttons.push(startOfYear);\n    //state.trackableElement\n    Interact.popmenu({ title: \"Go to...\", buttons });\n}\nfunction getLastTerm() {\n    let lastTerm = $Interact.stats.terms[$Interact.stats.terms.length - 1];\n    return lastTerm;\n}\nfunction getStats() {\n    return __awaiter(this, void 0, void 0, function* () {\n        state.loading = true;\n        let queryPayload = {\n            search: state.trackableElement,\n            start: getFromDate(),\n            end: getToDate(),\n        };\n        // if day - normalize start and end\n        queryPayload.start = getFromDate();\n        queryPayload.end = getToDate();\n        // Get Logs from the Ledger Store\n        let results = yield LedgerStore.query(queryPayload);\n        // Prep Stats\n        const statsV5 = new StatsV5({});\n        // Generate Stats\n        state.stats = statsV5.generate({\n            rows: results,\n            fromDate: getFromDate(),\n            toDate: getToDate(),\n            mode: state.timeSpan,\n            math: state.tracker.math,\n            trackableElement: state.trackableElement,\n        });\n        // See if we have any saved compares\n        state.related = statsV5.getRelated();\n        yield tick(100);\n        // state.compare = state.compare;\n        state.loading = false;\n    });\n} // end getStats()\nfunction getDayRange() {\n    return state.date.format(`ddd ${dateFormat}`);\n}\nfunction loadPreviousDate() {\n    state.date = dayjs(state.date).subtract(1, getTimeSpan().unit);\n    lastTimeSpan = null;\n}\nfunction loadNextDate() {\n    state.date = dayjs(state.date).add(1, getTimeSpan().unit);\n    lastTimeSpan = null;\n}\nfunction changeDate(date) {\n    state.date = date;\n    lastTimeSpan = null;\n}\nfunction getWeekRange() {\n    const from = getFromDate();\n    const to = getToDate();\n    if (to.format(\"MMM\") !== from.format(\"MMM\")) {\n        return `${from.format(dateFormatShort)} - ${to.format(dateFormat)}`;\n    }\n    else {\n        return `${from.format(dateFormatShort)} - ${to.format(`${dateFormatShort} YYYY`)}`;\n    }\n}\nfunction getCalendarData() {\n    let rows = state.stats.rows\n        .filter((row) => {\n        return new Date(row.end).getMonth() == state.date.toDate().getMonth();\n    })\n        .map((row) => {\n        row.start = new Date(row.start);\n        row.end = new Date(row.end);\n        row.repeat = \"never\";\n        return row;\n    });\n    return rows;\n}\nfunction getLocations() {\n    return state.stats.rows\n        .map((row) => {\n        if (row.lat) {\n            return {\n                lat: row.lat,\n                lng: row.lng,\n                name: row.location,\n                log: row,\n            };\n        }\n        else {\n            return null;\n        }\n    })\n        .filter((row) => row);\n}\nfunction getMonthRange() {\n    const from = getFromDate();\n    const to = getToDate();\n    return `${from.add(1, \"day\").format(dateFormatShort)} - ${to.format(dateFormat)}`;\n}\nfunction getYearRange() {\n    const from = getFromDate();\n    const to = getToDate();\n    return `${from.add(1, \"month\").format(dateFormat)} - ${to.format(dateFormat)}`;\n}\nfunction gettimeRangeText() {\n    let range;\n    switch (state.timeSpan) {\n        case \"d\":\n            range = getDayRange();\n            break;\n        case \"w\":\n            range = getWeekRange();\n            break;\n        case \"m\":\n            range = getMonthRange();\n            break;\n        case \"q\":\n            range = getMonthRange();\n            break;\n        case \"y\":\n            range = getYearRange();\n            break;\n    }\n    return range;\n}\nfunction clearSelected() {\n    state.selected = { index: undefined, rows: null, date: null };\n}\n/**\n * Set Selected ({point})\n * User Selected a Specific Date from the Cart\n */\nfunction setSelected(selected) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (selected && state.selected !== selected) {\n            try {\n                _setSelected(selected);\n            }\n            catch (e) {\n                Interact.error(e.message);\n            }\n        }\n    });\n}\nfunction _setSelected(selected) {\n    return __awaiter(this, void 0, void 0, function* () {\n        state.selected = selected;\n    });\n}\nfunction main() {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield tick(10);\n        // Get term from Interact Store\n        state.currentTerm = $Interact.stats.terms[$Interact.stats.terms.length - 1];\n        // Get range and view options\n        state.range = gettimeRangeText();\n        state.viewOption = getDataViewButtons();\n        // Get trackable element from the latest term\n        state.trackableElement = extractor.toElement(state.currentTerm);\n        // Get Tracker - make a fake one if a person, or context\n        state.tracker = TrackerStore.byTag(state.trackableElement.id);\n        state.currentColor = state.tracker.color;\n        getStats();\n    });\n}\n/** Reactive Functions and Variables **/\nlet lastTimeSpan = state.timeSpan;\n$: if (state.timeSpan && state.timeSpan !== lastTimeSpan) {\n    lastTimeSpan = state.timeSpan;\n    main();\n}\n/**\n * IMPORTANT\n * When the term changes - we must show the new stats\n * Don't sleep on this one.\n */\nlet lastTerms;\n$: if ($Interact.stats.terms.join(\",\") !== lastTerms) {\n    lastTerms = $Interact.stats.terms.join(\",\");\n    main();\n    state.showAnimation = true;\n    setTimeout(() => {\n        state.showAnimation = false;\n    }, 200);\n    setTimeout(() => {\n        state.showAnimation = false;\n    }, 1000);\n}\nlet lastDataView = state.dataView;\n$: if (state.dataView && state.dataView != lastDataView) {\n    lastDataView = state.dataView;\n    state.viewOption = getDataViewButtons();\n}\n$: timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n$: dateFormat = $UserStore.meta.is24Hour ? \"Do MMM YYYY\" : \"MMM Do YYYY\";\n$: dateFormatShort = $UserStore.meta.is24Hour ? \"Do MMM\" : \"MMM Do\";\nfunction onSwipeDown(e) {\n    close();\n}\n</script>\n\n<style lang=\"scss\">:global(.stats-modal) {\n  z-index: 1300 !important; }\n\n.n-list {\n  max-width: 100vw;\n  overflow: hidden; }\n\n:global(.chart-item) {\n  position: relative; }\n\n.time-range {\n  font-size: 0.9rem;\n  font-weight: 500;\n  text-align: center;\n  line-height: 1rem; }\n\n:global(.stats-modal .n-modal) {\n  max-width: 500px !important; }\n</style>\n\n<NModal className=\"stats-modal\" bodyClass=\"bg-solid-1 \" fullscreen closeOnBackgroundTap on:close={close} on:swipeDown={onSwipeDown}>\n  <header slot=\"raw-header\" class=\"box-shadow-float\">\n    {#if $Interact.stats.terms.length > 1}\n      {#each $Interact.stats.terms as term}\n        <div class=\"mock-header mock-header\">\n          <span>{term}</span>\n        </div>\n      {/each}\n    {/if}\n    <div class=\"mock-card-animation animate up {state.showAnimation ? 'visible' : 'hidden'}\" />\n    <NToolbarGrid>\n      <div slot=\"left\" className=\"truncate\" style=\"min-width:100px;\">\n        {#if $Interact.stats.terms.length == 1}\n          <Button shape=\"circle\" color=\"transparent\" on:click={close}>\n            <NIcon name=\"close\" />\n          </Button>\n        {:else}\n          <button class=\"btn btn-clear tap-icon clickable pl-1\" on:click={back}>\n            <NIcon name=\"arrowBack\" size=\"28\" />\n            <small class=\"text-sm text-inverse-2 ml-1 truncate\" style=\"max-width:60px;\">\n              {$Interact.stats.terms[$Interact.stats.terms.length - 2]}\n            </small>\n          </button>\n        {/if}\n      </div>\n\n      <h1 class=\"title truncate\" slot=\"main\">{state.currentTerm}</h1>\n\n      <div slot=\"right\" style=\"min-width:100px\" class=\"toolbar-buttons align-right\">\n        <button class=\"btn btn-clear tap-icon clickable\" on:click={onMoreTap}>\n          <NIcon name=\"more\" />\n        </button>\n      </div>\n    </NToolbarGrid>\n    <div class=\"n-row pb-2 px-2\">\n      <NButtonGroup size=\"sm\" buttons={timeViewButtons} />\n    </div>\n\n    <div class=\"n-toolbar n-row px-3 pt-2 pb-3\">\n      <Text size=\"sm\" bold className=\"filler\" truncate>{state.range}</Text>\n      <NextPrevCal on:next={loadNextDate} on:previous={loadPreviousDate} on:calendar={onCalendarTap} />\n    </div>\n\n    {#if state.loading}\n      <div class=\"container n-panel center-all\" style=\"height:140px;\">\n        <div>\n          <NSpinner size={46} />\n        </div>\n      </div>\n    {/if}\n\n    {#if state.stats && !state.loading}\n      <div class=\"main-chart px-2 pb-1\">\n        <NBarChart\n          height={140}\n          color={state.currentColor}\n          labels={state.stats.chart.values.map((point) => point.x)}\n          points={state.stats.chart.values}\n          on:swipeLeft={loadNextDate}\n          on:swipeRight={loadPreviousDate}\n          on:more={(evt) => {\n            Interact.onThisDay(evt.detail.date.toDate());\n          }}\n          xFormat={(x, index) => {\n            return x;\n          }}\n          yFormat={(y) => {\n            return state.tracker.displayValue(y);\n          }}\n          on:tap={(event) => {\n            setSelected(event.detail);\n          }}\n          activeIndex={state.selected.index} />\n      </div>\n    {/if}\n\n  </header>\n\n  <div slot=\"footer\" class=\"w-100\">\n    <NButtonGroup inverse color={state.currentColor} buttons={state.viewOption} />\n  </div>\n\n  {#if !state.loading}\n    {#if state.dataView == 'compare'}\n      <StatsCompare\n        {remember}\n        fromDate={getFromDate()}\n        toDate={getToDate()}\n        timeSpan={state.timeSpan}\n        stats={state.stats}\n        selected={state.selected}\n        on:dateSelected={(evt) => {\n          setSelected(evt.detail);\n        }} />\n    {/if}\n    {#if state.dataView == 'map'}\n      <NMap small locations={getLocations()} className=\"flex-grow flex-shrink\" />\n    {/if}\n    {#if state.stats}\n      {#if state.dataView == 'overview'}\n        <StatsOverview stats={state.stats} tracker={state.tracker} />\n        <!-- end over view -->\n      {:else if state.dataView == 'time'}\n        <StatsTime color={state.currentColor} term={state.currentTerm} stats={state.stats} />\n      {:else if state.dataView == 'logs'}\n        {#if state.timeSpan == 'y'}\n          <div class=\"p-4 text-sm text-center text-inverse-2\">Logs not yet available for a full year</div>\n        {:else}\n          <!-- {#if state.selected.rows}\n            <NToolbar className=\"text-center mt-2\">\n              <div class=\"filler\" />\n              <NButtonGroup buttons={logViewButtons} />\n              <button class=\"btn btn-badge btn-xs clickable ml-2\" on:click={clearSelected}>\n                {state.selected.point.x}\n                <NIcon name=\"close\" size=\"22\" />\n              </button>\n              <div class=\"filler\" />\n            </NToolbar>\n          {/if} -->\n\n          <NLogList\n            fullDate\n            compact\n            limit={30}\n            logs={state.selected.rows || state.stats.rows}\n            style=\"min-height:100%\"\n            className=\"bg-bg flex-grow flex-shrink\" />\n        {/if}\n      {/if}\n    {/if}\n  {/if}\n</NModal>\n",
    "<script>\n  import NModal from \"../../components/modal/modal.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import NCalendar from \"../../components/calendar/calendar.svelte\";\n  import NToolbarGrid from \"../../components/toolbar/toolbar-grid.svelte\";\n  import NProgressBar from \"../../components/progress-bar/progress-bar.svelte\";\n  import NSpinner from \"../../components/spinner/spinner.svelte\";\n  import NPositivityBar from \"../../components/positivity-bar/positivity-bar.svelte\";\n\n  // Modules and Utils\n  import math from \"../../utils/math/math\";\n  import Tracker from \"../../modules/tracker/tracker\";\n  import dayjs from \"dayjs\";\n  import extractor from \"../../utils/extract/extract\";\n\n  // Stores\n  import { UserStore } from \"../../store/user-store\";\n  import { Interact } from \"../../store/interact\";\n  import { LedgerStore } from \"../../store/ledger\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import NextPrevCal from \"../../components/next-prev-cal/next-prev-cal.svelte\";\n  import Text from \"../../components/text/text.svelte\";\n\n  const timeFormat = $UserStore.meta.is24Hour ? \"HH:mm\" : \"h:mm a\";\n  const dateFormat = $UserStore.meta.is24Hour ? \"MM/DD/YYYY\" : \"MMM D YYYY\";\n  let _elCalendar;\n\n  const state = {\n    date: dayjs().startOf(\"month\"),\n    logs: [],\n    percentage: 0,\n    daysHit: 0,\n    daysTotal: 0,\n    thisMonth: true,\n  };\n\n  function next() {\n    state.date = state.date.add(1, \"month\");\n  }\n\n  function prev() {\n    state.date = state.date.subtract(1, \"month\");\n  }\n\n  let lastStreakShow = null;\n  let trackableElement = null;\n  let tracker = null;\n\n  $: if ($Interact.streak.show && $Interact.streak.show !== lastStreakShow) {\n    lastStreakShow = $Interact.streak.show;\n    trackableElement = extractor.toElement($Interact.streak.show);\n    tracker = TrackerStore.getByTag(trackableElement.id);\n  }\n\n  function getPercentage(rows) {\n    let start = dayjs(state.date).startOf(\"month\");\n    let end = dayjs(start).endOf(\"month\");\n    if (state.thisMonth) {\n      end = dayjs().endOf(\"day\");\n    }\n    let diff = end.diff(start, \"day\") + 1;\n    let final = [];\n    for (var i = 0; i < diff; i++) {\n      let date = dayjs(start).add(i, \"day\");\n      let hasEvent = rows.find((row) => new Date(row.end).toDateString() === date.toDate().toDateString());\n      final.push(hasEvent);\n    }\n    let found = final.filter((r) => r).length;\n    let total = final.length;\n\n    state.daysTotal = total;\n    state.daysHit = found;\n\n    return found / total;\n  }\n\n  async function main() {\n    let payload = {\n      start: state.date.startOf(\"month\"),\n      end: state.date.endOf(\"month\"),\n    };\n    let type = extractor.toElement($Interact.streak.show);\n\n    let logs = await LedgerStore.query({\n      search: type.toSearchTerm($Interact.streak.show),\n      start: payload.start,\n      end: payload.end,\n    });\n\n    logs = logs.map((row) => {\n      row.start = new Date(row.start);\n      row.end = new Date(row.end);\n      row.repeat = \"never\";\n      return row;\n    });\n    state.logs = logs;\n    state.percentage = getPercentage(logs) * 100;\n  }\n\n  let lastDate;\n  $: if ($Interact.streak.show && state.date.format(\"YYYY-MM\") !== lastDate) {\n    lastDate = state.date.format(\"YYYY-MM\");\n    state.thisMonth = lastDate == dayjs().format(\"YYYY-MM\");\n    main();\n  }\n  $: if (!$Interact.streak.show) {\n    state.date = dayjs();\n    lastDate = null;\n  }\n</script>\n\n<style lang=\"scss\">.spinner-container {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--color-solid);\n  box-shadow: var(--box-shadow-neu);\n  border-radius: 50px; }\n</style>\n\n{#if tracker}\n  <NModal show={$Interact.streak.show} type=\"bottom-slideup\">\n    <div slot=\"header\" class=\"w-100\">\n      <NToolbarGrid>\n        <button class=\"btn btn-clear tap-icon\" slot=\"left\" on:click={Interact.closeStreak}>\n          <NIcon name=\"close\" />\n        </button>\n        <main slot=\"main\">{$Interact.streak.show}</main>\n      </NToolbarGrid>\n      <div class=\"n-toolbar n-row px-3\">\n        <Text bold className=\"filler\">{state.date.format('MMM YYYY')}</Text>\n        <NextPrevCal on:next={next} on:previous={prev} hideCal={true} style=\"max-width:80px;\" />\n      </div>\n    </div>\n    <div class=\"p-3\">\n\n      <NCalendar\n        bind:this={_elCalendar}\n        color={tracker.color}\n        {tracker}\n        showHeader={false}\n        on:dayClick={(event) => {\n          state.date = dayjs(event.detail);\n          main();\n        }}\n        initialDate={state.date}\n        events={state.logs} />\n\n      <div class=\"n-panel center-all\">\n\n        <div class=\"n-panel w-50 center-all vertical\">\n          <h1 class=\"text-inverse\">\n            {state.daysHit}\n            <span class=\"text-inverse-3\">of</span>\n            {state.daysTotal}\n          </h1>\n          <small class=\"text-inverse-2\">{math.round(state.percentage, 0)}% of the days</small>\n        </div>\n        <div class=\"n-panel w-50 center-all py-2\">\n          <div class=\"spinner-container\">\n            <NSpinner size=\"120\" speed=\"0\" gap={100 - state.percentage} />\n          </div>\n        </div>\n      </div>\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  import { TrackerDesignerStore } from \"./tracker-designer-store\";\n  import math from \"../../utils/math/math\";\n  import ColorPicker from \"../../components/color-picker/color-picker.svelte\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n</script>\n\n<style lang=\"scss\">:global(.color-grid .color-btn) {\n  margin: 4px; }\n</style>\n\n<div\n  class=\"step emoji n-panel vertical color-grid n-panel scroll-y\n  center-horizontal\">\n\n  <div class=\"container-sm\">\n    <ColorPicker grid={true} bind:value={$TrackerDesignerStore.tracker.color} />\n  </div>\n\n</div>\n",
    "<script>\n  import { TrackerDesignerStore } from \"./tracker-designer-store\";\n  import math from \"../../utils/math/math\";\n  import NItem from \"../../components/list-item/list-item.svelte\";\n  import NInput from \"../../components/input/input.svelte\";\n  let tag = \"\";\n  $: if ($TrackerDesignerStore.tracker) {\n    tag = $TrackerDesignerStore.tracker.toTag($TrackerDesignerStore.tracker.label);\n    if ($TrackerDesignerStore.tracker.emoji == \"⚪️\") {\n      $TrackerDesignerStore.tracker.emoji = math.random([\"💡\", \"🔥\", \"🧐\"]);\n    }\n  }\n</script>\n\n<style lang=\"scss\">input.input-emoji {\n  font-size: 120px;\n  max-width: 100px;\n  min-width: 200px;\n  width: 200px;\n  height: 200px;\n  border-radius: 100px !important;\n  overflow: hidden;\n  text-align: center; }\n</style>\n\n<div class=\"step emoji n-panel vertical center-all\">\n  <NItem title=\"Pick a nice looking Emoji or Initials\" className=\"text-center bg-transparent mb-3\" />\n  <input\n    type=\"input\"\n    on:focus={(evt) => {\n      evt.target.select();\n    }}\n    bind:value={$TrackerDesignerStore.tracker.emoji}\n    class=\"form-control input-lg input-emoji\"\n    placeholder=\"\" />\n\n</div>\n",
    "<script>\n  import { TrackerDesignerStore } from \"./tracker-designer-store\";\n  import { navigate } from \"svelte-routing\";\n  import NPage from \"../../containers/layout/page.svelte\";\n  import NToolbar from \"../../components/toolbar/toolbar.svelte\";\n  import NLayout from \"../layout/layout.svelte\";\n\n  import NTrackerButton from \"../../containers/board/tracker-button.svelte\";\n  import NStepper from \"../../components/stepper/stepper.svelte\";\n  import NIcon from \"../../components/icon/icon.svelte\";\n  import StepLabel from \"./step-label.svelte\";\n  import StepEmoji from \"./step-emoji.svelte\";\n  import StepType from \"./step-type.svelte\";\n  import StepColor from \"./step-color.svelte\";\n  import StepUOM from \"./step-uom.svelte\";\n  import StepDefaults from \"./step-defaults.svelte\";\n  import StepCalc from \"./step-calc.svelte\";\n  import StepPositivity from \"./step-positivity.svelte\";\n\n  // Stores\n  import { Lang } from \"../../store/lang\";\n  import { Interact } from \"../../store/interact\";\n  import { TrackerStore } from \"../../store/tracker-store\";\n  import Text from \"../../components/text/text.svelte\";\n  import Button from \"../../components/button/button.svelte\";\n  import Icon from \"../../components/icon/icon.svelte\";\n\n  let step = 0;\n  let maxSteps = 4;\n  let stepChange = false;\n  let stepCount = 0;\n\n  const cancel = async () => {\n    let confirmed = await Interact.confirm(\"Are you sure?\", \"Any changes will be lost\");\n    if (confirmed) {\n      TrackerDesignerStore.clear();\n      navigate(\"/\");\n    }\n  };\n\n  const saveTracker = async () => {\n    let saved = await TrackerStore.saveTracker($TrackerDesignerStore.tracker);\n    TrackerDesignerStore.clear();\n    navigate(\"/\");\n  };\n\n  const nextStep = () => {\n    let steps = getSteps();\n    if (step < steps.length - 1) {\n      step++;\n    } else if (step == steps.length - 1) {\n      saveTracker();\n    }\n  };\n\n  const previousStep = () => {\n    if (step > -1) {\n      step = step - 1;\n    }\n  };\n\n  const getSteps = () => {\n    const label = {\n      component: StepLabel,\n      title: \"Tracker label\",\n      validate() {\n        return $TrackerDesignerStore.tracker.label.length > 1;\n      },\n    };\n    const positivity = {\n      component: StepPositivity,\n      title: \"Positivity\",\n      validate() {\n        if ($TrackerDesignerStore.tracker.score == \"custom\") {\n          return ($TrackerDesignerStore.tracker.score_calc || []).length > 0;\n        } else {\n          return true;\n        }\n      },\n    };\n    const emoji = {\n      component: StepEmoji,\n      title: \"Select the emoji\",\n      validate() {\n        return $TrackerDesignerStore.tracker.emoji;\n      },\n    };\n    const calc = {\n      title: \"Totals Calculation\",\n      component: StepCalc,\n      validate() {\n        return $TrackerDesignerStore.tracker.math;\n      },\n    };\n    const color = {\n      title: \"Pick Tracker Color\",\n      component: StepColor,\n      validate() {\n        return $TrackerDesignerStore.tracker.color;\n      },\n    };\n    const type = {\n      title: \"Pick Tracker Type\",\n      component: StepType,\n      validate() {\n        return $TrackerDesignerStore.tracker.type;\n      },\n    };\n    const defaultValue = {\n      title: \"Set Tracker Defaults\",\n      component: StepDefaults,\n      validate() {\n        return $TrackerDesignerStore.tracker.type;\n      },\n    };\n    const uom = {\n      title: \"Unit of Measurement\",\n      component: StepUOM,\n      validate() {\n        return $TrackerDesignerStore.tracker.uom;\n      },\n    };\n\n    let _steps = [];\n    switch ($TrackerDesignerStore.tracker.type) {\n      case \"tick\":\n        _steps = [type, label, emoji, color, defaultValue, positivity];\n        break;\n      case \"note\":\n        _steps = [type, label, emoji, color, defaultValue];\n        break;\n      case \"timer\":\n        _steps = [type, defaultValue, label, emoji, color, defaultValue, calc, positivity];\n        break;\n      case \"picker\":\n        _steps = [type, label, emoji, color, defaultValue];\n        break;\n      default:\n        _steps = [type, label, emoji, color, uom, defaultValue, calc, positivity];\n        break;\n    }\n    stepCount = _steps.length;\n    return _steps;\n  };\n\n  let activeStep = getSteps()[step];\n  let canGoNext = false;\n\n  $: if (step !== null) {\n    let steps = getSteps();\n    activeStep = steps[step];\n  }\n  $: if ($TrackerDesignerStore.tracker) {\n    let steps = getSteps();\n    canGoNext = activeStep.validate();\n  }\n</script>\n\n<style lang=\"scss\">:global(.tracker-preview) {\n  margin-bottom: 10px; }\n\n:global(.tracker-preview .n-stepper) {\n  max-width: 400px;\n  width: 100%;\n  margin: 0 auto; }\n\n:global(.tracker-preview .item-ball .username) {\n  display: none; }\n\n@media (min-width: 600px) {\n  .main-body {\n    padding-top: 100px !important; } }\n</style>\n\n<NLayout showTabs={false}>\n\n  <div slot=\"header\" class=\"tracker-preview\" style=\"background-color:{$TrackerDesignerStore.tracker.color};\">\n\n    <div class=\"n-toolbar-grid h-100\" style=\"min-height:60px\">\n      <div class=\"left\">\n        <Button color=\"circle\" className=\"tap-icon\" on:click={cancel}>\n          <NIcon name=\"close\" className=\"fill-white\" size=\"24\" />\n        </Button>\n      </div>\n      <div class=\"main text-white text-center\">\n        <Text size=\"sm\" style=\"color:#FFF\">Step {step + 1}: {activeStep.title}</Text>\n      </div>\n    </div>\n\n    <!-- <div class=\"n-row align-top\">\n      <div class=\"text-bold filler text-center mb-2\">\n        <NTrackerButton tracker={$TrackerDesignerStore.tracker} />\n      </div>\n    </div> -->\n\n  </div>\n\n  <main slot=\"content\" class=\"bg-bg main-body pt-4 pb-4\">\n    {#if activeStep}\n      <svelte:component this={activeStep.component} />\n    {/if}\n  </main>\n\n  <footer slot=\"footer\" class=\"\" style=\"height:60px; background-color:var(--footer-background)\">\n    <div class=\"container-sm pt-1\">\n      <NToolbar className=\"\">\n        <Button on:click={previousStep} disabled={step == 0} color=\"transparent\" block className=\"mr-1 my-2\">\n          {Lang.t('general.back', 'Back')}\n        </Button>\n        <Button on:click={nextStep} block color=\"transparent\" disabled={!canGoNext} className=\"mt-0 text-primary-bright\">\n          {step == getSteps().length - 1 ? Lang.t('general.create', 'Create') : Lang.t('general.next', 'Next')}\n          <Icon name=\"chevronRight\" size=\"20\" className=\"fill-primary-bright\" />\n        </Button>\n      </NToolbar>\n    </div>\n  </footer>\n</NLayout>\n",
    "<script>\n  // components\n\n  import NItem from \"../../../components/list-item/list-item.svelte\";\n  import NModal from \"../../../components/modal/modal.svelte\";\n  import NIcon from \"../../../components/icon/icon.svelte\";\n  import NToggle from \"../../../components/toggle-switch/toggle-switch.svelte\";\n  import NInput from \"../../../components/input/input.svelte\";\n  import ColorPicker from \"../../../components/color-picker/color-picker.svelte\";\n  import AutoComplete from \"../../../components/auto-complete/auto-complete.svelte\";\n  import PickerList from \"../../../components/picker-list/picker-list.svelte\";\n\n  // Utils\n  import { createEventDispatcher } from \"svelte\";\n  import NomieUOM from \"../../../utils/nomie-uom/nomie-uom\";\n  import tick from \"../../../utils/tick/tick\";\n\n  // modules\n  import Tracker from \"../../../modules/tracker/tracker\";\n  import TrackerTypes from \"../../../modules/tracker-types/tracker-types\";\n\n  // containers\n  import PointsEditor from \"../points-editor.svelte\";\n\n  // Stores\n  import config from \"../../../config/appConfig\";\n  import { UserStore } from \"../../../store/user-store\";\n  import { Interact } from \"../../../store/interact\";\n  import { TrackerStore } from \"../../../store/tracker-store\";\n  import { Lang } from \"../../../store/lang\";\n  import { BoardStore } from \"../../../store/boards\";\n  import Text from \"../../../components/text/text.svelte\";\n  import Icon from \"../../../components/icon/icon.svelte\";\n  import Button from \"../../../components/button/button.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let tracker = new Tracker();\n  // export let show = false;\n\n  let data = {\n    groupedUOMs: NomieUOM.toGroupedArray(),\n    types: Object.keys(TrackerTypes).map((id) => {\n      let type = TrackerTypes[id];\n      type.id = id;\n      return type;\n    }),\n    editTag: false,\n    tracker: null,\n  };\n\n  let lastTracker;\n  $: if (tracker && lastTracker != tracker.tag) {\n    lastTracker = tracker.tag;\n    data.tracker = new Tracker(tracker);\n  }\n\n  $: if (data.tracker.type === \"timer\") {\n    data.tracker.uom = \"timer\";\n    data.tracker.min = null;\n    data.tracker.max = null;\n  } else if (data.tracker.uom == \"timer\" && data.tracker.type != \"timer\") {\n    data.tracker.uom = \"num\";\n  } else if (data.tracker.type === \"range\" && isNaN(data.tracker.min)) {\n    data.tracker.min = 1;\n    data.tracker.max = 10;\n  }\n\n  const getTrackerInput = async (target) => {\n    const response = await Interact.trackerInput(data.tracker, {\n      value: data.tracker.default,\n      allowSave: false,\n    });\n    if (response && response.value) {\n      data.tracker[target] = response.value;\n    }\n  };\n\n  async function duplicate() {\n    let duplicated = await TrackerStore.duplicateTracker(data.tracker);\n  }\n\n  async function remove() {\n    let confirmed = await Interact.confirm(\n      Lang.t(\"general.delete-from-nomie\", { thing: tracker.label }),\n      Lang.t(\"tracker.delete-description\")\n    );\n    if (confirmed) {\n      await TrackerStore.deleteTracker(tracker);\n      methods.cancel();\n    }\n  }\n\n  const methods = {\n    tracker_save() {\n      if (!data.tracker.tag || !data.tracker.label) {\n        Interact.alert(\"Missing Data\", \"Please fill out all required fields: title, tag and emoji\");\n      } else {\n        dispatch(\"save\", data.tracker);\n        TrackerStore.saveTracker(data.tracker).then(() => {});\n      }\n    },\n    editTag() {\n      Interact.alert(\n        \"Not Supported\",\n        `Editing Tags is currently not supported. Your best option is to Export your data, and do a search/replace for the tag.`\n      );\n\n      // TODO: Make edit tag work. It when saving the tracker we need to know it's original tag and replace it in the TrackerStore. Right not it just adds a new one since the tag is the key.\n      // Interact.confirm(\n      //   \"Change this Tag?\",\n      //   `If you've tracked with this in the past, use \"Settings > Find and Replace\" to replace #${data.tracker.tag} with your new tag.`\n      // ).then(res => {\n      //   if (res === true) {\n      //     tracker._dirty = true;\n      //   }\n      // });\n    },\n    addTrackerToNote() {\n      Interact.selectTrackers().then((trackers) => {\n        if (trackers) {\n          let trkString = trackers\n            .filter((t) => t)\n            .map((tkr) => {\n              return `#${tkr.tag}`;\n            })\n            .join(\" \");\n          data.tracker.note = `${data.tracker.note || \"\"} ${trkString}`.trim() + \" \";\n        }\n      });\n    },\n    labelChanged(event) {\n      if (data.tracker._dirty) {\n        let tag = event.target.value\n          .trim()\n          .replace(/[^A-Z0-9]/gi, \"_\")\n          .toLowerCase();\n        data.tracker.tag = tag;\n      }\n    },\n    cancel() {\n      data.tracker = new Tracker();\n      dispatch(\"close\");\n    },\n  };\n</script>\n\n<style lang=\"scss\">:global(.n-tracker-editor .n-modal) {\n  background-color: var(--color-bg) !important; }\n</style>\n\n{#if $Interact.trackerEditor.show}\n\n  <div class=\"n-tracker-editor\">\n    <NModal type=\"fullscreen\" allowClose on:close={methods.cancel} style=\"z-index:2002\">\n\n      <header slot=\"header\" class=\"n-toolbar-grid\">\n        <button class=\"left btn btn-clear text-primary-bright\" on:click|preventDefault={methods.cancel}>Cancel</button>\n        <div class=\"main\">Edit {data.tracker.label.length ? data.tracker.label : 'Tracker'}</div>\n        <button class=\"right btn btn-clear text-primary-bright\" on:click={methods.tracker_save}>{Lang.t('general.save')}</button>\n      </header>\n\n      <NItem className=\"item-divider compact\" />\n      <ColorPicker bind:value={data.tracker.color} />\n\n      <div class=\"n-list solo p-2\">\n        <NInput\n          className=\"mb-1\"\n          type=\"text\"\n          name=\"label\"\n          placeholder=\"Tracker Label\"\n          bind:value={data.tracker.label}\n          on:keyup={methods.labelChanged} />\n\n        <NInput\n          solo\n          type=\"text\"\n          name=\"emoji\"\n          on:focus={(event) => {\n            event.detail.target.select();\n          }}\n          inputClass=\"text-lg\"\n          className=\"mb-1\"\n          bind:value={data.tracker.emoji}>\n          <div slot=\"left\" class=\"mr-2 ml-2\">Emoji</div>\n        </NInput>\n\n        {#if data.tracker._dirty}\n          <NInput\n            type=\"text\"\n            name=\"tag\"\n            className=\"mb-1\"\n            placeholder={Lang.t('tracker.tag')}\n            bind:value={data.tracker.tag}\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            maxlength=\"10\"\n            autocapitalize=\"off\"\n            spellcheck=\"false\" />\n        {/if}\n      </div>\n\n      <div class=\"n-list solo p-2\">\n\n        <NInput type=\"select\" name=\"type\" className=\"mb-1\" placeholder={Lang.t('tracker.type')} bind:value={data.tracker.type}>\n          {#each data.types as type}\n            <option value={type.id}>{type.label}</option>\n          {/each}\n        </NInput>\n\n        {#if data.tracker.type == 'picker'}\n          <PickerList mode=\"edit\" canSelect={false} bind:tracker={data.tracker} className=\"px-1\" itemClass=\"px-1\" on:change={(evt) => {}} />\n        {/if}\n\n        {#if data.tracker.type == 'tick'}\n          <NItem\n            title={Lang.t('tracker.save-on-tap')}\n            className=\"py-2 px-1\"\n            description={Lang.t('tracker.save-on-tap-description', 'Automatically save the value when you tap the button.')}>\n            <div slot=\"right\">\n              <NToggle bind:value={data.tracker.one_tap} />\n            </div>\n          </NItem>\n        {/if}\n        {#if data.tracker.type == 'range'}\n          <div class=\"n-row\">\n            <NInput\n              pattern=\"[0-9]*\"\n              inputmode=\"numeric\"\n              className=\"mr-2\"\n              style=\"width:45%;\"\n              name=\"min\"\n              placeholder={Lang.t('tracker.min', 'Min value in range')}\n              on:focus={(e) => {\n                e.detail.target.select();\n              }}\n              bind:value={data.tracker.min}>\n              <span slot=\"left\" class=\"pl-2\">\n                <Text size=\"sm\" faded>Min</Text>\n              </span>\n              <button\n                class=\"btn btn-icon clickable mr-2\"\n                slot=\"right\"\n                on:click={() => {\n                  getTrackerInput('min');\n                }}>\n                <NIcon name=\"addOutline\" />\n              </button>\n            </NInput>\n            <NInput\n              pattern=\"[0-9]*\"\n              inputmode=\"numeric\"\n              className=\"\"\n              style=\"width:45%;\"\n              name=\"max\"\n              placeholder={Lang.t('tracker.max', 'Max value in range')}\n              on:focus={(e) => e.detail.target.select()}\n              bind:value={data.tracker.max}>\n              <span slot=\"left\" class=\"pl-2\">\n                <Text size=\"sm\" faded>Max</Text>\n              </span>\n              <button\n                class=\"btn btn-icon clickable mr-2\"\n                slot=\"right\"\n                on:click={() => {\n                  getTrackerInput('max');\n                }}>\n                <NIcon name=\"addOutline\" />\n              </button>\n            </NInput>\n          </div>\n        {/if}\n\n        {#if data.tracker.type !== 'timer' && data.tracker.type !== 'note' && data.tracker.type !== 'picker'}\n          <NInput placeholder={Lang.t('tracker.measure-by')} type=\"select\" bind:value={data.tracker.uom} className=\"mb-1\">\n            {#each Object.keys(data.groupedUOMs) as groupKey (groupKey)}\n              <option disabled>-- {groupKey}</option>\n              {#each data.groupedUOMs[groupKey] as uom (`${groupKey}-${uom.key}`)}\n                <option value={uom.key} disabled={uom.key == 'time' && data.tracker.type != 'timer'}>{NomieUOM.plural(uom.key)}</option>\n              {/each}\n            {/each}\n          </NInput>\n        {/if}\n        {#if data.tracker.type !== 'note' && data.tracker.type !== 'picker'}\n          <NInput\n            type=\"select\"\n            className=\"mb-1\"\n            name=\"math\"\n            placeholder={Lang.t('tracker.calculate-total', 'Calculate Totals using:')}\n            bind:value={data.tracker.math}>\n            {#each [{ value: 'sum', label: Lang.t('general.sum', 'Sum') }, { value: 'mean', label: Lang.t('general.avg', 'Average') }] as math_key}\n              <option value={math_key.value}>{math_key.label}</option>\n            {/each}\n          </NInput>\n          <NInput\n            pattern=\"[0-9]*\"\n            inputmode=\"numeric\"\n            label={Lang.t('tracker.value', 'Default Value')}\n            placeholder={Lang.t('tracker.default-value', 'Default Value')}\n            bind:value={data.tracker.default}\n            className=\"mb-1\">\n            <span slot=\"right\">\n              {#if data.tracker.default}\n                <Text size=\"xs\" className=\"text-right text-primary-bright\">{data.tracker.displayValue(data.tracker.default)}</Text>\n              {/if}\n            </span>\n            <button\n              class=\"btn btn-icon clickable mr-2\"\n              slot=\"right\"\n              on:click={() => {\n                getTrackerInput('default');\n              }}>\n              <NIcon name=\"addOutline\" />\n            </button>\n          </NInput>\n\n          {#if data.tracker.math !== 'sum'}\n            <NItem className=\"px-1 py-1\" title=\"Ignore Zeros\" description=\"Ignore zero values when averaging\">\n              <div slot=\"right\">\n                <NToggle bind:value={data.tracker.ignore_zeros} />\n              </div>\n            </NItem>\n          {/if}\n        {:else if data.tracker.type == 'note'}\n          <NInput\n            type=\"textarea\"\n            bind:value={data.tracker.note}\n            placeholder={Lang.t('tracker.note-placeholder')}\n            class=\"form-control w-100 mt-2\">\n            <span slot=\"right\">\n              <Button size=\"sm\" icon shape=\"circle\" color=\"transparent\" on:click={methods.addTrackerToNote}>\n                <Icon name=\"addOutline\" />\n              </Button>\n            </span>\n          </NInput>\n\n          <AutoComplete\n            input={data.tracker.note}\n            scroller\n            on:select={async (evt) => {\n              data.tracker.note = evt.detail.note + '';\n            }} />\n          <NItem description={Lang.t('tracker.note-description')} />\n        {/if}\n      </div>\n\n      <div class=\"n-list solo py-1 px-2\">\n        <PointsEditor tracker={data.tracker} />\n      </div>\n\n      {#if data.tracker.type !== 'note' && data.tracker.type !== 'picker'}\n        <div class=\"n-list solo p-2\">\n          <NInput\n            type=\"textarea\"\n            rows=\"2\"\n            label={Lang.t('tracker.include', 'Additional trackers or People to include')}\n            placeholder={Lang.t('tracker.include-placeholder', 'Include other #trackers, @People, +context')}\n            bind:value={data.tracker.include} />\n          <AutoComplete\n            input={data.tracker.include}\n            scroller\n            on:select={async (evt) => {\n              data.tracker.include = evt.detail.note + '';\n            }} />\n          <Text size=\"xs\" faded className=\"my-2\">\n            Automatically insert #trackers, @People, and +context when using this tracker. Pass the value using: #hashtag(*).\n          </Text>\n        </div>\n      {/if}\n\n      <div class=\"p-2\" />\n      <NItem bg=\"transparent\" title={Lang.t('tracker.hide-on-all-board', 'Hide on All Board')}>\n        <div slot=\"right\">\n          <NToggle bind:value={data.tracker.hidden} />\n        </div>\n      </NItem>\n      <div class=\"p-2\" />\n      <NItem on:click={TrackerStore.download(data.tracker)} className=\"bottom-line\">\n        <div class=\"text-primary-bright\">{Lang.t('general.download', 'Download')} .tkr</div>\n        <div slot=\"right\" class=\"text-faded-2\">For Sharing</div>\n      </NItem>\n      <NItem on:click={duplicate} className=\"bottom-line\">\n        <div class=\"text-primary-bright\">{Lang.t('tracker.duplicate-tracker', 'Duplicate Tracker')}</div>\n      </NItem>\n\n      <NItem on:click={remove} className=\"bottom-line\">\n        <div class=\"text-red\">{Lang.t('tracker.remove-tracker', 'Delete Tracker')}</div>\n      </NItem>\n\n      <!-- <button slot=\"footer\" on:click={methods.cancel} class=\"btn btn-light btn-lg flex-grow mr-1\">{Lang.t('general.cancel')}</button>\n      <button slot=\"footer\" class=\"btn btn-primary btn-lg flex-grow ml-1\" on:click={methods.tracker_save}>{Lang.t('general.save')}</button> -->\n      <div slot=\"footer\" />\n    </NModal>\n\n  </div>\n{/if}\n",
    "<script>\n  /**\n   * Tracker Input Mege Component\n   * This is a beast... Brace yourself.\n   * Officialy \"walk through\" - Nov 2 2019\n   */\n\n  // svelte\n  import { createEventDispatcher, onMount } from \"svelte\";\n  import { slide } from \"svelte/transition\";\n\n  // Components\n  import NModal from \"../../../components/modal/modal.svelte\";\n  import NIcon from \"../../../components/icon/icon.svelte\";\n\n  //Container for Slider (range), Keypad and Timer\n  import SliderInput from \"./slider.svelte\";\n  import PickerInput from \"./picker.svelte\";\n  import NTimer from \"./timer.svelte\";\n  import NCalculator from \"../../../components/calculator/calculator.svelte\";\n\n  // Utils\n  import NomieUOM from \"../../../utils/nomie-uom/nomie-uom\";\n\n  // Stores\n  import { TrackerStore } from \"../../../store/tracker-store\";\n  import { Interact } from \"../../../store/interact\";\n  import { Lang } from \"../../../store/lang\";\n  import Icon from \"../../../components/icon/icon.svelte\";\n  import Button from \"../../../components/button/button.svelte\";\n\n  // Props\n  export let tracker = undefined; // You can provide a tracker\n  export let show = undefined; // If it should show or not\n  export let value = undefined; // If a valid is provided\n  export let hideAdd = undefined; // If the Add button should be hidden\n  export let saveLabel = Lang.t(\"general.save\", \"Save\"); // The label of the save Button\n  // Consts\n  const dispatch = createEventDispatcher(); // Setup the dispatcher\n\n  let data = {\n    value: null, // holds current value\n    tracker: null, // holds current tracker\n    ready: false,\n    suffix: \"\",\n    calcUsed: false, // when it's ready\n  };\n\n  // Set up the Methods\n  const methods = {\n    // When the Save is hit\n    onSave() {\n      // Dispatch value and tracker\n      dispatch(\"save\", {\n        value: data.value,\n        tracker: tracker,\n        suffix: data.suffix,\n      });\n    },\n    // When Add is hit\n    onAdd() {\n      // Dispatch add\n      dispatch(\"add\", {\n        value: data.value,\n        tracker: tracker,\n        suffix: data.suffix,\n      });\n    },\n    onCancel() {\n      if (!$Interact.trackerInput.allowSave) {\n        dispatch(\"cancelAll\");\n      } else {\n        dispatch(\"cancel\");\n      }\n    },\n    // When the user starts the time\n    startTimer() {\n      // Set the date to epoch time (best to avoid timezones);\n      data.tracker.started = new Date().getTime();\n      // Start the Timer for this tracker\n      TrackerStore.startTimer(data.tracker);\n      methods.onCancel();\n    },\n    // Stop the Timer\n    stopTimer() {\n      // Get the Seconds between now and when the tracker started\n      data.value = (new Date().getTime() - tracker.started) / 1000;\n      // Clear local\n      data.tracker.started = null;\n      // tell store to stop timer\n      TrackerStore.stopTimer(data.tracker);\n    },\n  };\n\n  // If Tracker Changes\n  // FIres each time something happens to this object\n  $: if (tracker && data.tracker && data.tracker !== tracker) {\n    // Set to local variable\n    setTimeout(() => {\n      // Set to not ready and the new tracker\n      data.ready = true; // TODO: make this lack janky\n      data.tracker = tracker;\n      data.value = tracker.default || 0;\n      data.ready = true;\n      data.suffix = \"\";\n    }, 1);\n  }\n\n  function editTracker() {\n    TrackerStore.trackerOptions(tracker, {\n      click() {\n        Interact.dismissTrackerInput();\n      },\n    });\n    // Interact.editTracker(tracker);\n  }\n\n  // When Component Mounts\n  onMount(() => {\n    // If the value changes, and no data.value exists.\n    if (value && !data.value) {\n      data.value = value;\n    } else {\n      data.value = tracker.default || 0;\n      value = data.value;\n    }\n    data.tracker = tracker;\n    setTimeout(() => {\n      data.ready = true;\n    }, 12);\n  });\n</script>\n\n<style lang=\"scss\">.tracker-input {\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: stretch;\n  flex-grow: 1;\n  height: 100%; }\n  .tracker-input .btn.w-25 {\n    width: 30% !important; }\n    .tracker-input .btn.w-25:first-child {\n      margin-right: 10px; }\n\n:global(.tracker-input .edit-toggle) {\n  position: fixed;\n  top: 20px;\n  z-index: 1000; }\n\n.footer .btn {\n  border-radius: 50px; }\n</style>\n\n<NModal\n  show={show || $Interact.trackerInput.show}\n  type=\"fullscreen\"\n  bodyClass={`${tracker.type == 'picker' ? 'no-scroll' : ''}`}\n  className=\"tracker-input\">\n  <div class=\"n-toolbar-grid n-row\" slot=\"header\">\n    <div class=\"left truncate pl-3\" />\n    <div class=\"main\">\n      <span class=\"animate up text-md {data.ready ? 'visible' : 'hidden'}\">{tracker.emoji} {tracker.label}</span>\n    </div>\n    <button class=\"btn btn-clear tap-icon right\" on:click={editTracker}>\n      <NIcon name=\"more\" size=\"26\" />\n    </button>\n  </div>\n  <!-- Is the data ready -->\n  {#if data.ready === true}\n    <!-- Slide in the input -->\n    <div class=\"input-model type-{tracker.type}\">\n\n      {#if tracker.type === 'range'}\n        <SliderInput\n          {tracker}\n          value={(data.value || tracker.min) + ''}\n          min={(tracker.min || 0) + ''}\n          max={(tracker.max || 0) + ''}\n          on:change={(value) => {\n            data.value = value.detail;\n          }} />\n      {:else if tracker.type === 'picker'}\n        <div class=\"p-2\">\n          <PickerInput\n            {tracker}\n            on:change={(evt) => {\n              data.suffix = evt.detail;\n            }} />\n        </div>\n      {:else if tracker.type === 'value' || tracker.type === 'tick'}\n        <div id=\"keypad-holder\">\n          <NCalculator\n            {value}\n            displayFormat={(input) => {\n              return tracker.displayValue(input || '');\n            }}\n            on:change={(changedValue) => {\n              data.value = changedValue.detail;\n              data = data;\n            }} />\n        </div>\n      {:else if tracker.type === 'timer'}\n        <NTimer\n          tracker={data.tracker}\n          bind:value={data.value}\n          on:change={(event) => {\n            data.value = event.detail;\n          }} />\n      {:else}\n        <div id=\"keypad-holder\">\n          <NCalculator\n            {value}\n            displayFormat={(input) => {\n              return tracker.displayValue(input || '');\n            }}\n            on:change={(value) => {\n              data.value = value.detail;\n            }} />\n        </div>\n      {/if}\n    </div>\n  {/if}\n\n  <div class=\"footer n-toolbar-grid\" slot=\"footer\">\n\n    {#if data.tracker}\n      <div class=\"left\">\n        <Button\n          color=\"transparent\"\n          shape=\"circle\"\n          size=\"lg\"\n          style=\"width:40px; height:40px;\"\n          title=\"Cancel\"\n          on:click={() => {\n            methods.onCancel();\n          }}>\n          <Icon name=\"close\" size=\"40\" />\n        </Button>\n      </div>\n      <!-- end left toolbar -->\n\n      <div class=\"main px-2\">\n\n        {#if (data.tracker.type == 'timer' && data.value && $Interact.trackerInput.allowSave !== false) || (data.tracker.type != 'timer' && $Interact.trackerInput.allowSave !== false)}\n          <Button\n            size=\"lg\"\n            shape=\"round\"\n            block\n            style=\"max-width:130px\"\n            on:click={methods.onSave}\n            className=\"text-white\"\n            title=\"Save this log\">\n            {saveLabel}\n          </Button>\n        {/if}\n\n        {#if data.tracker.type == 'timer' && !data.tracker.started && !data.value && $Interact.trackerInput.allowSave !== false}\n          <Button\n            color=\"success\"\n            shape=\"round\"\n            size=\"lg\"\n            block\n            on:click={methods.startTimer}\n            style=\"max-width:130px\"\n            title=\"Start Timer\"\n            className=\"text-white\">\n            {Lang.t('general.start', 'Start')}\n          </Button>\n        {/if}\n\n        {#if data.tracker.type == 'timer' && data.tracker.started !== null}\n          <Button\n            color=\"danger\"\n            shape=\"round\"\n            size=\"lg\"\n            block\n            on:click={methods.stopTimer}\n            style=\"max-width:130px\"\n            title=\"Stop Timer\"\n            className=\"text-white {data.tracker.started > 0 ? '' : 'd-none'}\">\n            {Lang.t('general.stop', 'Stop')}\n          </Button>\n        {/if}\n\n      </div>\n      <!-- end main toolbar-grid-->\n\n      <div class=\"right\">\n\n        {#if (data.tracker.type !== 'timer' || data.value) && hideAdd !== true}\n          <Button\n            color=\"transparent\"\n            shape=\"circle\"\n            style=\"width:42px; height:42px;\"\n            size=\"lg\"\n            on:click={methods.onAdd}\n            title=\"Add this to the note, but don't save yet\"\n            className={tracker.started ? 'd-none' : ''}>\n            <!-- local hack to make plus match with close-->\n            {#if !$Interact.trackerInput.allowSave}\n              <NIcon name=\"chevronRight\" size=\"40\" />\n            {:else}\n              <NIcon name=\"add\" size=\"46\" />\n            {/if}\n          </Button>\n        {/if}\n      </div>\n      <!-- end toolbar-grid right -->\n    {/if}\n\n  </div>\n\n  <!-- <div\n    class=\"w-25 btn btn-clear {tracker.started ? 'd-inline-block' : 'd-none'}\" /> -->\n</NModal>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  // import ListItem from \"../list-item/list-item.svelte\";\n  // import Input from \"../input/input.svelte\";\n  // import Icon from \"../icon/icon.svelte\";\n  import LabelMeta from \"../../../components/label-meta/label-meta.svelte\";\n  import { TrackerStore } from \"../../../store/tracker-store\";\n  import PickerList from \"../../../components/picker-list/picker-list.svelte\";\n  import Icon from \"../../../components/icon/icon.svelte\";\n  import Input from \"../../../components/input/input.svelte\";\n  import ListItem from \"../../../components/list-item/list-item.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let tracker;\n\n  function fireChange(evt) {\n    dispatch(\"change\", evt.detail);\n  }\n</script>\n\n<style lang=\"scss\">.tracker-input.picker {\n  width: 100%;\n  justify-content: center; }\n</style>\n\n<div class=\"tracker-input picker\">\n  <PickerList {tracker} on:change={fireChange} showHeaderContent={false} />\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import Text from \"../../../components/text/text.svelte\";\n\n  export let min = \"0\";\n  export let max = \"10\";\n  export let value = \"5\";\n  export let tracker = undefined;\n\n  let tempValue;\n\n  $: tempValue = value;\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<style lang=\"scss\">@media (max-width: 599.98px) {\n  .container {\n    padding-left: 0 !important;\n    padding-right: 0 !important; } }\n\n@media (min-width: 980px) {\n  .container.board-container {\n    max-width: 90% !important; } }\n\ninput[type=\"range\"] {\n  background-color: var(--color-solid); }\n\n.tracker-input {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  max-height: 100%;\n  min-height: 200px; }\n  .tracker-input .value {\n    text-align: center;\n    font-size: 2rem;\n    margin: 0 0 20px 0;\n    line-height: 2rem;\n    color: var(--color-inverse);\n    position: absolute;\n    bottom: 10px;\n    z-index: 10; }\n  .tracker-input input[type=\"range\"] {\n    padding: 0 5px;\n    margin: 0 auto;\n    -webkit-appearance: none;\n    width: 46vh;\n    margin: -5.5px 0; }\n    @media (min-width: 600px) {\n      .tracker-input input[type=\"range\"] {\n        width: 40vh; } }\n  .tracker-input input[type=\"range\"]:focus {\n    outline: none; }\n  .tracker-input input[type=\"range\"]::-webkit-slider-runnable-track {\n    width: 46vh;\n    height: 100px;\n    cursor: pointer;\n    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n    background: var(--color-faded);\n    border-radius: 50px;\n    padding: 0 6px;\n    border: 1px solid var(--color-faded-2);\n    position: relative;\n    margin-left: 20px; }\n    @media (min-width: 600px) {\n      .tracker-input input[type=\"range\"]::-webkit-slider-runnable-track {\n        width: 40vh; } }\n  .tracker-input input[type=\"range\"]::-webkit-slider-thumb {\n    height: 90px;\n    width: 90px;\n    border: solid 1px var(--color-faded-2);\n    border-radius: 50px;\n    background: var(--color-solid);\n    box-shadow: var(--box-shadow-float);\n    transform: rotate(90deg);\n    cursor: pointer;\n    -webkit-appearance: none;\n    margin-top: 4px; }\n  .tracker-input input[type=\"range\"]:focus::-webkit-slider-runnable-track {\n    background: var(--color-faded); }\n  .tracker-input input[type=\"range\"]::-moz-range-track {\n    width: 46vh;\n    height: 100px;\n    cursor: pointer;\n    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);\n    background: var(--color-faded);\n    border-radius: 50px;\n    border: 0px solid var(--color-solid-2); }\n    @media (min-width: 600px) {\n      .tracker-input input[type=\"range\"]::-moz-range-track {\n        width: 40vh; } }\n  .tracker-input input[type=\"range\"]::-moz-range-thumb {\n    box-shadow: 5.4px 5.4px 6.5px rgba(0, 0, 0, 0.18), 0px 0px 5.4px rgba(13, 13, 13, 0.18);\n    border: 1px solid var(--color-inverse);\n    height: 90px;\n    width: 90px;\n    border-radius: 45px;\n    background: var(--color-solid-2);\n    cursor: pointer; }\n  .tracker-input input[type=\"range\"] {\n    transform: rotate(-90deg); }\n</style>\n\n<div class=\"tracker-input slider\">\n  <div class=\"value\">\n\n    {#if tracker && tracker.uom !== 'num'}\n      <Text size=\"lg\" bold className=\"text-primary-bright\">{tracker.displayValue(tempValue)}</Text>\n      <Text size=\"sm\" faded>{tempValue}</Text>\n    {:else if tracker}\n      <Text size=\"xxl\" bold>{tempValue}</Text>\n    {/if}\n  </div>\n  <input\n    type=\"range\"\n    bind:value={tempValue}\n    {min}\n    {max}\n    on:change={() => {\n      dispatch('change', parseInt(tempValue));\n    }} />\n\n</div>\n",
    "<script>\n  // components\n  import NText from \"../../../components/text/text.svelte\";\n  import NModal from \"../../../components/modal/modal.svelte\";\n  import NItem from \"../../../components/list-item/list-item.svelte\";\n  import NIcon from \"../../../components/icon/icon.svelte\";\n\n  //Utils\n  import { createEventDispatcher } from \"svelte\";\n  import { fade } from \"svelte/transition\";\n\n  // Stores\n  import { TrackerStore } from \"../../../store/tracker-store\";\n  import { Lang } from \"../../../store/lang\";\n\n  // Props\n  export let show = false;\n  export let multiple = false;\n  // export let multiple = false;\n\n  // Consts\n  const dispatch = createEventDispatcher();\n\n  // State\n  let state = {\n    selected: {},\n    trackers: [],\n    multiple\n  };\n\n  // Holder of the alphabet for the list\n  let alphaGroup = {};\n\n  // When tracker store loads. Turn trackers into array sorted by label\n  $: state.trackers = Object.keys($TrackerStore.trackers || {})\n    .map(tag => {\n      return $TrackerStore.trackers[tag];\n    })\n    .sort((a, b) => {\n      return a.label.substr(0, 1).toLowerCase() >=\n        b.label.substr(0, 1).toLowerCase()\n        ? 1\n        : -1;\n    });\n\n  // When selected, auto create an array of selected trackers\n  $: state.selectedArray = Object.keys(state.selected).map(tag => {\n    alphaGroup = {};\n    return state.selected[tag];\n  });\n\n  // If show changes, set selected to notihng\n  $: if (show) {\n    state.selected = {};\n    alphaGroup = {};\n  }\n\n  // Methods\n  const methods = {\n    toggle(tracker) {\n      if (state.selected.hasOwnProperty(tracker.tag)) {\n        delete state.selected[tracker.tag];\n        data = data;\n      } else {\n        state.selected[tracker.tag] = tracker;\n      }\n    },\n    close() {\n      dispatch(\"cancel\");\n    },\n    // Check if a letter has been shown\n    alphaGroupExists(tracker) {\n      if (state.trackers.length > 10) {\n        // get first letter\n        let alpha = tracker.label.substr(0, 1).toLowerCase();\n        // If it has value - return true...\n        if (alphaGroup.hasOwnProperty(alpha)) {\n          return true;\n        } else {\n          // Else - populate the alphaGroup, then return false\n          alphaGroup[alpha] = true;\n          return false;\n        }\n      } else {\n        // if it's less than 10 trackers - just show them without the letters\n        return true;\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\">:global(.tracker-selector-modal .sticky-top) {\n  position: sticky;\n  top: 0px; }\n</style>\n\n{#if show}\n  <NModal\n    title={Lang.t('tracker.tracker-selector')}\n    type=\"fullscreen\"\n    className=\"tracker-selector-modal\"\n    allowClose={true}\n    on:close={methods.close}>\n    <div class=\"list\">\n      {#each state.trackers as tracker}\n        {#if !methods.alphaGroupExists(tracker)}\n          <NItem\n            className=\"bg-light text-faded sticky-top\"\n            title={tracker.label.substr(0, 1).toUpperCase()} />\n        {/if}\n        <NItem\n          className=\"bottom-line {state.selected.hasOwnProperty(tracker.tag) ? 'bg-selected' : ''}\"\n          title={tracker.label}\n          on:click={() => {\n            methods.toggle(tracker);\n          }}>\n          <span slot=\"left\">\n            <NText size=\"lg\">{tracker.emoji}</NText>\n          </span>\n          <span slot=\"right\">\n            {#if state.selected.hasOwnProperty(tracker.tag)}\n              <NIcon name=\"checkmarkOutline\" className=\"fill-primary-bright\" />\n            {/if}\n          </span>\n        </NItem>\n      {/each}\n    </div>\n    <div slot=\"footer\" class=\"n-row\">\n      <button class=\"btn btn-light btn-lg w-100 mr-2\" on:click={methods.close}>\n        {Lang.t('general.close')}\n      </button>\n      {#if state.selectedArray.length > 0}\n        <button\n          transition:fade\n          class=\"btn btn-primary btn-lg w-100\"\n          on:click={() => {\n            dispatch('select', state.selectedArray);\n          }}>\n          Select\n        </button>\n      {/if}\n    </div>\n  </NModal>\n{/if}\n",
    "<script>\n  /**\n   * History Tab\n   * A big collection of all things history\n   *\n   * TODO: Have it react when the ledger change, not a hard refresh\n   */\n\n  // svelte\n  import { navigate } from \"svelte-routing\";\n  import { onMount, onDestroy } from \"svelte\";\n\n  // components\n  import NItem from \"../components/list-item/list-item.svelte\";\n  import NPoints from \"../components/points/points.svelte\";\n  import NIcon from \"../components/icon/icon.svelte\";\n  import NLogListLoader from \"../components/log-list/log-list-loader.svelte\";\n  import NToolbar from \"../components/toolbar/toolbar.svelte\";\n  import NToolbarGrid from \"../components/toolbar/toolbar-grid.svelte\";\n  import NModal from \"../components/modal/modal.svelte\";\n  import Spinner from \"../components/spinner/spinner.svelte\";\n  import NDatePicker from \"../components/date-picker/date-picker.svelte\";\n  import LogItem from \"../components/list-item-log/list-item-log.svelte\";\n  import NSearchBar from \"../components/search-bar/search-bar.svelte\";\n  import OfflineQueue from \"../components/offline-queue/offline-queue.svelte\";\n\n  import config from \"../config/appConfig\";\n\n  // Containers\n  import NMap from \"../containers/map/map.svelte\";\n  import NLayout from \"../containers/layout/layout.svelte\";\n  // Utils\n  import dayjs from \"dayjs\";\n  import tick from \"../utils/tick/tick\";\n\n  // Stores\n  import { UserStore } from \"../store/user-store\";\n  import { Interact } from \"../store/interact\";\n  import { TrackerStore } from \"../store/tracker-store\";\n  import { LedgerStore } from \"../store/ledger\";\n  import { Lang } from \"../store/lang\";\n\n  import { HistoryPage } from \"../store/history-page\";\n  import { Device } from \"../store/device-store\";\n  import Storage from \"../modules/storage/storage\";\n  import Text from \"../components/text/text.svelte\";\n  import Button from \"../components/button/button.svelte\";\n  import NextPrevCal from \"../components/next-prev-cal/next-prev-cal.svelte\";\n\n  export let location;\n  export let style = undefined;\n\n  let datePicker;\n  let searchInput;\n  let appTitle = null;\n  let showSearch = false;\n\n  const state = {\n    date: dayjs(new Date()),\n    time_format: config.book_time_format,\n    logs: [],\n    trackers: {},\n    ledger: null,\n    searchTerm: \"\",\n    searchResults: null,\n    searchMode: false,\n    selected: {},\n    selectCount: 0,\n    editMode: false,\n    showDatePicker: false,\n    location: {\n      name: null,\n      lat: null,\n      lng: null,\n    },\n    locations: [],\n    loading: true,\n    showAllLocations: false,\n  }; // Assign State to compiled history page\n\n  let refreshing = false;\n\n  let local = {\n    showDatePicker: false,\n    datePickerValue: null,\n    searchMode: false,\n  };\n\n  // $: searchMode = (state.searchTerm || \"\").length ? true : false;\n  let searchMode = false;\n  $: if (state.searchTerm && !searchMode) {\n    searchMode = true;\n  }\n\n  let logs = []; // holder of the logs\n  let searchLogs = undefined; // hodler of searched logs\n  let loading = true;\n  let book = undefined;\n  let locations = [];\n  let dayScore = 0;\n\n  // Used for checking things\n  const checks = {\n    list_date: {},\n  };\n\n  /// Watchers for when we're in edit mode\n  // and when we have selected more than one.\n\n  let isToday = true;\n\n  // If the date changes - check to see if it's still today\n  let activeDate;\n  $: if (state.date && state.date !== activeDate) {\n    activeDate = state.date;\n    isToday = new Date().toDateString() == state.date.toDate().toDateString();\n  }\n\n  // Filter logs for today\n  const filterActiveDate = (log) => {\n    return log.end >= state.date.startOf(\"day\").toDate().getTime() && log.end <= state.date.endOf(\"day\").toDate().getTime();\n  };\n\n  $: appTitle = `History ${state.date.format(\"YYYY-MM-DD\")}`;\n\n  $: if (searchLogs || logs) {\n    locations = (searchLogs || logs)\n      .filter((log) => {\n        return log.lat;\n      })\n      .map((log) => {\n        return {\n          lat: log.lat,\n          lng: log.lng,\n          name: log.location,\n          log: log,\n        };\n      });\n  }\n\n  // Methods\n  const methods = {\n    async textClick(event) {\n      let trackableElement = event.detail;\n      Interact.elementOptions(trackableElement);\n    },\n    async getLogs(fresh) {\n      fresh = fresh === false ? false : true;\n      loading = true;\n      // Query the Ledger for Posts on this day.\n      let canLookup = true;\n      if (Storage.getEngine().name == \"Blockstack\" && $Device.offline == true) {\n        canLookup = false;\n      }\n      if (canLookup) {\n        logs = await LedgerStore.query({\n          start: state.date.startOf(\"day\"),\n          end: state.date.endOf(\"day\"),\n          fresh: fresh,\n        });\n        loading = false;\n      } else {\n        loading = false;\n      }\n\n      return logs || [];\n    },\n    clearLocation() {\n      state.location.name = null;\n      state.location.lat = null;\n      state.location.lng = null;\n    },\n    previous() {\n      methods.getDate(state.date.subtract(1, \"day\"));\n    },\n    getDate(date) {\n      state.date = date;\n      methods.getLogs();\n      methods.scrollTop();\n    },\n    next() {\n      methods.getDate(state.date.add(1, \"day\"));\n    },\n    scrollTop() {\n      document.getElementById(\"nomie-main\").scrollTo(0, 0);\n    },\n    goto(date) {\n      state.date = date;\n      methods.getLogs();\n      methods.scrollTop();\n    },\n    search() {\n      navigate(\"/search\");\n    },\n    // searchChange(evt) {\n    //   state.searchTerm = evt.detail;\n    //   showSearch = false;\n    //   window.scrollTo(0, 0);\n    // },\n    // async onSearchEnter(evt) {\n    //   await tick(100);\n    //   window.scrollTo(0, 0);\n    //   showSearch = true;\n    // },\n    trackerTapped(tracker, log) {\n      Interact.openStats(`#${tracker.tag}`);\n    },\n    personTapped(person, log) {\n      Interact.openStats(`@${person.id}`);\n    },\n    contextTapped(context, log) {\n      Interact.openStats(`+${context.id}`);\n    },\n    showLogOptions(log) {\n      Interact.logOptions(log).then((action) => {\n        if (searchMode) {\n          methods.refreshSearch();\n        }\n      });\n    },\n    selectDate() {\n      let ranges = [\n        {\n          time: 90,\n          title: \"90 Days Back\",\n          unit: \"day\",\n        },\n        {\n          time: 180,\n          title: \"6 Months Back\",\n          unit: \"day\",\n        },\n        {\n          time: 1,\n          title: \"1 Year Back\",\n          unit: \"year\",\n        },\n        {\n          time: 2,\n          title: \"2 Years Back\",\n          unit: \"year\",\n        },\n        {\n          time: -1,\n          title: \"Select Date...\",\n          unit: \"day\",\n        },\n      ];\n\n      if (!isToday) {\n        ranges.unshift({\n          days: 0,\n          title: \"Go to Today\",\n        });\n      }\n\n      Interact.popmenu({\n        buttons: ranges.map((range) => {\n          return {\n            title: range.title,\n            click: async () => {\n              if (range.time == -1) {\n                let date = await Interact.selectDate();\n                if (date) {\n                  methods.goto(dayjs(date));\n                }\n              } else if (range.time === undefined || range.time === 0) {\n                methods.goto(dayjs(new Date()));\n              } else {\n                methods.goto(state.date.subtract(range.time || 0, range.unit || \"day\"));\n              }\n            },\n          };\n        }),\n      });\n    },\n  };\n\n  async function refresh() {\n    refreshing = true;\n    await tick(500);\n    await methods.getLogs(true);\n    await LedgerStore.getMemories();\n    refreshing = false;\n  }\n\n  // If a new Log is added, or changed update the list.\n  let onLogUpdate;\n  let onLogSaved;\n  let onLogsDeleted;\n\n  // WHen mounted.\n  onMount(() => {\n    if ((state.searchTerm || \"\").length > 1 && !searchLogs) {\n      methods.refreshSearch();\n    }\n    window.scrollTo(0, 0);\n    document.body.classList.remove(\"scrolled\");\n    refresh();\n\n    onLogUpdate = LedgerStore.hook(\"onLogUpdate\", async (log) => {\n      await tick(600);\n      refresh();\n    });\n\n    onLogSaved = LedgerStore.hook(\"onLogSaved\", async (log) => {\n      await tick(600);\n      refresh();\n    });\n\n    onLogsDeleted = LedgerStore.hook(\"onLogsDeleted\", async () => {\n      await tick(600);\n      refresh();\n    });\n  });\n  onDestroy(() => {\n    // Unsubscribe\n    onLogSaved();\n    onLogUpdate();\n    onLogsDeleted();\n  });\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">hr {\n  margin: 0;\n  padding: 0;\n  border-top: solid 1px rgba(0, 0, 0, 0.2); }\n\n.history-title {\n  transition: all 0.2s ease-in-out;\n  padding-left: 4px; }\n\n:global(.scrolled .history-title.hide-scrolled) {\n  opacity: 0; }\n\n:global(body .history-title.show-scrolled) {\n  opacity: 0; }\n\n:global(.scrolled .history-title.show-scrolled) {\n  opacity: 1; }\n\n.map-btn {\n  position: absolute;\n  left: 10px;\n  bottom: 10px;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 12px; }\n\n.today-btn {\n  position: fixed;\n  left: 10px;\n  bottom: 10px;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 12px; }\n\n.close-btn {\n  left: auto;\n  right: 0px;\n  bottom: 0px !important; }\n\n.page-history .show-map {\n  height: 200px;\n  min-height: 200px;\n  max-height: 400px; }\n\n.header-date-control {\n  line-height: 100%;\n  flex-grow: 1;\n  flex-shrink: 1; }\n\n:global(.page-history .n-item .n-item:last-child) {\n  border-bottom: none !important; }\n</style>\n\n<NLayout pageTitle={appTitle} {style}>\n\n  <header slot=\"header\">\n    <NToolbar className=\"container px-2\">\n      <Button color=\"none\" shape=\"circle\" className=\"tap-icon\" on:click={methods.search}>\n        <NIcon name=\"search\" size={24} />\n      </Button>\n      <div class=\" filler pl-2 truncate history-title show-scrolled\">\n        <Text>\n          {#if refreshing}\n            <Spinner size=\"16\" />\n          {/if}\n          {state.date.format('ddd')} {state.date.format($UserStore.meta.is24Hour ? 'Do MMM YYYY' : 'MMM Do YYYY')}\n        </Text>\n\n        <!-- end text middle -->\n      </div>\n      <NextPrevCal on:previous={methods.previous} on:next={methods.next} on:calendar={methods.selectDate} {isToday} />\n    </NToolbar>\n\n  </header>\n  <!-- end header-content header -->\n\n  <main slot=\"content\" class=\"page page-history flex-column\">\n\n    <div class=\"container p-0 px-1\">\n      <Text size=\"xl\" bold className=\"history-title px-2 mt-2\">\n        {state.date.format($UserStore.meta.is24Hour ? 'ddd Do MMM YYYY' : 'ddd MMM Do YYYY')}\n      </Text>\n\n      <OfflineQueue />\n      {#if loading}\n        <div class=\"empty-notice\">\n          <Spinner />\n        </div>\n      {:else if logs.length === 0 && !showSearch}\n        {#if !searchMode}\n          <div class=\"empty-notice\" style=\"height:30vh;\">{Lang.t('history.no-records-found')}</div>\n        {/if}\n        <!-- If Logs and Not refreshing  -->\n      {:else}\n        <!-- Loop over logs -->\n        {#each logs as log, index}\n          <LogItem\n            {log}\n            on:textClick={(event) => {\n              methods.textClick(event);\n            }} />\n        {/each}\n\n        <!--\n          on:trackerClick={(event) => {\n              methods.trackerTapped(event.detail.tracker, log);\n            }}\n            on:personClick={(event) => {\n              methods.personTapped(event.detail.person, log);\n            }}\n            on:contextClick={(event) => {\n              methods.contextTapped(event.detail.context, log);\n            }}\n            \n            on:moreClick={(event) => {\n              Interact.logOptions(log).then(() => {});\n            }} \n        -->\n\n        <!--\n          Search Results\n          If Search Mode and We have Logs\n        -->\n      {/if}\n\n    </div>\n\n    <div class=\"bg-primary-bright mt-3\">\n      <div class=\"container p-0\">\n        <!-- Show History if exists -->\n        {#if $LedgerStore.memories.length > 0 && !showSearch && isToday}\n          <div class=\"memories\">\n            {#each $LedgerStore.memories as log}\n              <div class=\"memories-log-header\">\n                <Button\n                  color=\"transparent\"\n                  on:click={() => {\n                    methods.goto(dayjs(log.end));\n                  }}>\n                  From {dayjs(log.end).fromNow()}\n                  <NIcon name=\"chevronRight\" className=\"fill-white\" />\n                </Button>\n              </div>\n              <LogItem\n                fullDate\n                className=\"aged\"\n                {log}\n                on:textClick={(event) => {\n                  methods.textClick(event);\n                }} />\n            {/each}\n          </div>\n        {/if}\n        <!-- end history -->\n      </div>\n    </div>\n\n    {#if !isToday && !searchMode}\n      <button\n        class=\"btn btn-sm btn-light btn-round today-btn\"\n        on:click={() => {\n          methods.goto(dayjs());\n        }}>\n        {Lang.t('general.today')}\n      </button>\n    {/if}\n  </main>\n\n  <div slot=\"bottom\" class=\"map-base\">\n    {#if locations.length && !loading && !state.searchTerm}\n      {#if !state.showAllLocations}\n        <div\n          class=\"mini-map closed\"\n          on:click={() => {\n            state.showAllLocations = !state.showAllLocations;\n          }}>\n          <NMap {locations} />\n        </div>\n      {:else}\n        <div class=\"content-map\">\n          <NMap {locations} />\n          <Button\n            color=\"light\"\n            shape=\"circle\"\n            on:click={() => {\n              state.showAllLocations = !state.showAllLocations;\n            }}>\n            <NIcon name=\"closeFilled\" size=\"32\" />\n          </Button>\n\n        </div>\n      {/if}\n    {/if}\n\n  </div>\n  <!-- end header-content content -->\n\n</NLayout>\n\n{#if state.location.lat}\n  <NModal show={true} title={state.location.name || 'Location'}>\n    <NMap locations={[state.location]} />\n    <button class=\"btn btn-lg btn-primary btn-block mb-0\" on:click={methods.clearLocation} slot=\"footer\">Close</button>\n  </NModal>\n{/if}\n\n{#if local.showDatePicker}\n  <NModal show={true} title={'Select a Date'}>\n    <NDatePicker\n      on:change={(event) => {\n        local.datePickerValue = event.detail;\n      }} />\n    <button\n      class=\"btn btn-lg btn-light btn-block m-0 mr-1\"\n      on:click={() => {\n        local.showDatePicker = false;\n      }}\n      slot=\"footer\">\n      Close\n    </button>\n    <button\n      class=\"btn btn-lg btn-primary btn-block m-0 ml-1\"\n      on:click={() => {\n        local.showDatePicker = false;\n        methods.goto(dayjs(local.datePickerValue));\n      }}\n      slot=\"footer\">\n      Go\n    </button>\n  </NModal>\n{/if}\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onMount } from \"svelte\";\nimport { navigate, Router, Route } from \"svelte-routing\";\nimport dayjs from \"dayjs\";\nimport Spinner from \"../components/spinner/spinner.svelte\";\nimport Tracker from \"../modules/tracker/tracker\";\nimport NLog from \"../modules/nomie-log/nomie-log\";\nimport tick from \"../utils/tick/tick\";\nimport NomieAPICli from \"../modules/nomie-api-cli/nomie-api-cli\";\nimport clipboard from \"../utils/clipboard/clipboard\";\nimport NText from \"../components/text/text.svelte\";\nimport NInput from \"../components/input/input.svelte\";\nimport NIcon from \"../components/icon/icon.svelte\";\nimport NButtonGroup from \"../components/button-group/button-group.svelte\";\nimport NToolbar from \"../components/toolbar/toolbar.svelte\";\nimport NItem from \"../components/list-item/list-item.svelte\";\nimport NToggle from \"../components/toggle-switch/toggle-switch.svelte\";\nimport NBackButton from \"../components/back-button/back-button.svelte\";\nimport NLogItem from \"../components/list-item-log/list-item-log.svelte\";\nimport NLayout from \"../containers/layout/layout.svelte\";\nimport NPage from \"../containers/layout/page.svelte\";\nimport faq from \"../config/faq\";\nimport { LedgerStore } from \"../store/ledger\";\nimport { Interact } from \"../store/interact\";\nimport { UserStore } from \"../store/user-store\";\nimport { NomieAPI } from \"../store/napi\";\nimport { Lang } from \"../store/lang\";\nimport Button from \"../components/button/button.svelte\";\nimport appConfig from \"../config/appConfig\";\nimport Text from \"../components/text/text.svelte\";\nlet NAPI = new NomieAPICli({ domain: \"nomieapi.com/.netlify/functions\" });\nlet state = {\n    registered: false,\n    message: null,\n    ready: false,\n    logs: [],\n    hidden: [],\n    apiKey: null,\n    privateKey: null,\n    view: \"settings\",\n    capturingId: null,\n    apiExample: null,\n    showPrivateKey: false,\n    showExample: false,\n};\n$: autoImportAPI = $NomieAPI.autoImport;\n$: if (state.apiKey) {\n    state.apiExample = JSON.stringify({ note: \"#mood(4)\", api_key: state.apiKey }, null, 2);\n}\nfunction copy(key) {\n    clipboard(key);\n    Interact.toast(\"Copied\");\n}\nfunction installAPI() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let apiKey = null;\n        let privateKey = null;\n        apiKey = yield Interact.prompt(\"API Key\", \"Paste your API key\");\n        privateKey = yield Interact.prompt(\"Private Key\", \"Paste your privatekey\", {\n            valueType: \"textarea\",\n        });\n        let isValue = yield NAPI.testAndSave(apiKey, privateKey);\n        if (isValue) {\n            state.registered = true;\n            state.ready = true;\n            state.apiKey = NAPI.apiKey;\n            state.privateKey = NAPI.privateKey;\n            Interact.alert(Lang.t(\"general.success\", \"Success\"), \"API and Private Key are valid\");\n        }\n        else {\n            Interact.alert(Lang.t(\"general.failure\", \"Failure\"), \"Please check that the API and Private Key are valid\");\n        }\n    });\n}\nconst methods = {\n    init() {\n        // Let's look for NomieAPICli\n        NAPI.onReady(() => {\n            if (NAPI.isRegistered()) {\n                methods.getLogs();\n                state.registered = true;\n                state.ready = true;\n                state.apiKey = NAPI.apiKey;\n                state.privateKey = NAPI.privateKey;\n            }\n            else {\n                // capture.register();\n                state.registered = false;\n                state.ready = true;\n            }\n        });\n    },\n    forget() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let confirmed = yield Interact.confirm(\"Are you sure?\", \"If you saved your API key and private key, you can restore it. Otherwise, it will be lost forever.\");\n            if (confirmed) {\n                yield NAPI.forget();\n                state.registered = false;\n                state.apiKey = null;\n                state.privateKey = null;\n            }\n        });\n    },\n    toggleShowPrivateKey() {\n        state.showPrivateKey = !state.showPrivateKey;\n    },\n    register() {\n        return __awaiter(this, void 0, void 0, function* () {\n            Interact.blocker(\"Requesting an API Key...\");\n            state.message = \"Registering...\";\n            yield NAPI.register();\n            Interact.blocker(\"Installing new API Key...\");\n            yield tick(500);\n            window.location.reload();\n        });\n    },\n    getLogs() {\n        return __awaiter(this, void 0, void 0, function* () {\n            state.ready = false;\n            try {\n                let logs = yield NAPI.logs();\n                state.ready = true;\n                state.logs = logs.sort((a, b) => {\n                    return a.date > b.date ? -1 : 1;\n                });\n            }\n            catch (e) {\n                console.error(e);\n                state.ready = true;\n            }\n            return state.logs;\n        });\n    },\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield NAPI.clear();\n            state.logs = [];\n        });\n    },\n    unregister() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let confirmed = yield Interact.confirm(\"Destroy this API Key?\", \"This cannot be undone\");\n            if (confirmed === true) {\n                try {\n                    yield NAPI.unregister();\n                    state.registered = false;\n                }\n                catch (e) {\n                    Interact.error(e.message);\n                }\n            }\n        });\n    },\n    confirmClear() {\n        Interact.confirm(\"Clear Logs?\", \"This will delete the remaining items and cannot be undone.\").then((res) => {\n            if (res) {\n                methods.clear();\n            }\n        });\n    },\n    capture(log) {\n        return __awaiter(this, void 0, void 0, function* () {\n            state.capturingId = log.id;\n            yield tick(400);\n            try {\n                // Converting APIv1 Log to Nomie\n                let response = yield NomieAPI.import([log]);\n                state.hidden.push(log.id);\n                state.hidden = state.hidden;\n                if (state.logs.length == state.hidden.length) {\n                    // They've done all of them - clear it.\n                    methods.clear();\n                }\n            }\n            catch (e) {\n                console.error(e.message);\n            }\n        });\n    },\n    setView(view) {\n        state.view = view;\n        if (view === \"captured\") {\n            methods.getLogs();\n        }\n    },\n};\nfunction toLog(apiLog) {\n    let log = new NLog(apiLog);\n    log.end = dayjs(apiLog.date).valueOf();\n    return log;\n}\nonMount(() => {\n    methods.init();\n});\n</script>\n\n<style>\n  .n-list {\n    max-width: 100vw;\n    overflow: hidden;\n  }\n</style>\n\n<NLayout className=\"stats\" showTabs={false}>\n\n  <header slot=\"header\">\n    <div class=\"container\">\n      <div class=\"n-toolbar-grid\">\n        <div class=\"left\">\n          <NBackButton />\n        </div>\n        <div class=\"main\">\n          <h1 class=\"title\">Nomie API</h1>\n        </div>\n        <div class=\"right\">\n          {#if state.registered}\n            <button class=\"btn btn-clear tap-text mr-2\" on:click={methods.getLogs}>Check</button>\n          {/if}\n        </div>\n      </div>\n      <div class=\"n-row px-3 container\">\n        {#if state.ready && state.registered}\n          <NButtonGroup\n            buttons={[{ label: 'Settings', active: state.view == 'settings', click() {\n                  methods.setView('settings');\n                } }, { label: `Captured (${state.logs.length})`, active: state.view == 'captured', click() {\n                  methods.setView('captured');\n                } }]} />\n        {/if}\n      </div>\n    </div>\n  </header>\n\n  <div class=\"container\">\n    <div item-divider class=\"pt-4\" />\n    {#if !state.ready}\n      <div class=\"empty-notice\">\n        <Spinner />\n      </div>\n    {:else if state.ready && !state.registered}\n      <NItem className=\"clickable text-primary solo text-center mb-3\" on:click={methods.register} title=\"Generate API Key...\" />\n\n      <NItem className=\"just-content\">\n        <p>\n          Generating an API will create a unique public/private key combination. The public key is stored in the Nomie API data store, your\n          private key will be stored in Nomie.\n        </p>\n        <p class=\"mt-2\">\n          When you POST data with the provided API, your content is encrypted with the public key. Meaning, only your private key can\n          decrypt the content.\n        </p>\n        <p class=\"mt-2\">\n          FREE Plans have 10 slots to hold data. Each time you import into Nomie it will clear all the slots. This will help limit run away\n          web service calls.\n        </p>\n      </NItem>\n\n      <NItem className=\"clickable text-primary mt-4 solo text-center mb-3\" on:click={installAPI} title=\"Manually set API/Private Key...\" />\n    {:else if state.view === 'captured'}\n      <div class=\"n-list\">\n        {#each state.logs as apiLog, index}\n          {#if state.hidden.indexOf(apiLog.id) === -1}\n            <NLogItem hideDelete log={toLog(apiLog)} />\n            <div class=\"n-row px-2\">\n\n              <Button\n                color=\"success\"\n                block\n                disabled={state.capturingId === apiLog.id}\n                on:click={() => {\n                  methods.capture(apiLog);\n                }}>\n                {#if state.capturingId === apiLog.id}\n                  <Spinner color=\"#FFF\" size={24} />\n                  {Lang.t('general.saving', 'Saving')}\n                {:else}\n                  <NIcon name=\"checkmarkOutline\" className=\"fill-white mr-2\" />\n                  {Lang.t('general.accept', 'Accept')}\n                {/if}\n              </Button>\n            </div>\n          {/if}\n          <hr />\n        {/each}\n\n      </div>\n      {#if state.logs.length > state.hidden.length}\n        <NItem className=\"bg-transparent mb-3\">\n          <button on:click={methods.confirmClear} class=\"btn btn-outlined btn-danger mr-1 btn-block my-0\">\n            <NIcon name=\"closeOutline\" className=\"fill-white mr-2\" />\n            Clear Remaining\n          </button>\n        </NItem>\n      {/if}\n      {#if !state.logs.length}\n        <div class=\"empty-notice\">No recent logs captured</div>\n      {/if}\n    {:else}\n      <!-- We're In the Settings Tab\n        -->\n      <NItem title=\"Auto Accept\" className=\"solo py-2 mb-3\" description=\"Auto import and accept API logs\">\n        <div slot=\"right\">\n          <NToggle\n            bind:value={autoImportAPI}\n            on:change={(event) => {\n              if (autoImportAPI === true) {\n                NomieAPI.disableAutoImport();\n              } else {\n                NomieAPI.enableAutoImport();\n              }\n            }} />\n        </div>\n      </NItem>\n\n      <div class=\"n-list mb-3\">\n        <NItem className=\"\">\n          <NInput label=\"Your API Key\" bind:value={state.apiKey}>\n            <div slot=\"right\">\n              <Button\n                className=\"tap-icon\"\n                color=\"transparent\"\n                shape=\"circle\"\n                on:click={() => {\n                  copy(state.apiKey);\n                }}>\n                <NIcon name=\"copy\" size=\"24\" className=\"fill-primary-bright\" />\n              </Button>\n            </div>\n          </NInput>\n          <!-- <div>\n          <input type=\"text\" class=\"form-control mt-1\" value={state.apiKey} />\n        </div> -->\n        </NItem>\n        <NItem\n          delay={0}\n          compact\n          clickable\n          title=\"Private Key\"\n          className=\"py-1\"\n          on:click={() => (state.showPrivateKey = !state.showPrivateKey)}>\n          <button class=\"btn btn-clear text-primary-bright\" slot=\"right\">\n            <NIcon size=\"16\" name=\"chevron{state.showPrivateKey ? 'Up' : 'Down'}\" />\n          </button>\n        </NItem>\n        {#if state.showPrivateKey}\n          <NItem className=\"px-3 pb-3\">\n            <div>\n              <textarea type=\"text\" class=\"form-control text-sm mt-1\" style=\"min-height:100px;\" value={state.privateKey} />\n              <div\n                class=\"p-2 text-center text-primary-bright text-sm\"\n                on:click={() => {\n                  copy(state.privateKey);\n                }}>\n                <NIcon name=\"copy\" size={20} className=\"fill-primary-bright mr-2\" />\n                Copy Private Key\n              </div>\n            </div>\n          </NItem>\n        {/if}\n      </div>\n\n      <div class=\"n-list mt-2 mb-2\">\n        <NItem title=\"Example POST\" clickable delay={0} on:click={() => (state.showExample = !state.showExample)}>\n          <div slot=\"right\">\n            <NIcon name=\"chevron{state.showExample ? 'Up' : 'Down'}\" />\n          </div>\n        </NItem>\n        {#if state.showExample}\n          <NItem>\n            <textarea class=\"form-control\" style=\"height:90px; font-size:11px; font-family:monospace\" bind:value={state.apiExample} />\n          </NItem>\n          <NItem compact title=\"URL\" className=\"py-0\">\n            <div slot=\"right\" class=\"n-row\">\n              {appConfig.api}/log\n              <Button\n                className=\"tap-icon\"\n                color=\"transparent\"\n                shape=\"circle\"\n                on:click={() => {\n                  copy(`${appConfig.api}/log`);\n                }}>\n                <NIcon name=\"copy\" size=\"24\" className=\"fill-primary-bright\" />\n              </Button>\n            </div>\n          </NItem>\n          <NItem compact title=\"METHOD\" className=\"py-0\">\n            <span slot=\"right\">POST application/json</span>\n          </NItem>\n          <NItem itemDivider compact topLine>Fields</NItem>\n          <NItem compact title=\"note (required)\" className=\"py-1\">\n            <Text size=\"sm\" faded>Accepts any text, including #tracker, @People, etc.</Text>\n          </NItem>\n          <NItem compact title=\"api_key (required)\" className=\"py-1\">\n            <Text size=\"sm\" faded>The api key provided above</Text>\n          </NItem>\n\n          <NItem compact title=\"date (optional)\" className=\"py-1\">\n            <Text size=\"sm\" faded>Any javascript friend Date format</Text>\n          </NItem>\n\n          <NItem compact title=\"lat (optional)\" className=\"py-1\">\n            <Text size=\"sm\" faded>Records Latitude</Text>\n          </NItem>\n\n          <NItem compact title=\"lng (optional)\" className=\"py-1\">\n            <Text size=\"sm\" faded>Records Longitude</Text>\n          </NItem>\n\n          <NItem compact title=\"source (optional)\" className=\"py-1 mb-2\">\n            <Text size=\"sm\" faded>Source of the request (not currently displayed)</Text>\n          </NItem>\n\n          <!-- <p class=\"text-sm mt-1\">\n              <strong>FIELDS</strong>\n              <br />\n              <strong>note *</strong>\n              Accepts any text, including #tracker, @People, etc.\n              <br />\n              <strong>api_key *</strong>\n              The api key provided above\n              <br />\n              <strong>date</strong>\n              Any javascript friendly date format\n              <br />\n              <strong>lat</strong>\n              Latitude\n              <br />\n              <strong>lng</strong>\n              Longitude\n              <br />\n              <strong>source</strong>\n              Source of the request (not currently displayed)\n              <br />\n            </p> -->\n        {/if}\n      </div>\n\n      <div class=\"mt-4\" />\n      <NItem itemDivider>Danger Zone</NItem>\n      <NItem title=\"Forget API Key...\" className=\"text-red\" on:click={methods.forget} />\n      <NItem title=\"Destroy API Key...\" className=\"text-red\" on:click={methods.unregister} />\n    {/if}\n  </div>\n\n</NLayout>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { navigate, Router, Route } from \"svelte-routing\";\nimport { onMount, onDestroy } from \"svelte\";\nimport NItem from \"../components/list-item/list-item.svelte\";\nimport Icon from \"../components/icon/icon.svelte\";\nimport NLogListLoader from \"../components/log-list/log-list-loader.svelte\";\nimport Spinner from \"../components/spinner/spinner.svelte\";\nimport LogItem from \"../components/list-item-log/list-item-log.svelte\";\nimport NSearchBar from \"../components/search-bar/search-bar.svelte\";\nimport config from \"../config/appConfig\";\nimport NMap from \"../containers/map/map.svelte\";\nimport NLayout from \"../containers/layout/layout.svelte\";\nimport dayjs from \"dayjs\";\nimport tick from \"../utils/tick/tick\";\nimport { Interact } from \"../store/interact\";\nimport { Lang } from \"../store/lang\";\nimport { Device } from \"../store/device-store\";\nimport Storage from \"../modules/storage/storage\";\nimport { getURLParams } from \"../utils/url-parser/url-parser\";\nimport global from \"../config/appConfig\";\nimport Text from \"../components/text/text.svelte\";\nimport Button from \"../components/button/button.svelte\";\nimport { SearchStore, SearchTerm } from \"../store/search-store\";\nexport const location = undefined;\nexport const style = undefined;\nconst SEARCHES_PATH = `${global.data_root}/searches`;\nlet searchInput;\nlet appTitle = null;\nlet showSearch = false;\nlet logResults = [];\nlet searchTerm;\nconst state = {\n    date: dayjs(new Date()),\n    searchTerm: searchTerm,\n    editMode: false,\n    showAllLocations: false,\n}; // Assign State to compiled history page\n$: state.searchTerm = $SearchStore.active;\nlet refreshing = false;\nlet loading = true;\nlet book = undefined;\nlet locations = [];\nlet mode = \"view\";\nlet refreshMap = false;\n// let dayScore = 0;\n$: appTitle = `🔍 Search ${(state.searchTerm || {}).term || \"\"}`;\n$: if (logResults) {\n    refreshMap = true;\n    setTimeout(() => {\n        refreshMap = false;\n    }, 12);\n}\nfunction toggleEditMode() {\n    if (mode == \"edit\") {\n        mode = \"view\";\n    }\n    else {\n        mode = \"edit\";\n    }\n}\n// Methods\nconst methods = {\n    doSearch(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            $SearchStore.active = null;\n            let trackableElement = event.detail;\n            tick(100);\n            if (trackableElement.type == \"tracker\") {\n                $SearchStore.active = new SearchTerm(`#${trackableElement.id}`);\n            }\n            else {\n                $SearchStore.active = new SearchTerm(`${trackableElement.raw}`);\n            }\n            showSearch = true;\n            methods.onSearchEnter(event);\n        });\n    },\n    textClick(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let trackableElement = event.detail;\n            Interact.elementOptions(trackableElement);\n        });\n    },\n    clearSearch() {\n        window.history.replaceState({}, document.title, window.location.href.split(\"?\")[0]);\n        showSearch = false;\n        $SearchStore.active = null;\n    },\n    searchChange(evt) {\n        let term = typeof evt == \"string\" ? evt : evt.detail;\n        SearchStore.search(term);\n        window.scrollTo(0, 0);\n    },\n    onSearchEnter(evt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            methods.searchChange(evt);\n            yield tick(100);\n            window.scrollTo(0, 0);\n            showSearch = true;\n        });\n    },\n};\nfunction back() {\n    if (state.searchTerm && state.searchTerm.term) {\n        methods.clearSearch();\n    }\n    else {\n        navigate(\"/history\");\n        // window.history.back();\n    }\n}\nfunction refresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n        refreshing = true;\n        refreshing = false;\n    });\n}\n// If a new Log is added, or changed update the list.\nlet onLogUpdate;\nlet onLogSaved;\nlet onLogsDeleted;\nfunction deleteSearch(searchTerm) {\n    SearchStore.remove(searchTerm);\n}\nonMount(() => {\n    window.scrollTo(0, 0);\n});\n</script>\n\n<style lang=\"scss\" type=\"text/scss\">.map-btn {\n  position: absolute;\n  left: 10px;\n  bottom: 10px;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 12px; }\n\n.page-search .show-map {\n  height: 200px;\n  min-height: 200px;\n  max-height: 400px; }\n\n:global(.page-search .n-item .n-item:last-child) {\n  border-bottom: none !important; }\n</style>\n\n<NLayout pageTitle={appTitle} showTabs={false}>\n\n  <header slot=\"header\">\n    <div class=\"n-row container h-100 px-2\">\n      <Button color=\"transparent\" shape=\"circle\" icon className=\"tap-icon mr-2\" on:click={back}>\n        {#if state.searchTerm && state.searchTerm.term}\n          <Icon name=\"close\" />\n        {:else}\n          <Icon name=\"arrowBack\" />\n        {/if}\n      </Button>\n      <div class=\"filler\">\n        <!-- on:change={methods.searchChange} -->\n        <NSearchBar\n          showClose={false}\n          className=\"filler\"\n          searchTerm={(state.searchTerm || {}).term || ''}\n          placeholder=\"Search History...\"\n          on:clear={methods.clearSearch}\n          on:search={methods.onSearchEnter} />\n      </div>\n\n    </div>\n\n    <!-- hasResults={(searchLogs || []).length > 0} -->\n\n  </header>\n  <!-- end header-content header -->\n\n  <main slot=\"content\" class=\"page page-search\">\n\n    <div class=\"container p-0\">\n      {#if state.searchTerm && state.searchTerm.term}\n        <NLogListLoader\n          fullDate={true}\n          bind:results={logResults}\n          term={state.searchTerm.term}\n          limit={20}\n          className=\"bg-transparent\"\n          on:textClick={(event) => {\n            methods.textClick(event);\n          }}\n          on:moreClick={(event) => {\n            Interact.logOptions(event.detail).then(() => {});\n          }} />\n      {:else}\n        {#if $SearchStore.saved.length}\n          <NItem itemDivider compact className=\"bg-transparent\">\n            Previous Searches\n            <div slot=\"right\">\n              {#if mode != 'edit'}\n                <Button\n                  color=\"transparent\"\n                  size=\"sm\"\n                  on:click={() => {\n                    toggleEditMode();\n                  }}>\n                  {Lang.t('general.edit', 'Edit')}\n                </Button>\n              {:else}\n                <Button\n                  size=\"sm\"\n                  color=\"transparent\"\n                  className=\"text-red\"\n                  on:click={() => {\n                    toggleEditMode();\n                  }}>\n                  {Lang.t('general.done', 'Done')}\n                </Button>\n              {/if}\n            </div>\n          </NItem>\n          {#each $SearchStore.saved as searchTerm (searchTerm.term)}\n            <NItem\n              clickable={mode !== 'edit'}\n              bottomLine\n              on:click={(evt) => {\n                if (mode == 'view') {\n                  $SearchStore.active = searchTerm;\n                  methods.onSearchEnter({ detail: searchTerm });\n                }\n              }}>\n              <Text>{searchTerm.term}</Text>\n              <div slot=\"right\">\n                {#if mode == 'edit'}\n                  <Button\n                    size=\"sm\"\n                    color=\"danger\"\n                    on:click={() => {\n                      deleteSearch(searchTerm);\n                    }}>\n                    Delete\n                  </Button>\n                {/if}\n              </div>\n            </NItem>\n          {/each}\n        {/if}\n        <div class=\"empty-notice\">\n          <div style=\"width:250px;\">\n            {#if !$SearchStore.saved.length}\n              <Icon name=\"search\" size=\"120\" className=\"fill-primary-bright mb-4\" />\n            {/if}\n            <Text size=\"lg\" className=\"mb-2\">History Search</Text>\n            <Text size=\"sm\" faded>\n              Nome will search 6 months at a time, starting from the most recent records. Use AND and OR to refine your search.\n            </Text>\n          </div>\n        </div>\n      {/if}\n\n      <!-- end history -->\n\n    </div>\n    <!--\n      {#if state.searchTerm && logResults.length && !refreshMap}\n      {#if !state.showAllLocations}\n        <div\n          class=\"mini-map closed\"\n          on:click={() => {\n            state.showAllLocations = !state.showAllLocations;\n          }}>\n          <NMap records={logResults} />\n        </div>\n      {:else}\n        <div class=\"mini-map opened\">\n          <NMap records={logResults} />\n          <Button\n            color=\"light\"\n            shape=\"circle\"\n            on:click={() => {\n              state.showAllLocations = !state.showAllLocations;\n            }}>\n            <Icon name=\"closeFilled\" size=\"32\" />\n          </Button>\n        </div>\n      {/if}\n    {/if}\n    -->\n\n  </main>\n  <!-- end header-content content -->\n\n</NLayout>\n",
    "<script>\n  \n  //Vendors\n  import { navigate, Link } from \"svelte-routing\";\n  import { onMount } from \"svelte\";\n\n  import SocialShare from \"../modules/share/share\";\n  import Storage from \"../modules/storage/storage\";\n  // Components\n  import NItem from \"../components/list-item/list-item.svelte\";\n\n  import NIcon from \"../components/icon/icon.svelte\";\n  import NToggle from \"../components/toggle-switch/toggle-switch.svelte\";\n  import NToolbar from \"../components/toolbar/toolbar.svelte\";\n  import NButtonGroup from \"../components/button-group/button-group.svelte\";\n  import BlockstackOptions from \"../components/storage/blockstack.svelte\";\n  import LocalstorageOptions from \"../components/storage/localstorage.svelte\";\n  import PouchDBOptions from \"../components/storage/pouchdb.svelte\";\n\n  // Containers\n  import StorageManager from \"../containers/storage/storage.svelte\";\n  import ImporterModal from \"../containers/importer/importer.svelte\";\n  import MassEditor from \"../containers/mass-editor/mass-editor.svelte\";\n\n  import NLayout from \"../containers/layout/layout.svelte\";\n\n  // Vendors\n  import dayjs from \"dayjs\";\n  import localforage from \"localforage\";\n\n  // Stores\n  import { UserStore } from \"../store/user-store\";\n  import { LedgerStore } from \"../store/ledger\";\n  import { Interact } from \"../store/interact\";\n  import { TrackerStore } from \"../store/tracker-store\";\n  import { BoardStore } from \"../store/boards\";\n  import { NomieAPI } from \"../store/napi\";\n  import { Lang } from \"../store/lang\";\n  import { PeopleStore } from \"../store/People-store\";\n  import { Device } from \"../store/device-store\";\n  import { ContextStore } from \"../store/context-store\";\n\n  // Config\n  import config from \"../config/appConfig\";\n  import Features from \"../containers/settings/features.svelte\";\n  import Tweaks from \"../containers/settings/tweaks.svelte\";\n  import Text from \"../components/text/text.svelte\";\n  import Button from \"../components/button/button.svelte\";\n  import Icon from \"../components/icon/icon.svelte\";\n  import { AppStore } from \"../store/app-store\";\n\n  export const location = undefined;\n  export const style = undefined;\n\n  // consts\n  // const Export = new Exporter();\n\n  let data = {\n    signedIn: false,\n    files: [],\n    showMassEditor: false,\n  };\n\n  $: alwaysLocate = $UserStore.alwaysLocate;\n\n  let ledger = null;\n  let trackers = null;\n  // let user = null;\n  let fileInput;\n  let showImporter = false;\n\n  let st = 0;\n  function specialTap() {\n    st = st + 1;\n    if (st > 9) {\n      UserStore.unlockHiddenFeatures();\n      Interact.alert(\"🎁 Special Features Unlocked\", \"Hey you! 💘\");\n    }\n  }\n\n  let methods = {\n    sign_out() {\n      UserStore.signout();\n    },\n    share() {\n      SocialShare(`My life goal is to help you increase your purchasing power, while still achieving your life's goals and objectives! Create an account today It's FREE`, \"https://grader.app\");\n    },\n    locations() {\n      Interact.pickLocation();\n    },\n    sign_in() {\n      UserStore.redirectToSignIn();\n    },\n    closeMassEditor() {\n      data.showMassEditor = false;\n    },\n    bookAge(date) {\n      return dayjs(`${date}-01`).fromNow();\n    },\n    faq() {\n      navigate(\"/faq\");\n    },\n    shop() {\n      navigate(\"/shop\");\n    },\n\n    settingChange() {\n      UserStore.saveMeta();\n    },\n    async deleteEverything() {\n      try {\n        let res = await Interact.confirm(\"DANGER ZONE!\", `This will destroy all of your data in Grader including your points!. Are you sure?`, \"Destroy\");\n        if (res) {\n          res = await Interact.confirm(\n            \"Sorry! One last time.. Really?\",\n            `You will basically be starting over from scratch, ... You good with that?`,\n            \"Destroy!\"\n          );\n\n          if (res === true) {\n            Interact.blocker(\"Deleting data...\");\n            let files = await Storage.list();\n\n            let promises = [];\n            files.forEach((file) => {\n              promises.push(Storage.delete(file));\n            });\n            await Promise.all(promises);\n            await localforage.clear();\n            localStorage.clear();\n            Interact.stopBlocker();\n            await Interact.alert(\"Done\", \"Your data has been destroyed.\");\n\n            window.location.href = \"/\";\n          }\n        } // end if confirmed\n      } catch (e) {\n        Interact.alert(Lang.t(\"general.error\"), e.message);\n      }\n    },\n    switchStorage(type) {\n      let from = $UserStore.storageType;\n      let to = type;\n      let conf = confirm(\n        `${Lang.t(\n          \"storage.switch\",\n          `Switch from ${from} to ${to}? You can always switch back. \n\nNote: Your data will not automatically move over. You'll first need to export it, then you can import into this new storage.`\n        )}`\n      );\n      if (conf === true) {\n        if ([\"local\", \"pouchdb\", \"blockstack\"].indexOf(to) > -1) {\n          UserStore.setStorage(to);\n          Interact.reload();\n        } else {\n          alert(`Error: ${to} is not valid`);\n        }\n      }\n    },\n    storageMenu() {\n      let buttons = [\n        {\n          title: `${$UserStore.storageType === \"local\" ? \"✓\" : \"\"} ${Lang.t(\"storage.local_title\", \"This Device Only\")}`,\n          description: Lang.t(\"storage.local_description\", \"Good for getting started, but make sure you backup your data.\"),\n          click() {\n            methods.switchStorage(\"local\");\n          },\n        },\n        {\n          title: `${$UserStore.storageType === \"blockstack\" ? \"✓\" : \"\"} Blockstack`,\n          description: Lang.t(\n            \"storage.blockstack_description\",\n            \"Sync across multiple devices using Blockstack's free and encrypted storage.\"\n          ),\n          click() {\n            methods.switchStorage(\"blockstack\");\n          },\n        },\n        {\n          title: `${$UserStore.storageType === \"pouchdb\" ? \"✓\" : \"\"} ${Lang.t(\"storage.pouchdb_title\", \"CouchDB (beta)\")}`,\n          description: Lang.t(\n            \"storage.pouchdb_description\",\n            \"Sync your data in real to a remote CouchDB server. ⚠️ Not good for multiple devices.\"\n          ),\n          click() {\n            methods.switchStorage(\"pouchdb\");\n          },\n        },\n      ];\n      Interact.popmenu({\n        title: Lang.t(\"storage.type_selector_title\", `Storage Options`),\n        description: Lang.t(\"storage.type_selector_title\", `How would you like your data stored?`),\n        buttons: buttons,\n      });\n    },\n    // boardsToggle() {\n    //   $UserStore.meta.boardsEnabled = !$UserStore.meta.boardsEnabled;\n    //   UserStore.saveMeta();\n    // },\n  };\n  let view = Storage.local.get(\"settings/view\") || \"features\";\n  function changeView(v) {\n    view = v;\n    Storage.local.put(\"settings/view\", v);\n    Device.scrollToTop();\n  }\n  \n\n\n  let basic =  20 + $UserStore.launchCount + TrackerStore.getAsArray().length;\n\n\n   // variable declarations\n   let money = basic;\n  let numberOfBuilding = 0;\n  let buildingProduction = 1; // $ produced per building per tick\n  let tickSpeed = 8.64e+7;\n    \n  // reactive declarations\n  $: cantBuy = cost > money;\n  $: cost = (numberOfBuilding + 1) * 5;\n  $: productionPerTick = numberOfBuilding * buildingProduction;\n  \n  // function declarations\n  \n  // update the values of `money` and `numberBuildings`\n  function updateNumbers(){\n    money -= cost;\n    numberOfBuilding += 1\n  }\n\n  // update `money` with `productionPerTick` and set a timeout to call itself after `tickSpeed` ms\n  function updateMoney(){\n    money += productionPerTick;\n    setTimeout(updateMoney, tickSpeed);\n  }\n  \n  \n  // const setTimeout = setTimeout;\n  onMount(() => {\n    Device.scrollToTop();\n    updateMoney();\n  });\n\n  \n</script>\n\n\n\n<style>\n  button {\n    outline: 1px solid black;\n    background: aliceblue;\n    cursor: pointer;\n  }\n\n  button.cantbuy {\n    background: #555;\n    color: #DDD;\n    cursor: default;\n  }\n</style>\n<NLayout pageTitle=\"Settings\">\n  <div slot=\"header\">\n    <div class=\"n-toolbar-grid container\">\n      <div class=\"left\" />\n      <div class=\"main\">\n        <Text bold>{Lang.t('settings.settings')}</Text>\n      </div>\n      <div class=\"right\">\n        <button on:click={methods.faq} class=\"btn tap-text\">{Lang.t('general.faq')}</button>\n      </div>\n    </div>\n    <div class=\"n-toolbar px-2 pb-1 container\">\n      <NButtonGroup\n        buttons={[{ label: 'Features', active: view == 'features', click() {\n              changeView('features');\n            } }, { label: 'Tweaks', active: view == 'tweaks', click() {\n              changeView('tweaks');\n            } }, { label: 'Data', active: view == 'data', click() {\n              changeView('data');\n            } },\n            { label: 'Card', active: view == 'card', click() {\n              changeView('card');\n            } },{ label: 'About', active: view == 'about', click() {\n              changeView('about');\n            } }]} />\n    </div>\n  </div>\n\n  <div slot=\"content\" class=\"pt-2\">\n    {#if $UserStore.meta}\n      <div class=\"page page-settings\">\n        <div class=\"container p-0\">\n          {#if view == 'features'}\n            <Features />\n          {:else if view == 'tweaks'}\n            <Tweaks />\n          {:else if view == 'data'}\n            <!--\n              *******************************************\n              DATA VIEW\n              *******************************************\n            -->\n            <div class=\"n-list pb-2\">\n              <NItem itemDivider>Import Data</NItem>\n              <!-- <NItem clickable title={Lang.t('settings.nomie-api')} on:click={() => navigate('/api')}>\n                <span slot=\"left\">🕸</span>\n                <span slot=\"right\">\n                  <NIcon name=\"chevronRight\" className=\"fill-faded-2\" />\n                </span>\n              </NItem> -->\n              <NItem\n                clickable\n                title={`${Lang.t('settings.import-from-backup')}`}\n                on:click={() => {\n                  showImporter = true;\n                }}>\n                <span slot=\"left\">📦</span>\n                <span slot=\"right\">\n                  <NIcon name=\"chevronRight\" className=\"fill-faded-2\" />\n                </span>\n                <input slot=\"right\" class=\"d-none\" type=\"file\" bind:this={fileInput} on:change={methods.onImportFile} />\n              </NItem>\n              <NItem clickable title={`${Lang.t('settings.import-from-csv', 'Import from CSV')}`} to=\"/settings/import/csv\">\n                <span slot=\"left\">📄</span>\n                <span slot=\"right\">\n                  <NIcon name=\"chevronRight\" className=\"fill-faded-2\" />\n                </span>\n              </NItem>\n            </div>\n            <div class=\"n-list pb-2\">\n              <NItem itemDivider>Export Data</NItem>\n              <NItem detail title={Lang.t('settings.generate-backup')} to=\"/settings/export/backup\">\n                <span slot=\"left\">📦</span>\n\n              </NItem>\n              <NItem detail title={Lang.t('settings.generate-csv')} to=\"/settings/export/csv\">\n                <span slot=\"left\">📃</span>\n              </NItem>\n            </div>\n            <div class=\"n-list pb-2\">\n              <NItem itemDivider>Storage Location</NItem>\n              <NItem on:click={methods.storageMenu}>\n                <span slot=\"left\">☁️</span>\n                {#if $UserStore.storageType === 'local'}\n                  This device only\n                {:else if $UserStore.storageType === 'pouchdb'}\n                  {Lang.t('storage.pouchdb', 'Local + CouchDB')}\n                {:else if $UserStore.storageType === 'blockstack'}{Lang.t('storage.blockstack', 'Blockstack')}{/if}\n                <div slot=\"right\">\n                  <Text size=\"sm\" className=\"text-primary-bright\">Change</Text>\n                </div>\n              </NItem>\n\n              {#if $UserStore.storageType === 'blockstack'}\n                <BlockstackOptions />\n              {/if}\n              {#if $UserStore.storageType === 'local'}\n                <LocalstorageOptions />\n              {/if}\n              {#if $UserStore.storageType === 'pouchdb'}\n                <PouchDBOptions />\n              {/if}\n            </div>\n            <div class=\"n-list pb-2\">\n              <NItem itemDivider>Data Management</NItem>\n              <NItem\n                detail\n                title=\"Browse Files...\"\n                on:click={() => {\n                  navigate('/files');\n                }}>\n                <span slot=\"left\">📂</span>\n              </NItem>\n\n              <NItem\n                detail\n                title=\"{Lang.t('settings.find-and-replace')}...\"\n                on:click={() => {\n                  data.showMassEditor = true;\n                }}>\n                <span slot=\"left\">🕵️‍♂️</span>\n              </NItem>\n\n            </div>\n\n            <!-- <div class=\"n-list solo my-2\">\n              <Text bold className=\"my-3 mx-3\">{Lang.t('general.type', 'Finding old data')}</Text>\n              <NItem bottomLine title=\"Find Context\" on:click={ContextStore.searchForContext}>\n                <span slot=\"left\">💬</span>\n              </NItem>\n              <NItem title=\"Find People\" on:click={PeopleStore.searchForPeople}>\n                <span slot=\"left\">👨‍👨‍👧‍👧</span>\n              </NItem>\n            </div> -->\n\n            {:else if view == 'card'}\n\n            <h2> Card Request Form</h2>\n            <div class='prefinery-form-embed'></div>\n\n\n          {:else if view == 'about'}\n            <!--\n              *******************************************\n              ABOUT VIEW \n              *******************************************\n            -->\n            <div class=\"n-list pb-1\">\n              <NItem itemDivider>Grader Points</NItem>\n              \n              <NItem title={Lang.t('You Have')}>\n                <span slot=\"right\">{money}</span>\n              </NItem>\n\n              <NItem title={Lang.t('You Used')}>\n                <span slot=\"right\">{numberOfBuilding} </span>\n              </NItem>\n\n              <NItem title={Lang.t('Next Purchase Will Cost')}>\n                <span slot=\"right\">{numberOfBuilding}  </span>\n              </NItem>\n\n              <NItem title={Lang.t('You Gained')}>\n                <span slot=\"right\">{productionPerTick} </span>\n              </NItem>\n              <!-- <h1>You have {money} $!</h1> -->\n\n              <!-- <button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}>\n                <p>{numberOfBuilding} buildings bought, next one cost {cost}$.</p>\n                <p>You gain {productionPerTick}$ / tick.</p>\n                <p>Grow Points</p>\n              </button> -->\n\n\n\n<!--               \n              <NItem detail title=\"Learn More\" href=\"https://nomie.app?s=dap\">\n                <span slot=\"right\" class=\"text-inverse-3\">Nomie.app</span>\n              </NItem>\n              <NItem title=\"Become a Patron\" detail href=\"https://www.patreon.com/nomieapp\">\n                <span slot=\"right\" class=\"text-inverse-3\">Patreon</span>\n              </NItem>\n              <NItem title=\"Reddit r/nomie\" detail href=\"https://reddit.com/r/nomie\">\n                <span slot=\"right\" class=\"n-row text-inverse-3\">/r/nomie</span>\n              </NItem>\n\n              <NItem title=\"Open Source\" detail href=\"https://github.com/open-nomie/nomie\">\n                <span slot=\"right\" class=\"n-row text-inverse-3\">GitHub</span>\n              </NItem> -->\n            </div>\n\n            <div class=\"n-list pb-1\">\n              <NItem itemDivider>App Details</NItem>\n              <NItem title={Lang.t('general.trackers', 'Tracker Count')}>\n                <span slot=\"right\">{TrackerStore.getAsArray().length}</span>\n              </NItem>\n\n              <NItem title={Lang.t('general.first_log', 'First Log')}>\n                <div class=\"\" slot=\"right\">\n                  {#await LedgerStore.getFirstDate()}\n                    Loading...\n                  {:then date}\n                    <div class=\"text-sm\">{date.format('MMM YYYY')}</div>\n                  {/await}\n                  <!--  -->\n                </div>\n              </NItem>\n              <NItem title={Lang.t('general.launch-count', 'Launch Count')}>\n                <div class=\"n-row\" slot=\"right\">\n                  <!-- <button class=\"btn btn-clear\" on:click={UserStore.resetLaunchCount}>\n                    <NIcon name=\"delete\" className=\"fill-red\" size=\"18\" />\n                  </button> -->\n                  {$UserStore.launchCount}\n                </div>\n              </NItem>\n              <NItem title={Lang.t('general.device', 'Device')}>\n                <span slot=\"right\">{$Device.device}</span>\n              </NItem>\n              <NItem title={Lang.t('general.platform', 'Platform')}>\n                <span slot=\"right\">{$Device.platform}</span>\n              </NItem>\n              <NItem title={Lang.t('general.pwa', 'PWA')}>\n                <span slot=\"right\">{$Device.pwa}</span>\n              </NItem>\n            </div>\n\n            <NItem itemDivider>Version</NItem>\n            <NItem title=\"Version 5.4.1 \" description=\"Built Sun Dec 20 2020 11:21pm \">\n              <span slot=\"right\" class=\"n-row\">\n                <Button size=\"xs\" on:click={AppStore.reveal} className=\"ml-2\">What's new</Button>\n              </span>\n            </NItem>\n            <NItem\n              title=\"Onboarded\"\n              on:click={() => {\n                navigate('/setup');\n              }}>\n              <span slot=\"right\" class=\"text-primary-bright\">{Lang.t('settings.redo-setup', 'Redo Setup')}</span>\n            </NItem>\n          {/if}\n          <!-- END Views -->\n\n          <div class=\"n-list solo mt-3\">\n            <NItem title={Lang.t('settings.nomie-needs-you', 'Grader needs You!')}>\n              <Text size=\"sm\" faded>\n                {Lang.t('settings.become-a-patron-message', 'Help keep Grader development moving forward, free, no ads, and open.')}\n              </Text>\n              <img src=\"/images/nomie-head-on.png\" height=\"75\" alt=\"Nomie\" slot=\"left\" class=\"pr-0\" />\n            </NItem>\n            <NItem\n              detail\n              title={Lang.t('general.become-a-patron', 'Become a Patron')}\n              className=\"text-primary-bright\"\n              on:click={() => {\n                window.open(config.patreon, '_system');\n              }}>\n              <Text size=\"xs\" color=\"inverse-2\" className=\"mt-1\">Pick from 1 of 3 Patreon levels</Text>\n            </NItem>\n          </div>\n\n          <NItem className=\"bg-transparent\">\n            <div class=\"px-2 py-4 text-center\">\n              <Text size=\"md\" className=\"mb-2\">\n                {`${Lang.t('general.questions')}`}\n                <a class=\"text-primary-bright\" href={`mailto:${config.support_email}?subject=Nomie 5.4.1 `}>\n                  {config.support_contact}\n                </a>\n              </Text>\n              <Text size=\"sm\" on:click={specialTap}>&copy; Copyright 2020 - {dayjs().format('YYYY')}</Text>\n              <Text size=\"sm\" inline faded>All Rights Reserved</Text>\n              <Text size=\"sm\" inline>\n                <a class=\"text-primary-bright\" href=\"https://www.creditsense.com.ng\" traget=\"_system\">Credit Sense</a>\n              </Text>\n            </div>\n          </NItem>\n\n          <NItem className=\"bg-transparent mt-4 mb-2\" title=\"⚠️ Danger Zone\">\n\n            <div slot=\"right\">\n              <Button color=\"danger\" size=\"sm\" on:click={methods.deleteEverything}>Destory all Data</Button>\n            </div>\n          </NItem>\n\n        </div>\n        <!-- end container -->\n\n      </div>\n    {/if}\n  </div>\n  <!-- end content slot-->\n\n</NLayout>\n\n<MassEditor on:close={methods.closeMassEditor} show={data.showMassEditor} />\n\n{#if showImporter}\n  <ImporterModal on:dismiss={() => (showImporter = false)} />\n{/if}\n"
  ],
  "names": [],
  "mappings": "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"
}